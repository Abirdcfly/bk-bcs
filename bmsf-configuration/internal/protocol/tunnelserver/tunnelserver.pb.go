// Code generated by protoc-gen-go.
// source: tunnelserver.proto
// DO NOT EDIT!

/*
Package tunnelserver is a generated protocol buffer package.

It is generated from these files:
	tunnelserver.proto

It has these top-level messages:
	PublishReleaseReq
	PublishReleaseResp
	RollbackReleaseReq
	RollbackReleaseResp
	ReloadReq
	ReloadResp
	HealthzReq
	HealthzResp
	GTCMDQueryAppMetadataReq
	GTCMDQueryAppMetadataResp
	GTCMDQueryHostProcAttrListReq
	GTCMDQueryHostProcAttrListResp
	GTCMDPluginInfo
	GTCMDEffectReport
	GTCMDPullReleaseReq
	GTCMDPullReleaseResp
	GTCMDPullConfigListReq
	GTCMDPullConfigListResp
	GTCMDPublish
	GTCMDRollback
	GTCMDReload
	GeneralTunnelDownStream
	GeneralTunnelUpStream
*/
package tunnelserver

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "bk-bscp/internal/protocol/common"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GeneralTunnelCmd int32

const (
	GeneralTunnelCmd_GTCMD_C2S_QUERY_APP_METADATA       GeneralTunnelCmd = 0
	GeneralTunnelCmd_GTCMD_C2S_PLUGIN_INFO              GeneralTunnelCmd = 1
	GeneralTunnelCmd_GTCMD_C2S_EFFECT_REPORT            GeneralTunnelCmd = 2
	GeneralTunnelCmd_GTCMD_C2S_PULL_RELEASE             GeneralTunnelCmd = 3
	GeneralTunnelCmd_GTCMD_C2S_PULL_CONFIGLIST          GeneralTunnelCmd = 4
	GeneralTunnelCmd_GTCMD_S2C_PUBLISH                  GeneralTunnelCmd = 5
	GeneralTunnelCmd_GTCMD_S2C_ROLLBACK                 GeneralTunnelCmd = 6
	GeneralTunnelCmd_GTCMD_S2C_RELOAD                   GeneralTunnelCmd = 7
	GeneralTunnelCmd_GTCMD_C2S_QUERY_HOST_PROCATTR_LIST GeneralTunnelCmd = 8
)

var GeneralTunnelCmd_name = map[int32]string{
	0: "GTCMD_C2S_QUERY_APP_METADATA",
	1: "GTCMD_C2S_PLUGIN_INFO",
	2: "GTCMD_C2S_EFFECT_REPORT",
	3: "GTCMD_C2S_PULL_RELEASE",
	4: "GTCMD_C2S_PULL_CONFIGLIST",
	5: "GTCMD_S2C_PUBLISH",
	6: "GTCMD_S2C_ROLLBACK",
	7: "GTCMD_S2C_RELOAD",
	8: "GTCMD_C2S_QUERY_HOST_PROCATTR_LIST",
}
var GeneralTunnelCmd_value = map[string]int32{
	"GTCMD_C2S_QUERY_APP_METADATA":       0,
	"GTCMD_C2S_PLUGIN_INFO":              1,
	"GTCMD_C2S_EFFECT_REPORT":            2,
	"GTCMD_C2S_PULL_RELEASE":             3,
	"GTCMD_C2S_PULL_CONFIGLIST":          4,
	"GTCMD_S2C_PUBLISH":                  5,
	"GTCMD_S2C_ROLLBACK":                 6,
	"GTCMD_S2C_RELOAD":                   7,
	"GTCMD_C2S_QUERY_HOST_PROCATTR_LIST": 8,
}

func (x GeneralTunnelCmd) String() string {
	return proto.EnumName(GeneralTunnelCmd_name, int32(x))
}
func (GeneralTunnelCmd) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type PublishReleaseReq struct {
	Seq       string `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	BizId     string `protobuf:"bytes,2,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	ReleaseId string `protobuf:"bytes,3,opt,name=release_id,json=releaseId" json:"release_id,omitempty"`
	Operator  string `protobuf:"bytes,4,opt,name=operator" json:"operator,omitempty"`
}

func (m *PublishReleaseReq) Reset()                    { *m = PublishReleaseReq{} }
func (m *PublishReleaseReq) String() string            { return proto.CompactTextString(m) }
func (*PublishReleaseReq) ProtoMessage()               {}
func (*PublishReleaseReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *PublishReleaseReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *PublishReleaseReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *PublishReleaseReq) GetReleaseId() string {
	if m != nil {
		return m.ReleaseId
	}
	return ""
}

func (m *PublishReleaseReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

type PublishReleaseResp struct {
	Seq     string         `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string         `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *PublishReleaseResp) Reset()                    { *m = PublishReleaseResp{} }
func (m *PublishReleaseResp) String() string            { return proto.CompactTextString(m) }
func (*PublishReleaseResp) ProtoMessage()               {}
func (*PublishReleaseResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *PublishReleaseResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *PublishReleaseResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *PublishReleaseResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type RollbackReleaseReq struct {
	Seq       string `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	BizId     string `protobuf:"bytes,2,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	ReleaseId string `protobuf:"bytes,3,opt,name=release_id,json=releaseId" json:"release_id,omitempty"`
	Operator  string `protobuf:"bytes,4,opt,name=operator" json:"operator,omitempty"`
}

func (m *RollbackReleaseReq) Reset()                    { *m = RollbackReleaseReq{} }
func (m *RollbackReleaseReq) String() string            { return proto.CompactTextString(m) }
func (*RollbackReleaseReq) ProtoMessage()               {}
func (*RollbackReleaseReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *RollbackReleaseReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *RollbackReleaseReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *RollbackReleaseReq) GetReleaseId() string {
	if m != nil {
		return m.ReleaseId
	}
	return ""
}

func (m *RollbackReleaseReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

type RollbackReleaseResp struct {
	Seq     string         `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string         `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *RollbackReleaseResp) Reset()                    { *m = RollbackReleaseResp{} }
func (m *RollbackReleaseResp) String() string            { return proto.CompactTextString(m) }
func (*RollbackReleaseResp) ProtoMessage()               {}
func (*RollbackReleaseResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *RollbackReleaseResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *RollbackReleaseResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *RollbackReleaseResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type ReloadReq struct {
	Seq            string             `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	BizId          string             `protobuf:"bytes,2,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	ReleaseId      string             `protobuf:"bytes,3,opt,name=release_id,json=releaseId" json:"release_id,omitempty"`
	MultiReleaseId string             `protobuf:"bytes,4,opt,name=multi_release_id,json=multiReleaseId" json:"multi_release_id,omitempty"`
	Operator       string             `protobuf:"bytes,5,opt,name=operator" json:"operator,omitempty"`
	ReloadSpec     *common.ReloadSpec `protobuf:"bytes,6,opt,name=reload_spec,json=reloadSpec" json:"reload_spec,omitempty"`
}

func (m *ReloadReq) Reset()                    { *m = ReloadReq{} }
func (m *ReloadReq) String() string            { return proto.CompactTextString(m) }
func (*ReloadReq) ProtoMessage()               {}
func (*ReloadReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ReloadReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *ReloadReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *ReloadReq) GetReleaseId() string {
	if m != nil {
		return m.ReleaseId
	}
	return ""
}

func (m *ReloadReq) GetMultiReleaseId() string {
	if m != nil {
		return m.MultiReleaseId
	}
	return ""
}

func (m *ReloadReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *ReloadReq) GetReloadSpec() *common.ReloadSpec {
	if m != nil {
		return m.ReloadSpec
	}
	return nil
}

type ReloadResp struct {
	Seq     string         `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string         `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *ReloadResp) Reset()                    { *m = ReloadResp{} }
func (m *ReloadResp) String() string            { return proto.CompactTextString(m) }
func (*ReloadResp) ProtoMessage()               {}
func (*ReloadResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ReloadResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *ReloadResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *ReloadResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type HealthzReq struct {
	Seq string `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
}

func (m *HealthzReq) Reset()                    { *m = HealthzReq{} }
func (m *HealthzReq) String() string            { return proto.CompactTextString(m) }
func (*HealthzReq) ProtoMessage()               {}
func (*HealthzReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *HealthzReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

type HealthzResp struct {
	Seq     string                    `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode            `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string                    `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    *common.ModuleHealthzInfo `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *HealthzResp) Reset()                    { *m = HealthzResp{} }
func (m *HealthzResp) String() string            { return proto.CompactTextString(m) }
func (*HealthzResp) ProtoMessage()               {}
func (*HealthzResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *HealthzResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *HealthzResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *HealthzResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *HealthzResp) GetData() *common.ModuleHealthzInfo {
	if m != nil {
		return m.Data
	}
	return nil
}

type GTCMDQueryAppMetadataReq struct {
	Seq   string `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	BizId string `protobuf:"bytes,2,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId string `protobuf:"bytes,3,opt,name=app_id,json=appId" json:"app_id,omitempty"`
}

func (m *GTCMDQueryAppMetadataReq) Reset()                    { *m = GTCMDQueryAppMetadataReq{} }
func (m *GTCMDQueryAppMetadataReq) String() string            { return proto.CompactTextString(m) }
func (*GTCMDQueryAppMetadataReq) ProtoMessage()               {}
func (*GTCMDQueryAppMetadataReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *GTCMDQueryAppMetadataReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *GTCMDQueryAppMetadataReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *GTCMDQueryAppMetadataReq) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

type GTCMDQueryAppMetadataResp struct {
	Seq     string         `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string         `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *GTCMDQueryAppMetadataResp) Reset()                    { *m = GTCMDQueryAppMetadataResp{} }
func (m *GTCMDQueryAppMetadataResp) String() string            { return proto.CompactTextString(m) }
func (*GTCMDQueryAppMetadataResp) ProtoMessage()               {}
func (*GTCMDQueryAppMetadataResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *GTCMDQueryAppMetadataResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *GTCMDQueryAppMetadataResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *GTCMDQueryAppMetadataResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type GTCMDQueryHostProcAttrListReq struct {
	Seq     string       `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	CloudId string       `protobuf:"bytes,2,opt,name=cloud_id,json=cloudId" json:"cloud_id,omitempty"`
	Ip      string       `protobuf:"bytes,3,opt,name=ip" json:"ip,omitempty"`
	Page    *common.Page `protobuf:"bytes,4,opt,name=page" json:"page,omitempty"`
}

func (m *GTCMDQueryHostProcAttrListReq) Reset()                    { *m = GTCMDQueryHostProcAttrListReq{} }
func (m *GTCMDQueryHostProcAttrListReq) String() string            { return proto.CompactTextString(m) }
func (*GTCMDQueryHostProcAttrListReq) ProtoMessage()               {}
func (*GTCMDQueryHostProcAttrListReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *GTCMDQueryHostProcAttrListReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *GTCMDQueryHostProcAttrListReq) GetCloudId() string {
	if m != nil {
		return m.CloudId
	}
	return ""
}

func (m *GTCMDQueryHostProcAttrListReq) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *GTCMDQueryHostProcAttrListReq) GetPage() *common.Page {
	if m != nil {
		return m.Page
	}
	return nil
}

type GTCMDQueryHostProcAttrListResp struct {
	Seq       string             `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code      common.ErrCode     `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message   string             `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	ProcAttrs []*common.ProcAttr `protobuf:"bytes,4,rep,name=proc_attrs,json=procAttrs" json:"proc_attrs,omitempty"`
}

func (m *GTCMDQueryHostProcAttrListResp) Reset()                    { *m = GTCMDQueryHostProcAttrListResp{} }
func (m *GTCMDQueryHostProcAttrListResp) String() string            { return proto.CompactTextString(m) }
func (*GTCMDQueryHostProcAttrListResp) ProtoMessage()               {}
func (*GTCMDQueryHostProcAttrListResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *GTCMDQueryHostProcAttrListResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *GTCMDQueryHostProcAttrListResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *GTCMDQueryHostProcAttrListResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *GTCMDQueryHostProcAttrListResp) GetProcAttrs() []*common.ProcAttr {
	if m != nil {
		return m.ProcAttrs
	}
	return nil
}

type GTCMDPluginInfo struct {
	Instances []*common.AppInstance `protobuf:"bytes,1,rep,name=instances" json:"instances,omitempty"`
	Timeout   int64                 `protobuf:"varint,2,opt,name=timeout" json:"timeout,omitempty"`
}

func (m *GTCMDPluginInfo) Reset()                    { *m = GTCMDPluginInfo{} }
func (m *GTCMDPluginInfo) String() string            { return proto.CompactTextString(m) }
func (*GTCMDPluginInfo) ProtoMessage()               {}
func (*GTCMDPluginInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *GTCMDPluginInfo) GetInstances() []*common.AppInstance {
	if m != nil {
		return m.Instances
	}
	return nil
}

func (m *GTCMDPluginInfo) GetTimeout() int64 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

type GTCMDEffectReport struct {
	Seq     string               `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	BizId   string               `protobuf:"bytes,2,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId   string               `protobuf:"bytes,3,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	CloudId string               `protobuf:"bytes,4,opt,name=cloud_id,json=cloudId" json:"cloud_id,omitempty"`
	Ip      string               `protobuf:"bytes,5,opt,name=ip" json:"ip,omitempty"`
	Path    string               `protobuf:"bytes,6,opt,name=path" json:"path,omitempty"`
	Labels  string               `protobuf:"bytes,7,opt,name=labels" json:"labels,omitempty"`
	Infos   []*common.ReportInfo `protobuf:"bytes,8,rep,name=infos" json:"infos,omitempty"`
}

func (m *GTCMDEffectReport) Reset()                    { *m = GTCMDEffectReport{} }
func (m *GTCMDEffectReport) String() string            { return proto.CompactTextString(m) }
func (*GTCMDEffectReport) ProtoMessage()               {}
func (*GTCMDEffectReport) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *GTCMDEffectReport) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *GTCMDEffectReport) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *GTCMDEffectReport) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *GTCMDEffectReport) GetCloudId() string {
	if m != nil {
		return m.CloudId
	}
	return ""
}

func (m *GTCMDEffectReport) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *GTCMDEffectReport) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *GTCMDEffectReport) GetLabels() string {
	if m != nil {
		return m.Labels
	}
	return ""
}

func (m *GTCMDEffectReport) GetInfos() []*common.ReportInfo {
	if m != nil {
		return m.Infos
	}
	return nil
}

type GTCMDPullReleaseReq struct {
	Seq            string `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	BizId          string `protobuf:"bytes,2,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId          string `protobuf:"bytes,3,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	CloudId        string `protobuf:"bytes,4,opt,name=cloud_id,json=cloudId" json:"cloud_id,omitempty"`
	Ip             string `protobuf:"bytes,5,opt,name=ip" json:"ip,omitempty"`
	Path           string `protobuf:"bytes,6,opt,name=path" json:"path,omitempty"`
	Labels         string `protobuf:"bytes,7,opt,name=labels" json:"labels,omitempty"`
	CfgId          string `protobuf:"bytes,8,opt,name=cfg_id,json=cfgId" json:"cfg_id,omitempty"`
	LocalReleaseId string `protobuf:"bytes,9,opt,name=local_release_id,json=localReleaseId" json:"local_release_id,omitempty"`
	ReleaseId      string `protobuf:"bytes,10,opt,name=release_id,json=releaseId" json:"release_id,omitempty"`
}

func (m *GTCMDPullReleaseReq) Reset()                    { *m = GTCMDPullReleaseReq{} }
func (m *GTCMDPullReleaseReq) String() string            { return proto.CompactTextString(m) }
func (*GTCMDPullReleaseReq) ProtoMessage()               {}
func (*GTCMDPullReleaseReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *GTCMDPullReleaseReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *GTCMDPullReleaseReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *GTCMDPullReleaseReq) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *GTCMDPullReleaseReq) GetCloudId() string {
	if m != nil {
		return m.CloudId
	}
	return ""
}

func (m *GTCMDPullReleaseReq) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *GTCMDPullReleaseReq) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *GTCMDPullReleaseReq) GetLabels() string {
	if m != nil {
		return m.Labels
	}
	return ""
}

func (m *GTCMDPullReleaseReq) GetCfgId() string {
	if m != nil {
		return m.CfgId
	}
	return ""
}

func (m *GTCMDPullReleaseReq) GetLocalReleaseId() string {
	if m != nil {
		return m.LocalReleaseId
	}
	return ""
}

func (m *GTCMDPullReleaseReq) GetReleaseId() string {
	if m != nil {
		return m.ReleaseId
	}
	return ""
}

type GTCMDPullReleaseResp struct {
	Seq         string          `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code        common.ErrCode  `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message     string          `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	NeedEffect  bool            `protobuf:"varint,4,opt,name=need_effect,json=needEffect" json:"need_effect,omitempty"`
	Release     *common.Release `protobuf:"bytes,5,opt,name=release" json:"release,omitempty"`
	ContentId   string          `protobuf:"bytes,6,opt,name=content_id,json=contentId" json:"content_id,omitempty"`
	ContentSize uint32          `protobuf:"varint,7,opt,name=content_size,json=contentSize" json:"content_size,omitempty"`
}

func (m *GTCMDPullReleaseResp) Reset()                    { *m = GTCMDPullReleaseResp{} }
func (m *GTCMDPullReleaseResp) String() string            { return proto.CompactTextString(m) }
func (*GTCMDPullReleaseResp) ProtoMessage()               {}
func (*GTCMDPullReleaseResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *GTCMDPullReleaseResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *GTCMDPullReleaseResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *GTCMDPullReleaseResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *GTCMDPullReleaseResp) GetNeedEffect() bool {
	if m != nil {
		return m.NeedEffect
	}
	return false
}

func (m *GTCMDPullReleaseResp) GetRelease() *common.Release {
	if m != nil {
		return m.Release
	}
	return nil
}

func (m *GTCMDPullReleaseResp) GetContentId() string {
	if m != nil {
		return m.ContentId
	}
	return ""
}

func (m *GTCMDPullReleaseResp) GetContentSize() uint32 {
	if m != nil {
		return m.ContentSize
	}
	return 0
}

type GTCMDPullConfigListReq struct {
	Seq   string       `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	BizId string       `protobuf:"bytes,2,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId string       `protobuf:"bytes,3,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	Page  *common.Page `protobuf:"bytes,4,opt,name=page" json:"page,omitempty"`
}

func (m *GTCMDPullConfigListReq) Reset()                    { *m = GTCMDPullConfigListReq{} }
func (m *GTCMDPullConfigListReq) String() string            { return proto.CompactTextString(m) }
func (*GTCMDPullConfigListReq) ProtoMessage()               {}
func (*GTCMDPullConfigListReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *GTCMDPullConfigListReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *GTCMDPullConfigListReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *GTCMDPullConfigListReq) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *GTCMDPullConfigListReq) GetPage() *common.Page {
	if m != nil {
		return m.Page
	}
	return nil
}

type GTCMDPullConfigListResp struct {
	Seq     string           `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode   `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string           `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Configs []*common.Config `protobuf:"bytes,4,rep,name=configs" json:"configs,omitempty"`
}

func (m *GTCMDPullConfigListResp) Reset()                    { *m = GTCMDPullConfigListResp{} }
func (m *GTCMDPullConfigListResp) String() string            { return proto.CompactTextString(m) }
func (*GTCMDPullConfigListResp) ProtoMessage()               {}
func (*GTCMDPullConfigListResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *GTCMDPullConfigListResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *GTCMDPullConfigListResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *GTCMDPullConfigListResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *GTCMDPullConfigListResp) GetConfigs() []*common.Config {
	if m != nil {
		return m.Configs
	}
	return nil
}

type GTCMDPublish struct {
	BizId      string `protobuf:"bytes,1,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId      string `protobuf:"bytes,2,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	CfgId      string `protobuf:"bytes,3,opt,name=cfg_id,json=cfgId" json:"cfg_id,omitempty"`
	CfgName    string `protobuf:"bytes,4,opt,name=cfg_name,json=cfgName" json:"cfg_name,omitempty"`
	CfgFpath   string `protobuf:"bytes,5,opt,name=cfg_fpath,json=cfgFpath" json:"cfg_fpath,omitempty"`
	Serialno   uint64 `protobuf:"varint,6,opt,name=serialno" json:"serialno,omitempty"`
	ReleaseId  string `protobuf:"bytes,7,opt,name=release_id,json=releaseId" json:"release_id,omitempty"`
	Strategies string `protobuf:"bytes,8,opt,name=strategies" json:"strategies,omitempty"`
}

func (m *GTCMDPublish) Reset()                    { *m = GTCMDPublish{} }
func (m *GTCMDPublish) String() string            { return proto.CompactTextString(m) }
func (*GTCMDPublish) ProtoMessage()               {}
func (*GTCMDPublish) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *GTCMDPublish) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *GTCMDPublish) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *GTCMDPublish) GetCfgId() string {
	if m != nil {
		return m.CfgId
	}
	return ""
}

func (m *GTCMDPublish) GetCfgName() string {
	if m != nil {
		return m.CfgName
	}
	return ""
}

func (m *GTCMDPublish) GetCfgFpath() string {
	if m != nil {
		return m.CfgFpath
	}
	return ""
}

func (m *GTCMDPublish) GetSerialno() uint64 {
	if m != nil {
		return m.Serialno
	}
	return 0
}

func (m *GTCMDPublish) GetReleaseId() string {
	if m != nil {
		return m.ReleaseId
	}
	return ""
}

func (m *GTCMDPublish) GetStrategies() string {
	if m != nil {
		return m.Strategies
	}
	return ""
}

type GTCMDRollback struct {
	BizId      string `protobuf:"bytes,1,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId      string `protobuf:"bytes,2,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	CfgId      string `protobuf:"bytes,3,opt,name=cfg_id,json=cfgId" json:"cfg_id,omitempty"`
	CfgName    string `protobuf:"bytes,4,opt,name=cfg_name,json=cfgName" json:"cfg_name,omitempty"`
	CfgFpath   string `protobuf:"bytes,5,opt,name=cfg_fpath,json=cfgFpath" json:"cfg_fpath,omitempty"`
	Serialno   uint64 `protobuf:"varint,6,opt,name=serialno" json:"serialno,omitempty"`
	ReleaseId  string `protobuf:"bytes,7,opt,name=release_id,json=releaseId" json:"release_id,omitempty"`
	Strategies string `protobuf:"bytes,8,opt,name=strategies" json:"strategies,omitempty"`
}

func (m *GTCMDRollback) Reset()                    { *m = GTCMDRollback{} }
func (m *GTCMDRollback) String() string            { return proto.CompactTextString(m) }
func (*GTCMDRollback) ProtoMessage()               {}
func (*GTCMDRollback) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *GTCMDRollback) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *GTCMDRollback) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *GTCMDRollback) GetCfgId() string {
	if m != nil {
		return m.CfgId
	}
	return ""
}

func (m *GTCMDRollback) GetCfgName() string {
	if m != nil {
		return m.CfgName
	}
	return ""
}

func (m *GTCMDRollback) GetCfgFpath() string {
	if m != nil {
		return m.CfgFpath
	}
	return ""
}

func (m *GTCMDRollback) GetSerialno() uint64 {
	if m != nil {
		return m.Serialno
	}
	return 0
}

func (m *GTCMDRollback) GetReleaseId() string {
	if m != nil {
		return m.ReleaseId
	}
	return ""
}

func (m *GTCMDRollback) GetStrategies() string {
	if m != nil {
		return m.Strategies
	}
	return ""
}

type GTCMDReload struct {
	BizId      string             `protobuf:"bytes,1,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId      string             `protobuf:"bytes,2,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	Strategies string             `protobuf:"bytes,3,opt,name=strategies" json:"strategies,omitempty"`
	ReloadSpec *common.ReloadSpec `protobuf:"bytes,4,opt,name=reload_spec,json=reloadSpec" json:"reload_spec,omitempty"`
}

func (m *GTCMDReload) Reset()                    { *m = GTCMDReload{} }
func (m *GTCMDReload) String() string            { return proto.CompactTextString(m) }
func (*GTCMDReload) ProtoMessage()               {}
func (*GTCMDReload) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *GTCMDReload) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *GTCMDReload) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *GTCMDReload) GetStrategies() string {
	if m != nil {
		return m.Strategies
	}
	return ""
}

func (m *GTCMDReload) GetReloadSpec() *common.ReloadSpec {
	if m != nil {
		return m.ReloadSpec
	}
	return nil
}

// downstream requests(C2S)
// cmd:
//      GTCMD_C2S_QUERY_APP_METADATA
//      GTCMD_C2S_PLUGIN_INFO
//      GTCMD_C2S_EFFECT_REPORT
//      GTCMD_C2S_PULL_RELEASE
//      GTCMD_C2S_PULL_CONFIGLIST
//      GTCMD_C2S_QUERY_HOST_PROCATTR_LIST
// data:
//      GTCMDQueryAppMetadataReq
//      GTCMDPluginInfo
//      GTCMDEffectReport
//      GTCMDPullReleaseReq
//      GTCMDPullConfigListReq
//      GTCMDQueryHostProcAttrListReq
type GeneralTunnelDownStream struct {
	Seq  string           `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Cmd  GeneralTunnelCmd `protobuf:"varint,2,opt,name=cmd,enum=tunnelserver.GeneralTunnelCmd" json:"cmd,omitempty"`
	Data []byte           `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *GeneralTunnelDownStream) Reset()                    { *m = GeneralTunnelDownStream{} }
func (m *GeneralTunnelDownStream) String() string            { return proto.CompactTextString(m) }
func (*GeneralTunnelDownStream) ProtoMessage()               {}
func (*GeneralTunnelDownStream) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *GeneralTunnelDownStream) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *GeneralTunnelDownStream) GetCmd() GeneralTunnelCmd {
	if m != nil {
		return m.Cmd
	}
	return GeneralTunnelCmd_GTCMD_C2S_QUERY_APP_METADATA
}

func (m *GeneralTunnelDownStream) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// upstream requests(S2C)
// cmd:
//      GTCMD_S2C_PUBLISH
//      GTCMD_S2C_ROLLBACK
//      GTCMD_S2C_RELOAD
//      GTCMD_C2S_QUERY_APP_METADATA
//      GTCMD_C2S_PULL_RELEASE
//      GTCMD_C2S_PULL_CONFIGLIST
//      GTCMD_C2S_QUERY_HOST_PROCATTR_LIST
// data:
//      GTCMDPublish
//      GTCMDRollback
//      GTCMDReload
//      GTCMDQueryAppMetadataResp
//      GTCMDPullReleaseResp
//      GTCMDPullConfigListResp
//      GTCMDQueryHostProcAttrListResp
type GeneralTunnelUpStream struct {
	Seq  string           `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Cmd  GeneralTunnelCmd `protobuf:"varint,2,opt,name=cmd,enum=tunnelserver.GeneralTunnelCmd" json:"cmd,omitempty"`
	Data []byte           `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *GeneralTunnelUpStream) Reset()                    { *m = GeneralTunnelUpStream{} }
func (m *GeneralTunnelUpStream) String() string            { return proto.CompactTextString(m) }
func (*GeneralTunnelUpStream) ProtoMessage()               {}
func (*GeneralTunnelUpStream) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *GeneralTunnelUpStream) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *GeneralTunnelUpStream) GetCmd() GeneralTunnelCmd {
	if m != nil {
		return m.Cmd
	}
	return GeneralTunnelCmd_GTCMD_C2S_QUERY_APP_METADATA
}

func (m *GeneralTunnelUpStream) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*PublishReleaseReq)(nil), "tunnelserver.PublishReleaseReq")
	proto.RegisterType((*PublishReleaseResp)(nil), "tunnelserver.PublishReleaseResp")
	proto.RegisterType((*RollbackReleaseReq)(nil), "tunnelserver.RollbackReleaseReq")
	proto.RegisterType((*RollbackReleaseResp)(nil), "tunnelserver.RollbackReleaseResp")
	proto.RegisterType((*ReloadReq)(nil), "tunnelserver.ReloadReq")
	proto.RegisterType((*ReloadResp)(nil), "tunnelserver.ReloadResp")
	proto.RegisterType((*HealthzReq)(nil), "tunnelserver.HealthzReq")
	proto.RegisterType((*HealthzResp)(nil), "tunnelserver.HealthzResp")
	proto.RegisterType((*GTCMDQueryAppMetadataReq)(nil), "tunnelserver.GTCMDQueryAppMetadataReq")
	proto.RegisterType((*GTCMDQueryAppMetadataResp)(nil), "tunnelserver.GTCMDQueryAppMetadataResp")
	proto.RegisterType((*GTCMDQueryHostProcAttrListReq)(nil), "tunnelserver.GTCMDQueryHostProcAttrListReq")
	proto.RegisterType((*GTCMDQueryHostProcAttrListResp)(nil), "tunnelserver.GTCMDQueryHostProcAttrListResp")
	proto.RegisterType((*GTCMDPluginInfo)(nil), "tunnelserver.GTCMDPluginInfo")
	proto.RegisterType((*GTCMDEffectReport)(nil), "tunnelserver.GTCMDEffectReport")
	proto.RegisterType((*GTCMDPullReleaseReq)(nil), "tunnelserver.GTCMDPullReleaseReq")
	proto.RegisterType((*GTCMDPullReleaseResp)(nil), "tunnelserver.GTCMDPullReleaseResp")
	proto.RegisterType((*GTCMDPullConfigListReq)(nil), "tunnelserver.GTCMDPullConfigListReq")
	proto.RegisterType((*GTCMDPullConfigListResp)(nil), "tunnelserver.GTCMDPullConfigListResp")
	proto.RegisterType((*GTCMDPublish)(nil), "tunnelserver.GTCMDPublish")
	proto.RegisterType((*GTCMDRollback)(nil), "tunnelserver.GTCMDRollback")
	proto.RegisterType((*GTCMDReload)(nil), "tunnelserver.GTCMDReload")
	proto.RegisterType((*GeneralTunnelDownStream)(nil), "tunnelserver.GeneralTunnelDownStream")
	proto.RegisterType((*GeneralTunnelUpStream)(nil), "tunnelserver.GeneralTunnelUpStream")
	proto.RegisterEnum("tunnelserver.GeneralTunnelCmd", GeneralTunnelCmd_name, GeneralTunnelCmd_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Tunnel service

type TunnelClient interface {
	PublishRelease(ctx context.Context, in *PublishReleaseReq, opts ...grpc.CallOption) (*PublishReleaseResp, error)
	RollbackRelease(ctx context.Context, in *RollbackReleaseReq, opts ...grpc.CallOption) (*RollbackReleaseResp, error)
	Reload(ctx context.Context, in *ReloadReq, opts ...grpc.CallOption) (*ReloadResp, error)
	Healthz(ctx context.Context, in *HealthzReq, opts ...grpc.CallOption) (*HealthzResp, error)
}

type tunnelClient struct {
	cc *grpc.ClientConn
}

func NewTunnelClient(cc *grpc.ClientConn) TunnelClient {
	return &tunnelClient{cc}
}

func (c *tunnelClient) PublishRelease(ctx context.Context, in *PublishReleaseReq, opts ...grpc.CallOption) (*PublishReleaseResp, error) {
	out := new(PublishReleaseResp)
	err := grpc.Invoke(ctx, "/tunnelserver.Tunnel/PublishRelease", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tunnelClient) RollbackRelease(ctx context.Context, in *RollbackReleaseReq, opts ...grpc.CallOption) (*RollbackReleaseResp, error) {
	out := new(RollbackReleaseResp)
	err := grpc.Invoke(ctx, "/tunnelserver.Tunnel/RollbackRelease", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tunnelClient) Reload(ctx context.Context, in *ReloadReq, opts ...grpc.CallOption) (*ReloadResp, error) {
	out := new(ReloadResp)
	err := grpc.Invoke(ctx, "/tunnelserver.Tunnel/Reload", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tunnelClient) Healthz(ctx context.Context, in *HealthzReq, opts ...grpc.CallOption) (*HealthzResp, error) {
	out := new(HealthzResp)
	err := grpc.Invoke(ctx, "/tunnelserver.Tunnel/Healthz", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Tunnel service

type TunnelServer interface {
	PublishRelease(context.Context, *PublishReleaseReq) (*PublishReleaseResp, error)
	RollbackRelease(context.Context, *RollbackReleaseReq) (*RollbackReleaseResp, error)
	Reload(context.Context, *ReloadReq) (*ReloadResp, error)
	Healthz(context.Context, *HealthzReq) (*HealthzResp, error)
}

func RegisterTunnelServer(s *grpc.Server, srv TunnelServer) {
	s.RegisterService(&_Tunnel_serviceDesc, srv)
}

func _Tunnel_PublishRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishReleaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TunnelServer).PublishRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tunnelserver.Tunnel/PublishRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TunnelServer).PublishRelease(ctx, req.(*PublishReleaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tunnel_RollbackRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RollbackReleaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TunnelServer).RollbackRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tunnelserver.Tunnel/RollbackRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TunnelServer).RollbackRelease(ctx, req.(*RollbackReleaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tunnel_Reload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReloadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TunnelServer).Reload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tunnelserver.Tunnel/Reload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TunnelServer).Reload(ctx, req.(*ReloadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tunnel_Healthz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthzReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TunnelServer).Healthz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tunnelserver.Tunnel/Healthz",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TunnelServer).Healthz(ctx, req.(*HealthzReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Tunnel_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tunnelserver.Tunnel",
	HandlerType: (*TunnelServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PublishRelease",
			Handler:    _Tunnel_PublishRelease_Handler,
		},
		{
			MethodName: "RollbackRelease",
			Handler:    _Tunnel_RollbackRelease_Handler,
		},
		{
			MethodName: "Reload",
			Handler:    _Tunnel_Reload_Handler,
		},
		{
			MethodName: "Healthz",
			Handler:    _Tunnel_Healthz_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tunnelserver.proto",
}

func init() { proto.RegisterFile("tunnelserver.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1226 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xdc, 0x57, 0xcd, 0x6e, 0xdb, 0xc6,
	0x13, 0x0f, 0xf5, 0xad, 0x91, 0xe3, 0x30, 0x9b, 0x28, 0x96, 0x95, 0xbf, 0x1d, 0x85, 0x7f, 0xa0,
	0x50, 0x0b, 0xd8, 0x6e, 0x95, 0x73, 0x81, 0x2a, 0xb2, 0x6c, 0x13, 0x95, 0x2d, 0x65, 0x25, 0x01,
	0x6d, 0x81, 0x96, 0xa0, 0xc8, 0xa5, 0x4c, 0x84, 0xe2, 0xd2, 0xe4, 0xaa, 0x69, 0x75, 0xe8, 0x13,
	0xb4, 0x40, 0x0f, 0x79, 0x82, 0x3e, 0x46, 0x1f, 0xa2, 0xa7, 0x3e, 0x43, 0xfb, 0x04, 0xbd, 0x17,
	0x5c, 0x2e, 0xf5, 0x41, 0xcb, 0x49, 0xdd, 0x56, 0x39, 0xf4, 0x24, 0xee, 0xcc, 0xec, 0xcc, 0xfc,
	0x66, 0x66, 0x47, 0x33, 0x80, 0xd8, 0xd4, 0x75, 0x89, 0x13, 0x10, 0xff, 0x6b, 0xe2, 0x1f, 0x7a,
	0x3e, 0x65, 0x14, 0x6d, 0x2d, 0xd3, 0xaa, 0x07, 0xa3, 0x97, 0x07, 0xa3, 0xc0, 0xf0, 0x8e, 0x6c,
	0x97, 0x11, 0xdf, 0xd5, 0x9d, 0x23, 0x2e, 0x65, 0x50, 0xe7, 0xc8, 0xa0, 0x93, 0x09, 0x75, 0xc5,
	0x4f, 0x74, 0x59, 0x79, 0x05, 0xf7, 0x7b, 0xd3, 0x91, 0x63, 0x07, 0x97, 0x98, 0x38, 0x44, 0x0f,
	0x08, 0x26, 0x57, 0x48, 0x86, 0x74, 0x40, 0xae, 0x2a, 0x52, 0x4d, 0xaa, 0x17, 0x71, 0xf8, 0x89,
	0xca, 0x90, 0x1b, 0xd9, 0x33, 0xcd, 0x36, 0x2b, 0x29, 0x4e, 0xcc, 0x8e, 0xec, 0x99, 0x6a, 0xa2,
	0x3d, 0x00, 0x3f, 0xba, 0x16, 0xb2, 0xd2, 0x9c, 0x55, 0x14, 0x14, 0xd5, 0x44, 0x55, 0x28, 0x50,
	0x8f, 0xf8, 0x3a, 0xa3, 0x7e, 0x25, 0xc3, 0x99, 0xf3, 0xb3, 0x42, 0x00, 0x25, 0x0d, 0x07, 0xde,
	0x1a, 0xcb, 0xff, 0x87, 0x8c, 0x41, 0x4d, 0xc2, 0xed, 0x6e, 0x37, 0xee, 0x1d, 0x0a, 0xef, 0xdb,
	0xbe, 0xdf, 0xa2, 0x26, 0xc1, 0x9c, 0x89, 0x2a, 0x90, 0x9f, 0x90, 0x20, 0xd0, 0xc7, 0x44, 0x38,
	0x11, 0x1f, 0x95, 0x6f, 0x00, 0x61, 0xea, 0x38, 0x23, 0xdd, 0x78, 0xf9, 0x8e, 0x01, 0x5a, 0xf0,
	0xe0, 0x9a, 0xe5, 0x4d, 0x20, 0xfc, 0x45, 0x82, 0x22, 0x26, 0x0e, 0xd5, 0xcd, 0x7f, 0x13, 0x59,
	0x1d, 0xe4, 0xc9, 0xd4, 0x61, 0xb6, 0xb6, 0x24, 0x14, 0x21, 0xdc, 0xe6, 0x74, 0xbc, 0x36, 0x06,
	0xd9, 0xd5, 0x18, 0xa0, 0x67, 0x50, 0xf2, 0xb9, 0x6b, 0x5a, 0xe0, 0x11, 0xa3, 0x92, 0xab, 0x49,
	0xf5, 0x52, 0x03, 0xc5, 0x08, 0x23, 0xaf, 0xfb, 0x1e, 0x31, 0x30, 0xf8, 0xf3, 0x6f, 0xe5, 0x4b,
	0x80, 0x18, 0xcf, 0x26, 0xe2, 0xb5, 0x0f, 0x70, 0x46, 0x74, 0x87, 0x5d, 0xce, 0xd6, 0xc6, 0x4b,
	0xf9, 0x41, 0x82, 0xd2, 0x5c, 0x60, 0x03, 0x0e, 0xa0, 0x03, 0xc8, 0x98, 0x3a, 0xd3, 0x79, 0x38,
	0x4b, 0x8d, 0xdd, 0xf8, 0xfa, 0x39, 0x35, 0xa7, 0x0e, 0x11, 0x96, 0x55, 0xd7, 0xa2, 0x98, 0x8b,
	0x29, 0x5f, 0x40, 0xe5, 0x74, 0xd0, 0x3a, 0x3f, 0x7e, 0x31, 0x25, 0xfe, 0xb7, 0x4d, 0xcf, 0x3b,
	0x27, 0x4c, 0x0f, 0x19, 0xb7, 0xca, 0x76, 0x19, 0x72, 0xba, 0xe7, 0x2d, 0x32, 0x9d, 0xd5, 0x3d,
	0x4f, 0x35, 0x15, 0x07, 0x76, 0x6f, 0xd0, 0xbd, 0x89, 0xc8, 0x7f, 0x07, 0x7b, 0x0b, 0x6b, 0x67,
	0x34, 0x60, 0x3d, 0x9f, 0x1a, 0x4d, 0xc6, 0xfc, 0x8e, 0x1d, 0xb0, 0xf5, 0x70, 0x76, 0xa1, 0x60,
	0x38, 0x74, 0x6a, 0x2e, 0x00, 0xe5, 0xf9, 0x59, 0x35, 0xd1, 0x36, 0xa4, 0x6c, 0x4f, 0x98, 0x48,
	0xd9, 0x1e, 0xaa, 0x41, 0xc6, 0x0b, 0x8d, 0x46, 0x61, 0xdd, 0x8a, 0x9d, 0xeb, 0xe9, 0x63, 0x82,
	0x39, 0x47, 0xf9, 0x49, 0x82, 0xfd, 0x37, 0x39, 0xb0, 0x89, 0x64, 0x1f, 0x01, 0x78, 0x3e, 0x35,
	0x34, 0x9d, 0x31, 0x3f, 0xa8, 0x64, 0x6a, 0xe9, 0x7a, 0xa9, 0x21, 0xcf, 0x7d, 0x13, 0xe6, 0x71,
	0xd1, 0x13, 0x5f, 0x81, 0xf2, 0x15, 0xdc, 0xe3, 0x3e, 0xf6, 0x9c, 0xe9, 0xd8, 0x76, 0xc3, 0x3a,
	0x40, 0x1f, 0x41, 0xd1, 0x76, 0x03, 0xa6, 0xbb, 0x06, 0x09, 0x2a, 0x12, 0x57, 0xf1, 0x20, 0x56,
	0xd1, 0xf4, 0x3c, 0x55, 0xf0, 0xf0, 0x42, 0x2a, 0x74, 0x88, 0xd9, 0x13, 0x42, 0xa7, 0x8c, 0x3b,
	0x9e, 0xc6, 0xf1, 0x51, 0xf9, 0x55, 0x82, 0xfb, 0xdc, 0x40, 0xdb, 0xb2, 0x88, 0xc1, 0x30, 0xf1,
	0xa8, 0xcf, 0xfe, 0x69, 0x21, 0xad, 0xe4, 0x29, 0xb3, 0x2e, 0x4f, 0xd9, 0x79, 0x9e, 0x50, 0x98,
	0x27, 0x76, 0xc9, 0x9b, 0x41, 0x11, 0xf3, 0x6f, 0xf4, 0x08, 0x72, 0x8e, 0x3e, 0x22, 0x4e, 0x50,
	0xc9, 0x73, 0xaa, 0x38, 0xa1, 0x3a, 0x64, 0x6d, 0xd7, 0xa2, 0x41, 0xa5, 0xc0, 0x51, 0x2f, 0x75,
	0x8e, 0xd0, 0x6b, 0xfe, 0x48, 0x22, 0x01, 0xe5, 0xfb, 0x14, 0x3c, 0x88, 0xe2, 0x36, 0x75, 0x9c,
	0xbf, 0xd3, 0xe9, 0xdf, 0x2d, 0xb0, 0x32, 0xe4, 0x0c, 0x6b, 0x1c, 0x2a, 0x2d, 0x44, 0xd6, 0x0c,
	0x6b, 0x1c, 0x75, 0x5d, 0x87, 0x1a, 0xba, 0xb3, 0xdc, 0x75, 0x8b, 0x51, 0xd7, 0xe5, 0xf4, 0x45,
	0xd7, 0x5d, 0x6d, 0xdf, 0x90, 0x68, 0xdf, 0xca, 0x1f, 0x12, 0x3c, 0xbc, 0x1e, 0x8e, 0x4d, 0x14,
	0xf8, 0x13, 0x28, 0xb9, 0x84, 0x98, 0x1a, 0xe1, 0xe5, 0xc4, 0x63, 0x54, 0xc0, 0x10, 0x92, 0xa2,
	0x02, 0x43, 0xef, 0x43, 0x5e, 0xf8, 0xc5, 0x63, 0x55, 0x5a, 0x98, 0x88, 0xfd, 0x8a, 0xf9, 0x21,
	0x28, 0x83, 0xba, 0x8c, 0xb8, 0x2c, 0x04, 0x15, 0xc5, 0xb1, 0x28, 0x28, 0xaa, 0x89, 0x9e, 0xc2,
	0x56, 0xcc, 0x0e, 0xec, 0x19, 0xe1, 0x21, 0xbd, 0x8b, 0x4b, 0x82, 0xd6, 0xb7, 0x67, 0x44, 0x99,
	0xc1, 0xa3, 0x39, 0xec, 0x16, 0x75, 0x2d, 0x7b, 0x7c, 0x73, 0x6f, 0xb9, 0x5d, 0x21, 0xbc, 0xbd,
	0xbd, 0xbc, 0x96, 0x60, 0x67, 0xad, 0xf1, 0x4d, 0x84, 0xbd, 0x0e, 0x79, 0x83, 0x9b, 0x88, 0x9b,
	0xca, 0x76, 0xac, 0x21, 0xb2, 0x8c, 0x63, 0xb6, 0xf2, 0x9b, 0x04, 0x5b, 0xc2, 0x2d, 0x3e, 0x6e,
	0x2d, 0xe1, 0x96, 0xd6, 0xe3, 0x4e, 0x2d, 0xe3, 0x5e, 0x54, 0x6a, 0x7a, 0xb9, 0x52, 0xc3, 0x77,
	0x61, 0x8d, 0x35, 0x57, 0x9f, 0x90, 0xf9, 0xbb, 0xb0, 0xc6, 0x17, 0xfa, 0x84, 0xa0, 0xc7, 0x50,
	0x0c, 0x59, 0x16, 0x7f, 0x0c, 0x62, 0x22, 0x30, 0xac, 0xf1, 0x09, 0x7f, 0x10, 0x55, 0x28, 0x04,
	0xc4, 0xb7, 0x75, 0xc7, 0xa5, 0x3c, 0xc1, 0x19, 0x3c, 0x3f, 0x27, 0x6a, 0x3a, 0x9f, 0x1c, 0x49,
	0xf6, 0x01, 0x02, 0xe6, 0xeb, 0x8c, 0x8c, 0x6d, 0x12, 0x88, 0x77, 0xb3, 0x44, 0x51, 0x7e, 0x97,
	0xe0, 0x2e, 0x07, 0x1a, 0x8f, 0x5d, 0xff, 0x59, 0xa4, 0x3f, 0x4a, 0x50, 0x8a, 0x90, 0xf2, 0x39,
	0xe9, 0x96, 0x38, 0x57, 0xb5, 0xa7, 0x93, 0xda, 0x93, 0x43, 0x5b, 0xe6, 0x2f, 0x0d, 0x6d, 0x57,
	0xb0, 0x73, 0x4a, 0x5c, 0xe2, 0xeb, 0xce, 0x80, 0x6f, 0x23, 0xc7, 0xf4, 0x95, 0xdb, 0x67, 0x3e,
	0xd1, 0x27, 0x6b, 0x6a, 0xff, 0x43, 0x48, 0x1b, 0x13, 0x53, 0x94, 0xfe, 0xfe, 0xe1, 0xca, 0x4e,
	0xb3, 0xa2, 0xa5, 0x35, 0x31, 0x71, 0x28, 0x1a, 0xf6, 0x56, 0x3e, 0x33, 0x85, 0xde, 0x6e, 0x89,
	0xc1, 0x88, 0x42, 0x79, 0x45, 0x78, 0xe8, 0x6d, 0xd6, 0xe0, 0x07, 0xaf, 0x53, 0x20, 0x27, 0xa5,
	0x51, 0x0d, 0xfe, 0xc7, 0x53, 0xa1, 0xb5, 0x1a, 0x7d, 0xed, 0xc5, 0xb0, 0x8d, 0x3f, 0xd7, 0x9a,
	0xbd, 0x9e, 0x76, 0xde, 0x1e, 0x34, 0x8f, 0x9b, 0x83, 0xa6, 0x7c, 0x07, 0xed, 0x42, 0x79, 0x21,
	0xd1, 0xeb, 0x0c, 0x4f, 0xd5, 0x0b, 0x4d, 0xbd, 0x38, 0xe9, 0xca, 0x12, 0x7a, 0x2c, 0x3a, 0x06,
	0x67, 0xb5, 0x4f, 0x4e, 0xda, 0xad, 0x81, 0x86, 0xdb, 0xbd, 0x2e, 0x1e, 0xc8, 0x29, 0x54, 0x15,
	0xbd, 0x2c, 0xba, 0x37, 0xec, 0x74, 0x34, 0xdc, 0xee, 0xb4, 0x9b, 0xfd, 0xb6, 0x9c, 0x46, 0x7b,
	0x62, 0x70, 0x5b, 0xf0, 0x5a, 0xdd, 0x8b, 0x13, 0xf5, 0xb4, 0xa3, 0xf6, 0x07, 0x72, 0x06, 0x95,
	0xc5, 0x7f, 0xbc, 0xd6, 0x6f, 0xb4, 0xb4, 0xde, 0xf0, 0x79, 0x47, 0xed, 0x9f, 0xc9, 0x59, 0xf4,
	0x08, 0xd0, 0x82, 0x8c, 0xbb, 0x9d, 0xce, 0xf3, 0x66, 0xeb, 0x53, 0x39, 0x87, 0x1e, 0x82, 0xbc,
	0x44, 0x6f, 0x77, 0xba, 0xcd, 0x63, 0x39, 0x8f, 0xde, 0x03, 0x25, 0x89, 0xec, 0xac, 0xdb, 0x1f,
	0x68, 0x3d, 0xdc, 0x6d, 0x35, 0x07, 0x03, 0xac, 0x71, 0x63, 0x85, 0xc6, 0xcf, 0x29, 0xc8, 0x45,
	0xf1, 0x40, 0x43, 0xd8, 0x5e, 0x5d, 0xea, 0xd0, 0x93, 0xd5, 0x60, 0x5f, 0xdb, 0x35, 0xab, 0xb5,
	0x37, 0x0b, 0x04, 0x9e, 0x72, 0x07, 0x7d, 0x06, 0xf7, 0x12, 0xab, 0x14, 0x4a, 0x5c, 0xbb, 0xbe,
	0xe3, 0x55, 0x9f, 0xbe, 0x45, 0x82, 0x6b, 0xfe, 0x18, 0x72, 0xe2, 0x0d, 0xed, 0x24, 0xc4, 0xe3,
	0x8d, 0xaa, 0x5a, 0x59, 0xcf, 0xe0, 0xd7, 0x3f, 0x81, 0xbc, 0x18, 0xd8, 0x51, 0x42, 0x6c, 0xb1,
	0x62, 0x54, 0x77, 0x6f, 0xe0, 0x84, 0x1a, 0x46, 0x39, 0xbe, 0x86, 0x3f, 0xfb, 0x33, 0x00, 0x00,
	0xff, 0xff, 0xe8, 0xf6, 0xef, 0x57, 0xd9, 0x0f, 0x00, 0x00,
}
