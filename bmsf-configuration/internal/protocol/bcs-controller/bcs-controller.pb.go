// Code generated by protoc-gen-go.
// source: bcs-controller.proto
// DO NOT EDIT!

/*
Package bcscontroller is a generated protocol buffer package.

It is generated from these files:
	bcs-controller.proto

It has these top-level messages:
	PublishReleasePreReq
	PublishReleasePreResp
	PublishReleaseReq
	PublishReleaseResp
	RollbackReleaseReq
	RollbackReleaseResp
	ReportReq
	ReportResp
	PullReleaseReq
	PullReleaseResp
	ReloadReq
	ReloadResp
	HealthzReq
	HealthzResp
*/
package bcscontroller

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "bk-bscp/internal/protocol/common"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PublishReleasePreReq struct {
	Seq       string `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	BizId     string `protobuf:"bytes,2,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	ReleaseId string `protobuf:"bytes,3,opt,name=release_id,json=releaseId" json:"release_id,omitempty"`
	Operator  string `protobuf:"bytes,4,opt,name=operator" json:"operator,omitempty"`
}

func (m *PublishReleasePreReq) Reset()                    { *m = PublishReleasePreReq{} }
func (m *PublishReleasePreReq) String() string            { return proto.CompactTextString(m) }
func (*PublishReleasePreReq) ProtoMessage()               {}
func (*PublishReleasePreReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *PublishReleasePreReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *PublishReleasePreReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *PublishReleasePreReq) GetReleaseId() string {
	if m != nil {
		return m.ReleaseId
	}
	return ""
}

func (m *PublishReleasePreReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

type PublishReleasePreResp struct {
	Seq     string         `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string         `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *PublishReleasePreResp) Reset()                    { *m = PublishReleasePreResp{} }
func (m *PublishReleasePreResp) String() string            { return proto.CompactTextString(m) }
func (*PublishReleasePreResp) ProtoMessage()               {}
func (*PublishReleasePreResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *PublishReleasePreResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *PublishReleasePreResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *PublishReleasePreResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type PublishReleaseReq struct {
	Seq       string `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	BizId     string `protobuf:"bytes,2,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	ReleaseId string `protobuf:"bytes,3,opt,name=release_id,json=releaseId" json:"release_id,omitempty"`
	Operator  string `protobuf:"bytes,4,opt,name=operator" json:"operator,omitempty"`
}

func (m *PublishReleaseReq) Reset()                    { *m = PublishReleaseReq{} }
func (m *PublishReleaseReq) String() string            { return proto.CompactTextString(m) }
func (*PublishReleaseReq) ProtoMessage()               {}
func (*PublishReleaseReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *PublishReleaseReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *PublishReleaseReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *PublishReleaseReq) GetReleaseId() string {
	if m != nil {
		return m.ReleaseId
	}
	return ""
}

func (m *PublishReleaseReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

type PublishReleaseResp struct {
	Seq     string         `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string         `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *PublishReleaseResp) Reset()                    { *m = PublishReleaseResp{} }
func (m *PublishReleaseResp) String() string            { return proto.CompactTextString(m) }
func (*PublishReleaseResp) ProtoMessage()               {}
func (*PublishReleaseResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *PublishReleaseResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *PublishReleaseResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *PublishReleaseResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type RollbackReleaseReq struct {
	Seq       string `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	BizId     string `protobuf:"bytes,2,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	ReleaseId string `protobuf:"bytes,3,opt,name=release_id,json=releaseId" json:"release_id,omitempty"`
	Operator  string `protobuf:"bytes,4,opt,name=operator" json:"operator,omitempty"`
}

func (m *RollbackReleaseReq) Reset()                    { *m = RollbackReleaseReq{} }
func (m *RollbackReleaseReq) String() string            { return proto.CompactTextString(m) }
func (*RollbackReleaseReq) ProtoMessage()               {}
func (*RollbackReleaseReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *RollbackReleaseReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *RollbackReleaseReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *RollbackReleaseReq) GetReleaseId() string {
	if m != nil {
		return m.ReleaseId
	}
	return ""
}

func (m *RollbackReleaseReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

type RollbackReleaseResp struct {
	Seq     string         `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string         `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *RollbackReleaseResp) Reset()                    { *m = RollbackReleaseResp{} }
func (m *RollbackReleaseResp) String() string            { return proto.CompactTextString(m) }
func (*RollbackReleaseResp) ProtoMessage()               {}
func (*RollbackReleaseResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *RollbackReleaseResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *RollbackReleaseResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *RollbackReleaseResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type ReportReq struct {
	Seq     string               `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	BizId   string               `protobuf:"bytes,2,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId   string               `protobuf:"bytes,3,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	CloudId string               `protobuf:"bytes,4,opt,name=cloud_id,json=cloudId" json:"cloud_id,omitempty"`
	Ip      string               `protobuf:"bytes,5,opt,name=ip" json:"ip,omitempty"`
	Path    string               `protobuf:"bytes,6,opt,name=path" json:"path,omitempty"`
	Labels  string               `protobuf:"bytes,7,opt,name=labels" json:"labels,omitempty"`
	Infos   []*common.ReportInfo `protobuf:"bytes,8,rep,name=infos" json:"infos,omitempty"`
}

func (m *ReportReq) Reset()                    { *m = ReportReq{} }
func (m *ReportReq) String() string            { return proto.CompactTextString(m) }
func (*ReportReq) ProtoMessage()               {}
func (*ReportReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ReportReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *ReportReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *ReportReq) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *ReportReq) GetCloudId() string {
	if m != nil {
		return m.CloudId
	}
	return ""
}

func (m *ReportReq) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *ReportReq) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *ReportReq) GetLabels() string {
	if m != nil {
		return m.Labels
	}
	return ""
}

func (m *ReportReq) GetInfos() []*common.ReportInfo {
	if m != nil {
		return m.Infos
	}
	return nil
}

type ReportResp struct {
	Seq     string         `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string         `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *ReportResp) Reset()                    { *m = ReportResp{} }
func (m *ReportResp) String() string            { return proto.CompactTextString(m) }
func (*ReportResp) ProtoMessage()               {}
func (*ReportResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ReportResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *ReportResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *ReportResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type PullReleaseReq struct {
	Seq            string `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	BizId          string `protobuf:"bytes,2,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId          string `protobuf:"bytes,3,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	CloudId        string `protobuf:"bytes,4,opt,name=cloud_id,json=cloudId" json:"cloud_id,omitempty"`
	Ip             string `protobuf:"bytes,5,opt,name=ip" json:"ip,omitempty"`
	Path           string `protobuf:"bytes,6,opt,name=path" json:"path,omitempty"`
	Labels         string `protobuf:"bytes,7,opt,name=labels" json:"labels,omitempty"`
	CfgId          string `protobuf:"bytes,8,opt,name=cfg_id,json=cfgId" json:"cfg_id,omitempty"`
	LocalReleaseId string `protobuf:"bytes,9,opt,name=local_release_id,json=localReleaseId" json:"local_release_id,omitempty"`
	ReleaseId      string `protobuf:"bytes,10,opt,name=release_id,json=releaseId" json:"release_id,omitempty"`
}

func (m *PullReleaseReq) Reset()                    { *m = PullReleaseReq{} }
func (m *PullReleaseReq) String() string            { return proto.CompactTextString(m) }
func (*PullReleaseReq) ProtoMessage()               {}
func (*PullReleaseReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *PullReleaseReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *PullReleaseReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *PullReleaseReq) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *PullReleaseReq) GetCloudId() string {
	if m != nil {
		return m.CloudId
	}
	return ""
}

func (m *PullReleaseReq) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *PullReleaseReq) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *PullReleaseReq) GetLabels() string {
	if m != nil {
		return m.Labels
	}
	return ""
}

func (m *PullReleaseReq) GetCfgId() string {
	if m != nil {
		return m.CfgId
	}
	return ""
}

func (m *PullReleaseReq) GetLocalReleaseId() string {
	if m != nil {
		return m.LocalReleaseId
	}
	return ""
}

func (m *PullReleaseReq) GetReleaseId() string {
	if m != nil {
		return m.ReleaseId
	}
	return ""
}

type PullReleaseResp struct {
	Seq     string          `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode  `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string          `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Release *common.Release `protobuf:"bytes,4,opt,name=release" json:"release,omitempty"`
}

func (m *PullReleaseResp) Reset()                    { *m = PullReleaseResp{} }
func (m *PullReleaseResp) String() string            { return proto.CompactTextString(m) }
func (*PullReleaseResp) ProtoMessage()               {}
func (*PullReleaseResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *PullReleaseResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *PullReleaseResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *PullReleaseResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *PullReleaseResp) GetRelease() *common.Release {
	if m != nil {
		return m.Release
	}
	return nil
}

type ReloadReq struct {
	Seq            string             `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	BizId          string             `protobuf:"bytes,2,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	ReleaseId      string             `protobuf:"bytes,3,opt,name=release_id,json=releaseId" json:"release_id,omitempty"`
	MultiReleaseId string             `protobuf:"bytes,4,opt,name=multi_release_id,json=multiReleaseId" json:"multi_release_id,omitempty"`
	Operator       string             `protobuf:"bytes,5,opt,name=operator" json:"operator,omitempty"`
	ReloadSpec     *common.ReloadSpec `protobuf:"bytes,6,opt,name=reload_spec,json=reloadSpec" json:"reload_spec,omitempty"`
}

func (m *ReloadReq) Reset()                    { *m = ReloadReq{} }
func (m *ReloadReq) String() string            { return proto.CompactTextString(m) }
func (*ReloadReq) ProtoMessage()               {}
func (*ReloadReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *ReloadReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *ReloadReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *ReloadReq) GetReleaseId() string {
	if m != nil {
		return m.ReleaseId
	}
	return ""
}

func (m *ReloadReq) GetMultiReleaseId() string {
	if m != nil {
		return m.MultiReleaseId
	}
	return ""
}

func (m *ReloadReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *ReloadReq) GetReloadSpec() *common.ReloadSpec {
	if m != nil {
		return m.ReloadSpec
	}
	return nil
}

type ReloadResp struct {
	Seq     string         `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string         `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *ReloadResp) Reset()                    { *m = ReloadResp{} }
func (m *ReloadResp) String() string            { return proto.CompactTextString(m) }
func (*ReloadResp) ProtoMessage()               {}
func (*ReloadResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *ReloadResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *ReloadResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *ReloadResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type HealthzReq struct {
	Seq string `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
}

func (m *HealthzReq) Reset()                    { *m = HealthzReq{} }
func (m *HealthzReq) String() string            { return proto.CompactTextString(m) }
func (*HealthzReq) ProtoMessage()               {}
func (*HealthzReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *HealthzReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

type HealthzResp struct {
	Seq     string                    `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode            `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string                    `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    *common.ModuleHealthzInfo `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *HealthzResp) Reset()                    { *m = HealthzResp{} }
func (m *HealthzResp) String() string            { return proto.CompactTextString(m) }
func (*HealthzResp) ProtoMessage()               {}
func (*HealthzResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *HealthzResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *HealthzResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *HealthzResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *HealthzResp) GetData() *common.ModuleHealthzInfo {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*PublishReleasePreReq)(nil), "bcscontroller.PublishReleasePreReq")
	proto.RegisterType((*PublishReleasePreResp)(nil), "bcscontroller.PublishReleasePreResp")
	proto.RegisterType((*PublishReleaseReq)(nil), "bcscontroller.PublishReleaseReq")
	proto.RegisterType((*PublishReleaseResp)(nil), "bcscontroller.PublishReleaseResp")
	proto.RegisterType((*RollbackReleaseReq)(nil), "bcscontroller.RollbackReleaseReq")
	proto.RegisterType((*RollbackReleaseResp)(nil), "bcscontroller.RollbackReleaseResp")
	proto.RegisterType((*ReportReq)(nil), "bcscontroller.ReportReq")
	proto.RegisterType((*ReportResp)(nil), "bcscontroller.ReportResp")
	proto.RegisterType((*PullReleaseReq)(nil), "bcscontroller.PullReleaseReq")
	proto.RegisterType((*PullReleaseResp)(nil), "bcscontroller.PullReleaseResp")
	proto.RegisterType((*ReloadReq)(nil), "bcscontroller.ReloadReq")
	proto.RegisterType((*ReloadResp)(nil), "bcscontroller.ReloadResp")
	proto.RegisterType((*HealthzReq)(nil), "bcscontroller.HealthzReq")
	proto.RegisterType((*HealthzResp)(nil), "bcscontroller.HealthzResp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for BCSController service

type BCSControllerClient interface {
	PublishReleasePre(ctx context.Context, in *PublishReleasePreReq, opts ...grpc.CallOption) (*PublishReleasePreResp, error)
	PublishRelease(ctx context.Context, in *PublishReleaseReq, opts ...grpc.CallOption) (*PublishReleaseResp, error)
	RollbackRelease(ctx context.Context, in *RollbackReleaseReq, opts ...grpc.CallOption) (*RollbackReleaseResp, error)
	PullRelease(ctx context.Context, in *PullReleaseReq, opts ...grpc.CallOption) (*PullReleaseResp, error)
	Reload(ctx context.Context, in *ReloadReq, opts ...grpc.CallOption) (*ReloadResp, error)
	Healthz(ctx context.Context, in *HealthzReq, opts ...grpc.CallOption) (*HealthzResp, error)
}

type bCSControllerClient struct {
	cc *grpc.ClientConn
}

func NewBCSControllerClient(cc *grpc.ClientConn) BCSControllerClient {
	return &bCSControllerClient{cc}
}

func (c *bCSControllerClient) PublishReleasePre(ctx context.Context, in *PublishReleasePreReq, opts ...grpc.CallOption) (*PublishReleasePreResp, error) {
	out := new(PublishReleasePreResp)
	err := grpc.Invoke(ctx, "/bcscontroller.BCSController/PublishReleasePre", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bCSControllerClient) PublishRelease(ctx context.Context, in *PublishReleaseReq, opts ...grpc.CallOption) (*PublishReleaseResp, error) {
	out := new(PublishReleaseResp)
	err := grpc.Invoke(ctx, "/bcscontroller.BCSController/PublishRelease", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bCSControllerClient) RollbackRelease(ctx context.Context, in *RollbackReleaseReq, opts ...grpc.CallOption) (*RollbackReleaseResp, error) {
	out := new(RollbackReleaseResp)
	err := grpc.Invoke(ctx, "/bcscontroller.BCSController/RollbackRelease", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bCSControllerClient) PullRelease(ctx context.Context, in *PullReleaseReq, opts ...grpc.CallOption) (*PullReleaseResp, error) {
	out := new(PullReleaseResp)
	err := grpc.Invoke(ctx, "/bcscontroller.BCSController/PullRelease", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bCSControllerClient) Reload(ctx context.Context, in *ReloadReq, opts ...grpc.CallOption) (*ReloadResp, error) {
	out := new(ReloadResp)
	err := grpc.Invoke(ctx, "/bcscontroller.BCSController/Reload", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bCSControllerClient) Healthz(ctx context.Context, in *HealthzReq, opts ...grpc.CallOption) (*HealthzResp, error) {
	out := new(HealthzResp)
	err := grpc.Invoke(ctx, "/bcscontroller.BCSController/Healthz", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BCSController service

type BCSControllerServer interface {
	PublishReleasePre(context.Context, *PublishReleasePreReq) (*PublishReleasePreResp, error)
	PublishRelease(context.Context, *PublishReleaseReq) (*PublishReleaseResp, error)
	RollbackRelease(context.Context, *RollbackReleaseReq) (*RollbackReleaseResp, error)
	PullRelease(context.Context, *PullReleaseReq) (*PullReleaseResp, error)
	Reload(context.Context, *ReloadReq) (*ReloadResp, error)
	Healthz(context.Context, *HealthzReq) (*HealthzResp, error)
}

func RegisterBCSControllerServer(s *grpc.Server, srv BCSControllerServer) {
	s.RegisterService(&_BCSController_serviceDesc, srv)
}

func _BCSController_PublishReleasePre_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishReleasePreReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BCSControllerServer).PublishReleasePre(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bcscontroller.BCSController/PublishReleasePre",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BCSControllerServer).PublishReleasePre(ctx, req.(*PublishReleasePreReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BCSController_PublishRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishReleaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BCSControllerServer).PublishRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bcscontroller.BCSController/PublishRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BCSControllerServer).PublishRelease(ctx, req.(*PublishReleaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BCSController_RollbackRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RollbackReleaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BCSControllerServer).RollbackRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bcscontroller.BCSController/RollbackRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BCSControllerServer).RollbackRelease(ctx, req.(*RollbackReleaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BCSController_PullRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PullReleaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BCSControllerServer).PullRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bcscontroller.BCSController/PullRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BCSControllerServer).PullRelease(ctx, req.(*PullReleaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BCSController_Reload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReloadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BCSControllerServer).Reload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bcscontroller.BCSController/Reload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BCSControllerServer).Reload(ctx, req.(*ReloadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BCSController_Healthz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthzReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BCSControllerServer).Healthz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bcscontroller.BCSController/Healthz",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BCSControllerServer).Healthz(ctx, req.(*HealthzReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _BCSController_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bcscontroller.BCSController",
	HandlerType: (*BCSControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PublishReleasePre",
			Handler:    _BCSController_PublishReleasePre_Handler,
		},
		{
			MethodName: "PublishRelease",
			Handler:    _BCSController_PublishRelease_Handler,
		},
		{
			MethodName: "RollbackRelease",
			Handler:    _BCSController_RollbackRelease_Handler,
		},
		{
			MethodName: "PullRelease",
			Handler:    _BCSController_PullRelease_Handler,
		},
		{
			MethodName: "Reload",
			Handler:    _BCSController_Reload_Handler,
		},
		{
			MethodName: "Healthz",
			Handler:    _BCSController_Healthz_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bcs-controller.proto",
}

func init() { proto.RegisterFile("bcs-controller.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 670 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xbc, 0x56, 0xcf, 0x6a, 0xdb, 0x4e,
	0x10, 0xfe, 0xf9, 0x9f, 0x6c, 0x8f, 0x89, 0x93, 0xdf, 0x34, 0x2e, 0x8a, 0x20, 0x21, 0x55, 0x7a,
	0x70, 0x0f, 0x76, 0x20, 0x79, 0x80, 0x42, 0x42, 0xa1, 0x3e, 0xb4, 0x18, 0xe5, 0x50, 0x28, 0x94,
	0x74, 0xb5, 0x5a, 0xc7, 0x22, 0x6b, 0xef, 0x66, 0x57, 0xa6, 0xc5, 0x2f, 0xd0, 0x53, 0xdf, 0xac,
	0xf4, 0x85, 0x7a, 0x29, 0x5a, 0x49, 0xfe, 0xa3, 0x38, 0x09, 0x2d, 0x95, 0x4f, 0xde, 0x9d, 0x99,
	0x9d, 0x6f, 0xbf, 0x99, 0x6f, 0xb4, 0x86, 0x7d, 0x9f, 0xea, 0x1e, 0x15, 0xd3, 0x48, 0x09, 0xce,
	0x99, 0xea, 0x4b, 0x25, 0x22, 0x81, 0x3b, 0x3e, 0xd5, 0x4b, 0xa3, 0xd3, 0xf3, 0x6f, 0x7b, 0xbe,
	0xa6, 0xf2, 0x34, 0x9c, 0x46, 0x4c, 0x4d, 0x09, 0x3f, 0x35, 0x61, 0x54, 0xf0, 0x53, 0x2a, 0x26,
	0x13, 0x31, 0x4d, 0x7f, 0x92, 0xd3, 0xee, 0x1c, 0xf6, 0x87, 0x33, 0x9f, 0x87, 0x7a, 0xec, 0x31,
	0xce, 0x88, 0x66, 0x43, 0xc5, 0x3c, 0x76, 0x87, 0x7b, 0x50, 0xd1, 0xec, 0xce, 0x2e, 0x1d, 0x97,
	0xba, 0x4d, 0x2f, 0x5e, 0x62, 0x07, 0x2c, 0x3f, 0x9c, 0x5f, 0x87, 0x81, 0x5d, 0x36, 0xc6, 0x9a,
	0x1f, 0xce, 0x07, 0x01, 0x1e, 0x02, 0xa8, 0xe4, 0x64, 0xec, 0xaa, 0x18, 0x57, 0x33, 0xb5, 0x0c,
	0x02, 0x74, 0xa0, 0x21, 0x24, 0x53, 0x24, 0x12, 0xca, 0xae, 0x1a, 0xe7, 0x62, 0xef, 0x8e, 0xa1,
	0xb3, 0x01, 0x5b, 0xcb, 0x0d, 0xe0, 0x27, 0x50, 0xa5, 0x22, 0x60, 0x06, 0xba, 0x7d, 0xb6, 0xdb,
	0x4f, 0x39, 0xbc, 0x51, 0xea, 0x52, 0x04, 0xcc, 0x33, 0x4e, 0xb4, 0xa1, 0x3e, 0x61, 0x5a, 0x93,
	0x1b, 0x96, 0xde, 0x23, 0xdb, 0xba, 0x5f, 0xe0, 0xff, 0x75, 0xa4, 0x6d, 0x51, 0x64, 0x80, 0x79,
	0xe0, 0x22, 0xf8, 0x7d, 0x05, 0xf4, 0x04, 0xe7, 0x3e, 0xa1, 0xb7, 0x5b, 0x26, 0x38, 0x82, 0x67,
	0xf7, 0x90, 0x8b, 0x60, 0xf8, 0xa3, 0x04, 0x4d, 0x8f, 0x49, 0xa1, 0xa2, 0x3f, 0x62, 0xd6, 0x01,
	0x8b, 0x48, 0xb9, 0x64, 0x55, 0x23, 0x52, 0x0e, 0x02, 0x3c, 0x80, 0x06, 0xe5, 0x62, 0x16, 0xc4,
	0x8e, 0x84, 0x51, 0xdd, 0xec, 0x07, 0x01, 0xb6, 0xa1, 0x1c, 0x4a, 0xbb, 0x66, 0x8c, 0xe5, 0x50,
	0x22, 0x42, 0x55, 0x92, 0x68, 0x6c, 0x5b, 0xc6, 0x62, 0xd6, 0xf8, 0x1c, 0x2c, 0x4e, 0x7c, 0xc6,
	0xb5, 0x5d, 0x37, 0xd6, 0x74, 0x87, 0x5d, 0xa8, 0x85, 0xd3, 0x91, 0xd0, 0x76, 0xe3, 0xb8, 0xd2,
	0x6d, 0x9d, 0x61, 0x46, 0x32, 0xb9, 0xf8, 0x60, 0x3a, 0x12, 0x5e, 0x12, 0xe0, 0x7e, 0x02, 0xc8,
	0xd8, 0x14, 0x51, 0xad, 0x6f, 0x65, 0x68, 0x0f, 0x67, 0x9c, 0xff, 0x8d, 0x18, 0xb6, 0x5b, 0xb2,
	0x0e, 0x58, 0x74, 0x74, 0x13, 0x27, 0x6d, 0x24, 0x68, 0x74, 0x74, 0x33, 0x08, 0xb0, 0x0b, 0x7b,
	0x5c, 0x50, 0xc2, 0xaf, 0x57, 0x74, 0xd9, 0x34, 0x01, 0x6d, 0x63, 0xf7, 0x16, 0xe2, 0x5c, 0xd7,
	0x2e, 0xe4, 0xb4, 0xeb, 0x7e, 0x2f, 0xc1, 0xee, 0x5a, 0x25, 0x0a, 0x28, 0x37, 0xbe, 0x82, 0x7a,
	0x8a, 0x68, 0x4a, 0xd3, 0x5a, 0x66, 0xc8, 0x60, 0x33, 0xbf, 0xfb, 0xd3, 0xe8, 0x98, 0x0b, 0x12,
	0xfc, 0xcb, 0x09, 0xed, 0xc2, 0xde, 0x64, 0xc6, 0xa3, 0x70, 0xb5, 0x5c, 0x49, 0x93, 0xda, 0xc6,
	0xee, 0x6d, 0x9c, 0xe5, 0xda, 0xfa, 0x2c, 0xe3, 0x39, 0xb4, 0x94, 0xb9, 0xda, 0xb5, 0x96, 0x8c,
	0x9a, 0xf6, 0xad, 0x89, 0x38, 0x76, 0x5d, 0x49, 0x46, 0x3d, 0x50, 0x8b, 0x75, 0xa2, 0xe4, 0x84,
	0x4f, 0x11, 0x4a, 0x3e, 0x02, 0x78, 0xcb, 0x08, 0x8f, 0xc6, 0xf3, 0x8d, 0xf5, 0x8a, 0xfb, 0xdb,
	0x5a, 0x04, 0x14, 0xd1, 0xdb, 0x1e, 0x54, 0x03, 0x12, 0x91, 0xb4, 0xb1, 0x07, 0xd9, 0xf1, 0x77,
	0x22, 0x98, 0x71, 0x96, 0x22, 0x9b, 0xc9, 0x36, 0x61, 0x67, 0xbf, 0x2a, 0xb0, 0x73, 0x71, 0x79,
	0x75, 0xb9, 0x78, 0x90, 0xf1, 0x73, 0xfe, 0xed, 0x19, 0x2a, 0x86, 0x27, 0xfd, 0xb5, 0x57, 0xbb,
	0xbf, 0xe9, 0x0d, 0x76, 0x5e, 0x3e, 0x1d, 0xa4, 0xa5, 0xfb, 0x1f, 0x7e, 0x88, 0x87, 0x7d, 0xd5,
	0x85, 0xc7, 0x8f, 0x9e, 0x8c, 0x73, 0xbf, 0x78, 0x22, 0xc2, 0x24, 0xfe, 0x08, 0xbb, 0xb9, 0x8f,
	0x3b, 0xe6, 0xcf, 0xdd, 0x7f, 0x76, 0x1c, 0xf7, 0xa9, 0x10, 0x93, 0xfb, 0x3d, 0xb4, 0x56, 0xe6,
	0x12, 0x0f, 0xef, 0xdd, 0x67, 0xf5, 0xeb, 0xe5, 0x1c, 0x3d, 0xe6, 0x36, 0xf9, 0x5e, 0x83, 0x95,
	0xe8, 0x10, 0xed, 0x3c, 0x7e, 0x36, 0x6e, 0xce, 0xc1, 0x03, 0x1e, 0x93, 0xe0, 0x02, 0xea, 0x69,
	0x3b, 0x31, 0x1f, 0xb7, 0x54, 0xa0, 0xe3, 0x3c, 0xe4, 0x8a, 0x73, 0xf8, 0x96, 0xf9, 0x53, 0x75,
	0xfe, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x39, 0x86, 0xc3, 0x06, 0xaa, 0x09, 0x00, 0x00,
}
