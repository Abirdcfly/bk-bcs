// Code generated by protoc-gen-go.
// source: gse-controller.proto
// DO NOT EDIT!

/*
Package gsecontroller is a generated protocol buffer package.

It is generated from these files:
	gse-controller.proto

It has these top-level messages:
	PublishReleasePreReq
	PublishReleasePreResp
	PublishReleaseReq
	PublishReleaseResp
	RollbackReleaseReq
	RollbackReleaseResp
	PullReleaseReq
	PullReleaseResp
	ReloadReq
	ReloadResp
	HealthzReq
	HealthzResp
*/
package gsecontroller

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "bk-bscp/internal/protocol/common"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PublishReleasePreReq struct {
	Seq       string `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	BizId     string `protobuf:"bytes,2,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	ReleaseId string `protobuf:"bytes,3,opt,name=release_id,json=releaseId" json:"release_id,omitempty"`
	Operator  string `protobuf:"bytes,4,opt,name=operator" json:"operator,omitempty"`
}

func (m *PublishReleasePreReq) Reset()                    { *m = PublishReleasePreReq{} }
func (m *PublishReleasePreReq) String() string            { return proto.CompactTextString(m) }
func (*PublishReleasePreReq) ProtoMessage()               {}
func (*PublishReleasePreReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *PublishReleasePreReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *PublishReleasePreReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *PublishReleasePreReq) GetReleaseId() string {
	if m != nil {
		return m.ReleaseId
	}
	return ""
}

func (m *PublishReleasePreReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

type PublishReleasePreResp struct {
	Seq     string         `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string         `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *PublishReleasePreResp) Reset()                    { *m = PublishReleasePreResp{} }
func (m *PublishReleasePreResp) String() string            { return proto.CompactTextString(m) }
func (*PublishReleasePreResp) ProtoMessage()               {}
func (*PublishReleasePreResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *PublishReleasePreResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *PublishReleasePreResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *PublishReleasePreResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type PublishReleaseReq struct {
	Seq       string `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	BizId     string `protobuf:"bytes,2,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	ReleaseId string `protobuf:"bytes,3,opt,name=release_id,json=releaseId" json:"release_id,omitempty"`
	Operator  string `protobuf:"bytes,4,opt,name=operator" json:"operator,omitempty"`
}

func (m *PublishReleaseReq) Reset()                    { *m = PublishReleaseReq{} }
func (m *PublishReleaseReq) String() string            { return proto.CompactTextString(m) }
func (*PublishReleaseReq) ProtoMessage()               {}
func (*PublishReleaseReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *PublishReleaseReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *PublishReleaseReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *PublishReleaseReq) GetReleaseId() string {
	if m != nil {
		return m.ReleaseId
	}
	return ""
}

func (m *PublishReleaseReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

type PublishReleaseResp struct {
	Seq     string         `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string         `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *PublishReleaseResp) Reset()                    { *m = PublishReleaseResp{} }
func (m *PublishReleaseResp) String() string            { return proto.CompactTextString(m) }
func (*PublishReleaseResp) ProtoMessage()               {}
func (*PublishReleaseResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *PublishReleaseResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *PublishReleaseResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *PublishReleaseResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type RollbackReleaseReq struct {
	Seq       string `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	BizId     string `protobuf:"bytes,2,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	ReleaseId string `protobuf:"bytes,3,opt,name=release_id,json=releaseId" json:"release_id,omitempty"`
	Operator  string `protobuf:"bytes,4,opt,name=operator" json:"operator,omitempty"`
}

func (m *RollbackReleaseReq) Reset()                    { *m = RollbackReleaseReq{} }
func (m *RollbackReleaseReq) String() string            { return proto.CompactTextString(m) }
func (*RollbackReleaseReq) ProtoMessage()               {}
func (*RollbackReleaseReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *RollbackReleaseReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *RollbackReleaseReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *RollbackReleaseReq) GetReleaseId() string {
	if m != nil {
		return m.ReleaseId
	}
	return ""
}

func (m *RollbackReleaseReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

type RollbackReleaseResp struct {
	Seq     string         `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string         `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *RollbackReleaseResp) Reset()                    { *m = RollbackReleaseResp{} }
func (m *RollbackReleaseResp) String() string            { return proto.CompactTextString(m) }
func (*RollbackReleaseResp) ProtoMessage()               {}
func (*RollbackReleaseResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *RollbackReleaseResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *RollbackReleaseResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *RollbackReleaseResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type PullReleaseReq struct {
	Seq            string `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	BizId          string `protobuf:"bytes,2,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId          string `protobuf:"bytes,3,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	CloudId        string `protobuf:"bytes,4,opt,name=cloud_id,json=cloudId" json:"cloud_id,omitempty"`
	Ip             string `protobuf:"bytes,5,opt,name=ip" json:"ip,omitempty"`
	Path           string `protobuf:"bytes,6,opt,name=path" json:"path,omitempty"`
	Labels         string `protobuf:"bytes,7,opt,name=labels" json:"labels,omitempty"`
	CfgId          string `protobuf:"bytes,8,opt,name=cfg_id,json=cfgId" json:"cfg_id,omitempty"`
	LocalReleaseId string `protobuf:"bytes,9,opt,name=local_release_id,json=localReleaseId" json:"local_release_id,omitempty"`
	ReleaseId      string `protobuf:"bytes,10,opt,name=release_id,json=releaseId" json:"release_id,omitempty"`
}

func (m *PullReleaseReq) Reset()                    { *m = PullReleaseReq{} }
func (m *PullReleaseReq) String() string            { return proto.CompactTextString(m) }
func (*PullReleaseReq) ProtoMessage()               {}
func (*PullReleaseReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *PullReleaseReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *PullReleaseReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *PullReleaseReq) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *PullReleaseReq) GetCloudId() string {
	if m != nil {
		return m.CloudId
	}
	return ""
}

func (m *PullReleaseReq) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *PullReleaseReq) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *PullReleaseReq) GetLabels() string {
	if m != nil {
		return m.Labels
	}
	return ""
}

func (m *PullReleaseReq) GetCfgId() string {
	if m != nil {
		return m.CfgId
	}
	return ""
}

func (m *PullReleaseReq) GetLocalReleaseId() string {
	if m != nil {
		return m.LocalReleaseId
	}
	return ""
}

func (m *PullReleaseReq) GetReleaseId() string {
	if m != nil {
		return m.ReleaseId
	}
	return ""
}

type PullReleaseResp struct {
	Seq     string          `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode  `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string          `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Release *common.Release `protobuf:"bytes,4,opt,name=release" json:"release,omitempty"`
}

func (m *PullReleaseResp) Reset()                    { *m = PullReleaseResp{} }
func (m *PullReleaseResp) String() string            { return proto.CompactTextString(m) }
func (*PullReleaseResp) ProtoMessage()               {}
func (*PullReleaseResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *PullReleaseResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *PullReleaseResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *PullReleaseResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *PullReleaseResp) GetRelease() *common.Release {
	if m != nil {
		return m.Release
	}
	return nil
}

type ReloadReq struct {
	Seq            string             `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	BizId          string             `protobuf:"bytes,2,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	ReleaseId      string             `protobuf:"bytes,3,opt,name=release_id,json=releaseId" json:"release_id,omitempty"`
	MultiReleaseId string             `protobuf:"bytes,4,opt,name=multi_release_id,json=multiReleaseId" json:"multi_release_id,omitempty"`
	Operator       string             `protobuf:"bytes,5,opt,name=operator" json:"operator,omitempty"`
	ReloadSpec     *common.ReloadSpec `protobuf:"bytes,6,opt,name=reload_spec,json=reloadSpec" json:"reload_spec,omitempty"`
}

func (m *ReloadReq) Reset()                    { *m = ReloadReq{} }
func (m *ReloadReq) String() string            { return proto.CompactTextString(m) }
func (*ReloadReq) ProtoMessage()               {}
func (*ReloadReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ReloadReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *ReloadReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *ReloadReq) GetReleaseId() string {
	if m != nil {
		return m.ReleaseId
	}
	return ""
}

func (m *ReloadReq) GetMultiReleaseId() string {
	if m != nil {
		return m.MultiReleaseId
	}
	return ""
}

func (m *ReloadReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *ReloadReq) GetReloadSpec() *common.ReloadSpec {
	if m != nil {
		return m.ReloadSpec
	}
	return nil
}

type ReloadResp struct {
	Seq     string         `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string         `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *ReloadResp) Reset()                    { *m = ReloadResp{} }
func (m *ReloadResp) String() string            { return proto.CompactTextString(m) }
func (*ReloadResp) ProtoMessage()               {}
func (*ReloadResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *ReloadResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *ReloadResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *ReloadResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type HealthzReq struct {
	Seq string `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
}

func (m *HealthzReq) Reset()                    { *m = HealthzReq{} }
func (m *HealthzReq) String() string            { return proto.CompactTextString(m) }
func (*HealthzReq) ProtoMessage()               {}
func (*HealthzReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *HealthzReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

type HealthzResp struct {
	Seq     string                    `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode            `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string                    `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    *common.ModuleHealthzInfo `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *HealthzResp) Reset()                    { *m = HealthzResp{} }
func (m *HealthzResp) String() string            { return proto.CompactTextString(m) }
func (*HealthzResp) ProtoMessage()               {}
func (*HealthzResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *HealthzResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *HealthzResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *HealthzResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *HealthzResp) GetData() *common.ModuleHealthzInfo {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*PublishReleasePreReq)(nil), "gsecontroller.PublishReleasePreReq")
	proto.RegisterType((*PublishReleasePreResp)(nil), "gsecontroller.PublishReleasePreResp")
	proto.RegisterType((*PublishReleaseReq)(nil), "gsecontroller.PublishReleaseReq")
	proto.RegisterType((*PublishReleaseResp)(nil), "gsecontroller.PublishReleaseResp")
	proto.RegisterType((*RollbackReleaseReq)(nil), "gsecontroller.RollbackReleaseReq")
	proto.RegisterType((*RollbackReleaseResp)(nil), "gsecontroller.RollbackReleaseResp")
	proto.RegisterType((*PullReleaseReq)(nil), "gsecontroller.PullReleaseReq")
	proto.RegisterType((*PullReleaseResp)(nil), "gsecontroller.PullReleaseResp")
	proto.RegisterType((*ReloadReq)(nil), "gsecontroller.ReloadReq")
	proto.RegisterType((*ReloadResp)(nil), "gsecontroller.ReloadResp")
	proto.RegisterType((*HealthzReq)(nil), "gsecontroller.HealthzReq")
	proto.RegisterType((*HealthzResp)(nil), "gsecontroller.HealthzResp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for GSEController service

type GSEControllerClient interface {
	PublishReleasePre(ctx context.Context, in *PublishReleasePreReq, opts ...grpc.CallOption) (*PublishReleasePreResp, error)
	PublishRelease(ctx context.Context, in *PublishReleaseReq, opts ...grpc.CallOption) (*PublishReleaseResp, error)
	RollbackRelease(ctx context.Context, in *RollbackReleaseReq, opts ...grpc.CallOption) (*RollbackReleaseResp, error)
	PullRelease(ctx context.Context, in *PullReleaseReq, opts ...grpc.CallOption) (*PullReleaseResp, error)
	Reload(ctx context.Context, in *ReloadReq, opts ...grpc.CallOption) (*ReloadResp, error)
	Healthz(ctx context.Context, in *HealthzReq, opts ...grpc.CallOption) (*HealthzResp, error)
}

type gSEControllerClient struct {
	cc *grpc.ClientConn
}

func NewGSEControllerClient(cc *grpc.ClientConn) GSEControllerClient {
	return &gSEControllerClient{cc}
}

func (c *gSEControllerClient) PublishReleasePre(ctx context.Context, in *PublishReleasePreReq, opts ...grpc.CallOption) (*PublishReleasePreResp, error) {
	out := new(PublishReleasePreResp)
	err := grpc.Invoke(ctx, "/gsecontroller.GSEController/PublishReleasePre", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gSEControllerClient) PublishRelease(ctx context.Context, in *PublishReleaseReq, opts ...grpc.CallOption) (*PublishReleaseResp, error) {
	out := new(PublishReleaseResp)
	err := grpc.Invoke(ctx, "/gsecontroller.GSEController/PublishRelease", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gSEControllerClient) RollbackRelease(ctx context.Context, in *RollbackReleaseReq, opts ...grpc.CallOption) (*RollbackReleaseResp, error) {
	out := new(RollbackReleaseResp)
	err := grpc.Invoke(ctx, "/gsecontroller.GSEController/RollbackRelease", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gSEControllerClient) PullRelease(ctx context.Context, in *PullReleaseReq, opts ...grpc.CallOption) (*PullReleaseResp, error) {
	out := new(PullReleaseResp)
	err := grpc.Invoke(ctx, "/gsecontroller.GSEController/PullRelease", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gSEControllerClient) Reload(ctx context.Context, in *ReloadReq, opts ...grpc.CallOption) (*ReloadResp, error) {
	out := new(ReloadResp)
	err := grpc.Invoke(ctx, "/gsecontroller.GSEController/Reload", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gSEControllerClient) Healthz(ctx context.Context, in *HealthzReq, opts ...grpc.CallOption) (*HealthzResp, error) {
	out := new(HealthzResp)
	err := grpc.Invoke(ctx, "/gsecontroller.GSEController/Healthz", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GSEController service

type GSEControllerServer interface {
	PublishReleasePre(context.Context, *PublishReleasePreReq) (*PublishReleasePreResp, error)
	PublishRelease(context.Context, *PublishReleaseReq) (*PublishReleaseResp, error)
	RollbackRelease(context.Context, *RollbackReleaseReq) (*RollbackReleaseResp, error)
	PullRelease(context.Context, *PullReleaseReq) (*PullReleaseResp, error)
	Reload(context.Context, *ReloadReq) (*ReloadResp, error)
	Healthz(context.Context, *HealthzReq) (*HealthzResp, error)
}

func RegisterGSEControllerServer(s *grpc.Server, srv GSEControllerServer) {
	s.RegisterService(&_GSEController_serviceDesc, srv)
}

func _GSEController_PublishReleasePre_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishReleasePreReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GSEControllerServer).PublishReleasePre(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gsecontroller.GSEController/PublishReleasePre",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GSEControllerServer).PublishReleasePre(ctx, req.(*PublishReleasePreReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GSEController_PublishRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishReleaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GSEControllerServer).PublishRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gsecontroller.GSEController/PublishRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GSEControllerServer).PublishRelease(ctx, req.(*PublishReleaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GSEController_RollbackRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RollbackReleaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GSEControllerServer).RollbackRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gsecontroller.GSEController/RollbackRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GSEControllerServer).RollbackRelease(ctx, req.(*RollbackReleaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GSEController_PullRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PullReleaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GSEControllerServer).PullRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gsecontroller.GSEController/PullRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GSEControllerServer).PullRelease(ctx, req.(*PullReleaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GSEController_Reload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReloadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GSEControllerServer).Reload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gsecontroller.GSEController/Reload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GSEControllerServer).Reload(ctx, req.(*ReloadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GSEController_Healthz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthzReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GSEControllerServer).Healthz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gsecontroller.GSEController/Healthz",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GSEControllerServer).Healthz(ctx, req.(*HealthzReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _GSEController_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gsecontroller.GSEController",
	HandlerType: (*GSEControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PublishReleasePre",
			Handler:    _GSEController_PublishReleasePre_Handler,
		},
		{
			MethodName: "PublishRelease",
			Handler:    _GSEController_PublishRelease_Handler,
		},
		{
			MethodName: "RollbackRelease",
			Handler:    _GSEController_RollbackRelease_Handler,
		},
		{
			MethodName: "PullRelease",
			Handler:    _GSEController_PullRelease_Handler,
		},
		{
			MethodName: "Reload",
			Handler:    _GSEController_Reload_Handler,
		},
		{
			MethodName: "Healthz",
			Handler:    _GSEController_Healthz_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gse-controller.proto",
}

func init() { proto.RegisterFile("gse-controller.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 631 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x56, 0x5f, 0x4f, 0xdb, 0x30,
	0x10, 0x5f, 0x4b, 0xff, 0xd0, 0xab, 0x28, 0xec, 0x06, 0x53, 0x88, 0x04, 0x62, 0x61, 0x0f, 0xec,
	0xa1, 0x45, 0x82, 0x0f, 0x30, 0x69, 0x08, 0x6d, 0x79, 0xd8, 0x54, 0x85, 0x87, 0x49, 0x93, 0x26,
	0xe6, 0xd8, 0x6e, 0x1b, 0xe1, 0xd6, 0xc6, 0x4e, 0xb5, 0xa9, 0x5f, 0x60, 0x4f, 0xfb, 0x6a, 0xfb,
	0x42, 0x7b, 0x99, 0xe2, 0x24, 0x6d, 0x1a, 0x0a, 0x48, 0xd3, 0xca, 0x53, 0xe3, 0xfb, 0xdd, 0xdd,
	0xcf, 0xbf, 0xbb, 0xb3, 0x5d, 0xd8, 0x1d, 0x1a, 0xde, 0xa5, 0x72, 0x12, 0x6b, 0x29, 0x04, 0xd7,
	0x3d, 0xa5, 0x65, 0x2c, 0x71, 0x6b, 0x68, 0xf8, 0xc2, 0xe8, 0x76, 0xc3, 0x9b, 0x6e, 0x68, 0xa8,
	0x3a, 0x8d, 0x26, 0x31, 0xd7, 0x13, 0x22, 0x4e, 0xad, 0x1b, 0x95, 0xe2, 0x94, 0xca, 0xf1, 0x58,
	0x4e, 0xb2, 0x9f, 0x34, 0xda, 0x9b, 0xc1, 0x6e, 0x7f, 0x1a, 0x8a, 0xc8, 0x8c, 0x02, 0x2e, 0x38,
	0x31, 0xbc, 0xaf, 0x79, 0xc0, 0x6f, 0x71, 0x07, 0x36, 0x0c, 0xbf, 0x75, 0x2a, 0x47, 0x95, 0x93,
	0x56, 0x90, 0x7c, 0xe2, 0x1e, 0x34, 0xc2, 0x68, 0x76, 0x1d, 0x31, 0xa7, 0x6a, 0x8d, 0xf5, 0x30,
	0x9a, 0xf9, 0x0c, 0x0f, 0x00, 0x74, 0x1a, 0x99, 0x40, 0x1b, 0x16, 0x6a, 0x65, 0x16, 0x9f, 0xa1,
	0x0b, 0x9b, 0x52, 0x71, 0x4d, 0x62, 0xa9, 0x9d, 0x9a, 0x05, 0xe7, 0x6b, 0x6f, 0x04, 0x7b, 0x2b,
	0xb8, 0x8d, 0x5a, 0x41, 0x7e, 0x0c, 0x35, 0x2a, 0x19, 0xb7, 0xd4, 0x9d, 0xb3, 0xed, 0x5e, 0xa6,
	0xe1, 0x52, 0xeb, 0x0b, 0xc9, 0x78, 0x60, 0x41, 0x74, 0xa0, 0x39, 0xe6, 0xc6, 0x90, 0x21, 0xcf,
	0xf6, 0x91, 0x2f, 0xbd, 0xef, 0xf0, 0x7c, 0x99, 0xe9, 0xa9, 0x24, 0x72, 0xc0, 0x32, 0xf1, 0x3a,
	0xf4, 0xfd, 0x00, 0x0c, 0xa4, 0x10, 0x21, 0xa1, 0x37, 0x4f, 0x2c, 0x70, 0x00, 0x2f, 0xee, 0x30,
	0xaf, 0x43, 0xe1, 0xcf, 0x2a, 0x74, 0xfa, 0x53, 0x21, 0xfe, 0x45, 0xde, 0x1e, 0x34, 0x88, 0x52,
	0x0b, 0x69, 0x75, 0xa2, 0x94, 0xcf, 0x70, 0x1f, 0x36, 0xa9, 0x90, 0x53, 0x96, 0x00, 0xa9, 0xac,
	0xa6, 0x5d, 0xfb, 0x0c, 0x3b, 0x50, 0x8d, 0x94, 0x53, 0xb7, 0xc6, 0x6a, 0xa4, 0x10, 0xa1, 0xa6,
	0x48, 0x3c, 0x72, 0x1a, 0xd6, 0x62, 0xbf, 0xf1, 0x25, 0x34, 0x04, 0x09, 0xb9, 0x30, 0x4e, 0xd3,
	0x5a, 0xb3, 0x55, 0xc2, 0x46, 0x07, 0xc3, 0x24, 0xe9, 0x66, 0xca, 0x46, 0x07, 0x43, 0x9f, 0xe1,
	0x09, 0xec, 0x08, 0x49, 0x89, 0xb8, 0x2e, 0x54, 0xba, 0x65, 0x1d, 0x3a, 0xd6, 0x1e, 0xcc, 0xcb,
	0xbd, 0xdc, 0x0d, 0x28, 0x75, 0xc3, 0xfb, 0x55, 0x81, 0xed, 0xa5, 0x4a, 0xac, 0xa1, 0xdc, 0xf8,
	0x06, 0x9a, 0x19, 0xa3, 0x2d, 0x4d, 0x7b, 0x91, 0x21, 0xa7, 0xcd, 0x71, 0xef, 0x77, 0x05, 0x5a,
	0x01, 0x17, 0x92, 0xb0, 0xff, 0x39, 0x73, 0x27, 0xb0, 0x33, 0x9e, 0x8a, 0x38, 0x2a, 0x96, 0x2b,
	0x6d, 0x52, 0xc7, 0xda, 0x83, 0x95, 0xd3, 0x59, 0x5f, 0x9e, 0x4e, 0x3c, 0x87, 0xb6, 0xb6, 0x5b,
	0xbb, 0x36, 0x8a, 0x53, 0xdb, 0xbe, 0xf6, 0x19, 0x16, 0xa4, 0x48, 0xc2, 0xae, 0x14, 0xa7, 0x01,
	0xe8, 0xf9, 0xb7, 0xf7, 0x15, 0x20, 0xd7, 0xb3, 0x8e, 0x49, 0x3e, 0x04, 0xf8, 0xc0, 0x89, 0x88,
	0x47, 0xb3, 0x95, 0xf5, 0x4a, 0xfa, 0xdb, 0x9e, 0x3b, 0xac, 0xa3, 0xb7, 0x5d, 0xa8, 0x31, 0x12,
	0x93, 0xac, 0xb1, 0xfb, 0x79, 0xf8, 0x47, 0xc9, 0xa6, 0x82, 0x67, 0xcc, 0xfe, 0x64, 0x20, 0x03,
	0xeb, 0x76, 0xf6, 0x67, 0x03, 0xb6, 0xde, 0x5f, 0x5d, 0x5e, 0xcc, 0x9f, 0x18, 0xfc, 0x56, 0xbe,
	0x4d, 0xfb, 0x9a, 0xe3, 0x71, 0x6f, 0xe9, 0x1d, 0xea, 0xad, 0x7a, 0x55, 0xdc, 0xd7, 0x8f, 0x3b,
	0x19, 0xe5, 0x3d, 0xc3, 0xcf, 0xc9, 0x61, 0x2f, 0x42, 0x78, 0xf4, 0x60, 0x64, 0x92, 0xfb, 0xd5,
	0x23, 0x1e, 0x36, 0xf1, 0x17, 0xd8, 0x2e, 0x5d, 0x57, 0x58, 0x8e, 0xbb, 0x7b, 0x91, 0xba, 0xde,
	0x63, 0x2e, 0x36, 0xf7, 0x27, 0x68, 0x17, 0xce, 0x25, 0x1e, 0xdc, 0xd9, 0x4f, 0xf1, 0xf6, 0x72,
	0x0f, 0x1f, 0x82, 0x6d, 0xbe, 0xb7, 0xd0, 0x48, 0xe7, 0x10, 0x9d, 0x32, 0x7f, 0x7e, 0xdc, 0xdc,
	0xfd, 0x7b, 0x10, 0x9b, 0xe0, 0x1d, 0x34, 0xb3, 0x76, 0x62, 0xd9, 0x6f, 0x31, 0x81, 0xae, 0x7b,
	0x1f, 0x94, 0xe4, 0x08, 0x1b, 0xf6, 0x6f, 0xc2, 0xf9, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc9,
	0x14, 0x28, 0xd5, 0x7c, 0x08, 0x00, 0x00,
}
