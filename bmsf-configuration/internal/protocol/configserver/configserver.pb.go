// Code generated by protoc-gen-go.
// source: configserver.proto
// DO NOT EDIT!

/*
Package configserver is a generated protocol buffer package.

It is generated from these files:
	configserver.proto

It has these top-level messages:
	CreateAppReq
	CreateAppResp
	QueryAppReq
	QueryAppResp
	QueryAppListReq
	QueryAppListResp
	UpdateAppReq
	UpdateAppResp
	DeleteAppReq
	DeleteAppResp
	CreateConfigReq
	CreateConfigResp
	QueryConfigReq
	QueryConfigResp
	QueryConfigListReq
	QueryConfigListResp
	UpdateConfigReq
	UpdateConfigResp
	DeleteConfigReq
	DeleteConfigResp
	CreateConfigContentReq
	CreateConfigContentResp
	QueryConfigContentReq
	QueryConfigContentResp
	QueryConfigContentListReq
	QueryConfigContentListResp
	QueryReleaseConfigContentReq
	QueryReleaseConfigContentResp
	CreateCommitReq
	CreateCommitResp
	QueryCommitReq
	QueryCommitResp
	QueryHistoryCommitsReq
	QueryHistoryCommitsResp
	UpdateCommitReq
	UpdateCommitResp
	CancelCommitReq
	CancelCommitResp
	ConfirmCommitReq
	ConfirmCommitResp
	CreateMultiCommitWithContentReq
	CreateMultiCommitWithContentResp
	CreateMultiCommitReq
	CreateMultiCommitResp
	QueryMultiCommitReq
	QueryMultiCommitResp
	QueryHistoryMultiCommitsReq
	QueryHistoryMultiCommitsResp
	UpdateMultiCommitReq
	UpdateMultiCommitResp
	CancelMultiCommitReq
	CancelMultiCommitResp
	ConfirmMultiCommitReq
	ConfirmMultiCommitResp
	CreateReleaseReq
	CreateReleaseResp
	QueryReleaseReq
	QueryReleaseResp
	QueryHistoryReleasesReq
	QueryHistoryReleasesResp
	UpdateReleaseReq
	UpdateReleaseResp
	CancelReleaseReq
	CancelReleaseResp
	PublishReleaseReq
	PublishReleaseResp
	RollbackReleaseReq
	RollbackReleaseResp
	CreateMultiReleaseReq
	CreateMultiReleaseResp
	QueryMultiReleaseReq
	QueryMultiReleaseResp
	QueryHistoryMultiReleasesReq
	QueryHistoryMultiReleasesResp
	UpdateMultiReleaseReq
	UpdateMultiReleaseResp
	CancelMultiReleaseReq
	CancelMultiReleaseResp
	PublishMultiReleaseReq
	PublishMultiReleaseResp
	RollbackMultiReleaseReq
	RollbackMultiReleaseResp
	ReloadReq
	ReloadResp
	QueryHistoryAppInstancesReq
	QueryHistoryAppInstancesResp
	QueryReachableAppInstancesReq
	QueryReachableAppInstancesResp
	QueryMatchedAppInstancesReq
	QueryMatchedAppInstancesResp
	QueryEffectedAppInstancesReq
	QueryEffectedAppInstancesResp
	QueryAppInstanceReleaseReq
	QueryAppInstanceReleaseResp
	CreateStrategyReq
	CreateStrategyResp
	QueryStrategyReq
	QueryStrategyResp
	QueryStrategyListReq
	QueryStrategyListResp
	DeleteStrategyReq
	DeleteStrategyResp
	CreateProcAttrReq
	CreateProcAttrResp
	QueryHostProcAttrReq
	QueryHostProcAttrResp
	QueryHostProcAttrListReq
	QueryHostProcAttrListResp
	QueryAppProcAttrListReq
	QueryAppProcAttrListResp
	UpdateProcAttrReq
	UpdateProcAttrResp
	DeleteProcAttrReq
	DeleteProcAttrResp
	QueryAuditListReq
	QueryAuditListResp
	HealthzReq
	HealthzResp
*/
package configserver

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "bk-bscp/internal/protocol/common"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CreateAppReq struct {
	BizId      string `protobuf:"bytes,1,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	Name       string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	DeployType int32  `protobuf:"varint,3,opt,name=deploy_type,json=deployType" json:"deploy_type,omitempty"`
	Memo       string `protobuf:"bytes,4,opt,name=memo" json:"memo,omitempty"`
}

func (m *CreateAppReq) Reset()                    { *m = CreateAppReq{} }
func (m *CreateAppReq) String() string            { return proto.CompactTextString(m) }
func (*CreateAppReq) ProtoMessage()               {}
func (*CreateAppReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CreateAppReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *CreateAppReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateAppReq) GetDeployType() int32 {
	if m != nil {
		return m.DeployType
	}
	return 0
}

func (m *CreateAppReq) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

type CreateAppResp struct {
	Result  bool                    `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Code    common.ErrCode          `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string                  `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    *CreateAppResp_RespData `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *CreateAppResp) Reset()                    { *m = CreateAppResp{} }
func (m *CreateAppResp) String() string            { return proto.CompactTextString(m) }
func (*CreateAppResp) ProtoMessage()               {}
func (*CreateAppResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CreateAppResp) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *CreateAppResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *CreateAppResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *CreateAppResp) GetData() *CreateAppResp_RespData {
	if m != nil {
		return m.Data
	}
	return nil
}

type CreateAppResp_RespData struct {
	AppId string `protobuf:"bytes,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
}

func (m *CreateAppResp_RespData) Reset()                    { *m = CreateAppResp_RespData{} }
func (m *CreateAppResp_RespData) String() string            { return proto.CompactTextString(m) }
func (*CreateAppResp_RespData) ProtoMessage()               {}
func (*CreateAppResp_RespData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

func (m *CreateAppResp_RespData) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

type QueryAppReq struct {
	BizId string `protobuf:"bytes,1,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId string `protobuf:"bytes,2,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	Name  string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
}

func (m *QueryAppReq) Reset()                    { *m = QueryAppReq{} }
func (m *QueryAppReq) String() string            { return proto.CompactTextString(m) }
func (*QueryAppReq) ProtoMessage()               {}
func (*QueryAppReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *QueryAppReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *QueryAppReq) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *QueryAppReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type QueryAppResp struct {
	Result  bool           `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Code    common.ErrCode `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string         `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    *common.App    `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *QueryAppResp) Reset()                    { *m = QueryAppResp{} }
func (m *QueryAppResp) String() string            { return proto.CompactTextString(m) }
func (*QueryAppResp) ProtoMessage()               {}
func (*QueryAppResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *QueryAppResp) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *QueryAppResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *QueryAppResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *QueryAppResp) GetData() *common.App {
	if m != nil {
		return m.Data
	}
	return nil
}

type QueryAppListReq struct {
	BizId string       `protobuf:"bytes,1,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	Page  *common.Page `protobuf:"bytes,2,opt,name=page" json:"page,omitempty"`
}

func (m *QueryAppListReq) Reset()                    { *m = QueryAppListReq{} }
func (m *QueryAppListReq) String() string            { return proto.CompactTextString(m) }
func (*QueryAppListReq) ProtoMessage()               {}
func (*QueryAppListReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *QueryAppListReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *QueryAppListReq) GetPage() *common.Page {
	if m != nil {
		return m.Page
	}
	return nil
}

type QueryAppListResp struct {
	Result  bool                       `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Code    common.ErrCode             `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string                     `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    *QueryAppListResp_RespData `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *QueryAppListResp) Reset()                    { *m = QueryAppListResp{} }
func (m *QueryAppListResp) String() string            { return proto.CompactTextString(m) }
func (*QueryAppListResp) ProtoMessage()               {}
func (*QueryAppListResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *QueryAppListResp) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *QueryAppListResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *QueryAppListResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *QueryAppListResp) GetData() *QueryAppListResp_RespData {
	if m != nil {
		return m.Data
	}
	return nil
}

type QueryAppListResp_RespData struct {
	TotalCount uint32        `protobuf:"varint,1,opt,name=total_count,json=totalCount" json:"total_count,omitempty"`
	Info       []*common.App `protobuf:"bytes,2,rep,name=info" json:"info,omitempty"`
}

func (m *QueryAppListResp_RespData) Reset()                    { *m = QueryAppListResp_RespData{} }
func (m *QueryAppListResp_RespData) String() string            { return proto.CompactTextString(m) }
func (*QueryAppListResp_RespData) ProtoMessage()               {}
func (*QueryAppListResp_RespData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5, 0} }

func (m *QueryAppListResp_RespData) GetTotalCount() uint32 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *QueryAppListResp_RespData) GetInfo() []*common.App {
	if m != nil {
		return m.Info
	}
	return nil
}

type UpdateAppReq struct {
	BizId      string `protobuf:"bytes,1,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId      string `protobuf:"bytes,2,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	Name       string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	DeployType int32  `protobuf:"varint,4,opt,name=deploy_type,json=deployType" json:"deploy_type,omitempty"`
	Memo       string `protobuf:"bytes,5,opt,name=memo" json:"memo,omitempty"`
	State      int32  `protobuf:"varint,6,opt,name=state" json:"state,omitempty"`
}

func (m *UpdateAppReq) Reset()                    { *m = UpdateAppReq{} }
func (m *UpdateAppReq) String() string            { return proto.CompactTextString(m) }
func (*UpdateAppReq) ProtoMessage()               {}
func (*UpdateAppReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *UpdateAppReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *UpdateAppReq) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *UpdateAppReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateAppReq) GetDeployType() int32 {
	if m != nil {
		return m.DeployType
	}
	return 0
}

func (m *UpdateAppReq) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *UpdateAppReq) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

type UpdateAppResp struct {
	Result  bool           `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Code    common.ErrCode `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string         `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *UpdateAppResp) Reset()                    { *m = UpdateAppResp{} }
func (m *UpdateAppResp) String() string            { return proto.CompactTextString(m) }
func (*UpdateAppResp) ProtoMessage()               {}
func (*UpdateAppResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *UpdateAppResp) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *UpdateAppResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *UpdateAppResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type DeleteAppReq struct {
	BizId string `protobuf:"bytes,1,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId string `protobuf:"bytes,2,opt,name=app_id,json=appId" json:"app_id,omitempty"`
}

func (m *DeleteAppReq) Reset()                    { *m = DeleteAppReq{} }
func (m *DeleteAppReq) String() string            { return proto.CompactTextString(m) }
func (*DeleteAppReq) ProtoMessage()               {}
func (*DeleteAppReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *DeleteAppReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *DeleteAppReq) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

type DeleteAppResp struct {
	Result  bool           `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Code    common.ErrCode `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string         `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *DeleteAppResp) Reset()                    { *m = DeleteAppResp{} }
func (m *DeleteAppResp) String() string            { return proto.CompactTextString(m) }
func (*DeleteAppResp) ProtoMessage()               {}
func (*DeleteAppResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *DeleteAppResp) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *DeleteAppResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *DeleteAppResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type CreateConfigReq struct {
	BizId         string `protobuf:"bytes,1,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId         string `protobuf:"bytes,2,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	Name          string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Fpath         string `protobuf:"bytes,4,opt,name=fpath" json:"fpath,omitempty"`
	User          string `protobuf:"bytes,5,opt,name=user" json:"user,omitempty"`
	UserGroup     string `protobuf:"bytes,6,opt,name=user_group,json=userGroup" json:"user_group,omitempty"`
	FilePrivilege string `protobuf:"bytes,7,opt,name=file_privilege,json=filePrivilege" json:"file_privilege,omitempty"`
	FileFormat    string `protobuf:"bytes,8,opt,name=file_format,json=fileFormat" json:"file_format,omitempty"`
	FileMode      int32  `protobuf:"varint,9,opt,name=file_mode,json=fileMode" json:"file_mode,omitempty"`
	Memo          string `protobuf:"bytes,10,opt,name=memo" json:"memo,omitempty"`
}

func (m *CreateConfigReq) Reset()                    { *m = CreateConfigReq{} }
func (m *CreateConfigReq) String() string            { return proto.CompactTextString(m) }
func (*CreateConfigReq) ProtoMessage()               {}
func (*CreateConfigReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *CreateConfigReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *CreateConfigReq) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *CreateConfigReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateConfigReq) GetFpath() string {
	if m != nil {
		return m.Fpath
	}
	return ""
}

func (m *CreateConfigReq) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *CreateConfigReq) GetUserGroup() string {
	if m != nil {
		return m.UserGroup
	}
	return ""
}

func (m *CreateConfigReq) GetFilePrivilege() string {
	if m != nil {
		return m.FilePrivilege
	}
	return ""
}

func (m *CreateConfigReq) GetFileFormat() string {
	if m != nil {
		return m.FileFormat
	}
	return ""
}

func (m *CreateConfigReq) GetFileMode() int32 {
	if m != nil {
		return m.FileMode
	}
	return 0
}

func (m *CreateConfigReq) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

type CreateConfigResp struct {
	Result  bool                       `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Code    common.ErrCode             `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string                     `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    *CreateConfigResp_RespData `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *CreateConfigResp) Reset()                    { *m = CreateConfigResp{} }
func (m *CreateConfigResp) String() string            { return proto.CompactTextString(m) }
func (*CreateConfigResp) ProtoMessage()               {}
func (*CreateConfigResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *CreateConfigResp) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *CreateConfigResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *CreateConfigResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *CreateConfigResp) GetData() *CreateConfigResp_RespData {
	if m != nil {
		return m.Data
	}
	return nil
}

type CreateConfigResp_RespData struct {
	CfgId string `protobuf:"bytes,1,opt,name=cfg_id,json=cfgId" json:"cfg_id,omitempty"`
}

func (m *CreateConfigResp_RespData) Reset()                    { *m = CreateConfigResp_RespData{} }
func (m *CreateConfigResp_RespData) String() string            { return proto.CompactTextString(m) }
func (*CreateConfigResp_RespData) ProtoMessage()               {}
func (*CreateConfigResp_RespData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11, 0} }

func (m *CreateConfigResp_RespData) GetCfgId() string {
	if m != nil {
		return m.CfgId
	}
	return ""
}

type QueryConfigReq struct {
	BizId string `protobuf:"bytes,1,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId string `protobuf:"bytes,2,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	CfgId string `protobuf:"bytes,3,opt,name=cfg_id,json=cfgId" json:"cfg_id,omitempty"`
	Name  string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	Fpath string `protobuf:"bytes,5,opt,name=fpath" json:"fpath,omitempty"`
}

func (m *QueryConfigReq) Reset()                    { *m = QueryConfigReq{} }
func (m *QueryConfigReq) String() string            { return proto.CompactTextString(m) }
func (*QueryConfigReq) ProtoMessage()               {}
func (*QueryConfigReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *QueryConfigReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *QueryConfigReq) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *QueryConfigReq) GetCfgId() string {
	if m != nil {
		return m.CfgId
	}
	return ""
}

func (m *QueryConfigReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *QueryConfigReq) GetFpath() string {
	if m != nil {
		return m.Fpath
	}
	return ""
}

type QueryConfigResp struct {
	Result  bool           `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Code    common.ErrCode `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string         `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    *common.Config `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *QueryConfigResp) Reset()                    { *m = QueryConfigResp{} }
func (m *QueryConfigResp) String() string            { return proto.CompactTextString(m) }
func (*QueryConfigResp) ProtoMessage()               {}
func (*QueryConfigResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *QueryConfigResp) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *QueryConfigResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *QueryConfigResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *QueryConfigResp) GetData() *common.Config {
	if m != nil {
		return m.Data
	}
	return nil
}

type QueryConfigListReq struct {
	BizId string       `protobuf:"bytes,1,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId string       `protobuf:"bytes,2,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	Page  *common.Page `protobuf:"bytes,3,opt,name=page" json:"page,omitempty"`
}

func (m *QueryConfigListReq) Reset()                    { *m = QueryConfigListReq{} }
func (m *QueryConfigListReq) String() string            { return proto.CompactTextString(m) }
func (*QueryConfigListReq) ProtoMessage()               {}
func (*QueryConfigListReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *QueryConfigListReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *QueryConfigListReq) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *QueryConfigListReq) GetPage() *common.Page {
	if m != nil {
		return m.Page
	}
	return nil
}

type QueryConfigListResp struct {
	Result  bool                          `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Code    common.ErrCode                `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string                        `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    *QueryConfigListResp_RespData `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *QueryConfigListResp) Reset()                    { *m = QueryConfigListResp{} }
func (m *QueryConfigListResp) String() string            { return proto.CompactTextString(m) }
func (*QueryConfigListResp) ProtoMessage()               {}
func (*QueryConfigListResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *QueryConfigListResp) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *QueryConfigListResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *QueryConfigListResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *QueryConfigListResp) GetData() *QueryConfigListResp_RespData {
	if m != nil {
		return m.Data
	}
	return nil
}

type QueryConfigListResp_RespData struct {
	TotalCount uint32           `protobuf:"varint,1,opt,name=total_count,json=totalCount" json:"total_count,omitempty"`
	Info       []*common.Config `protobuf:"bytes,2,rep,name=info" json:"info,omitempty"`
}

func (m *QueryConfigListResp_RespData) Reset()         { *m = QueryConfigListResp_RespData{} }
func (m *QueryConfigListResp_RespData) String() string { return proto.CompactTextString(m) }
func (*QueryConfigListResp_RespData) ProtoMessage()    {}
func (*QueryConfigListResp_RespData) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{15, 0}
}

func (m *QueryConfigListResp_RespData) GetTotalCount() uint32 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *QueryConfigListResp_RespData) GetInfo() []*common.Config {
	if m != nil {
		return m.Info
	}
	return nil
}

type UpdateConfigReq struct {
	BizId         string `protobuf:"bytes,1,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId         string `protobuf:"bytes,2,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	CfgId         string `protobuf:"bytes,3,opt,name=cfg_id,json=cfgId" json:"cfg_id,omitempty"`
	Name          string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	Fpath         string `protobuf:"bytes,5,opt,name=fpath" json:"fpath,omitempty"`
	User          string `protobuf:"bytes,6,opt,name=user" json:"user,omitempty"`
	UserGroup     string `protobuf:"bytes,7,opt,name=user_group,json=userGroup" json:"user_group,omitempty"`
	FilePrivilege string `protobuf:"bytes,8,opt,name=file_privilege,json=filePrivilege" json:"file_privilege,omitempty"`
	FileFormat    string `protobuf:"bytes,9,opt,name=file_format,json=fileFormat" json:"file_format,omitempty"`
	FileMode      int32  `protobuf:"varint,10,opt,name=file_mode,json=fileMode" json:"file_mode,omitempty"`
	Memo          string `protobuf:"bytes,11,opt,name=memo" json:"memo,omitempty"`
	State         int32  `protobuf:"varint,12,opt,name=state" json:"state,omitempty"`
}

func (m *UpdateConfigReq) Reset()                    { *m = UpdateConfigReq{} }
func (m *UpdateConfigReq) String() string            { return proto.CompactTextString(m) }
func (*UpdateConfigReq) ProtoMessage()               {}
func (*UpdateConfigReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *UpdateConfigReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *UpdateConfigReq) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *UpdateConfigReq) GetCfgId() string {
	if m != nil {
		return m.CfgId
	}
	return ""
}

func (m *UpdateConfigReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateConfigReq) GetFpath() string {
	if m != nil {
		return m.Fpath
	}
	return ""
}

func (m *UpdateConfigReq) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *UpdateConfigReq) GetUserGroup() string {
	if m != nil {
		return m.UserGroup
	}
	return ""
}

func (m *UpdateConfigReq) GetFilePrivilege() string {
	if m != nil {
		return m.FilePrivilege
	}
	return ""
}

func (m *UpdateConfigReq) GetFileFormat() string {
	if m != nil {
		return m.FileFormat
	}
	return ""
}

func (m *UpdateConfigReq) GetFileMode() int32 {
	if m != nil {
		return m.FileMode
	}
	return 0
}

func (m *UpdateConfigReq) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *UpdateConfigReq) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

type UpdateConfigResp struct {
	Result  bool           `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Code    common.ErrCode `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string         `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *UpdateConfigResp) Reset()                    { *m = UpdateConfigResp{} }
func (m *UpdateConfigResp) String() string            { return proto.CompactTextString(m) }
func (*UpdateConfigResp) ProtoMessage()               {}
func (*UpdateConfigResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *UpdateConfigResp) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *UpdateConfigResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *UpdateConfigResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type DeleteConfigReq struct {
	BizId string `protobuf:"bytes,1,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId string `protobuf:"bytes,2,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	CfgId string `protobuf:"bytes,3,opt,name=cfg_id,json=cfgId" json:"cfg_id,omitempty"`
}

func (m *DeleteConfigReq) Reset()                    { *m = DeleteConfigReq{} }
func (m *DeleteConfigReq) String() string            { return proto.CompactTextString(m) }
func (*DeleteConfigReq) ProtoMessage()               {}
func (*DeleteConfigReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *DeleteConfigReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *DeleteConfigReq) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *DeleteConfigReq) GetCfgId() string {
	if m != nil {
		return m.CfgId
	}
	return ""
}

type DeleteConfigResp struct {
	Result  bool           `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Code    common.ErrCode `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string         `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *DeleteConfigResp) Reset()                    { *m = DeleteConfigResp{} }
func (m *DeleteConfigResp) String() string            { return proto.CompactTextString(m) }
func (*DeleteConfigResp) ProtoMessage()               {}
func (*DeleteConfigResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *DeleteConfigResp) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *DeleteConfigResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *DeleteConfigResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type CreateConfigContentReq struct {
	BizId    string `protobuf:"bytes,1,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId    string `protobuf:"bytes,2,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	CommitId string `protobuf:"bytes,3,opt,name=commit_id,json=commitId" json:"commit_id,omitempty"`
	// 内容索引策略，用于节点索引指定版本的配置内容. 支持多个标签，每个标签之间为逻辑或关系. 格式：KV, map type / JSON KV, key为目标标签名称，value为标签规则表达式，格式为OP|VALUES,
	// OP可以为eq(默认为空也按eq处理)等于、ne不等于、gt大于、lt小于、ge大于等于、le小于等于, VALUES可以为单独的标签值或多个标签值例如1,2,3 其表示
	// IN(1,2,3)的语意. OP和VALUES之间用竖线分割. 注意：以往协议中没有OP表达式支持的情况，即为空OP按照eq等于处理.
	LabelsOr []*common.LabelsMap `protobuf:"bytes,4,rep,name=labels_or,json=labelsOr" json:"labels_or,omitempty"`
	// 内容索引策略，用于节点索引指定版本的配置内容. 支持多个标签，每个标签之间为逻辑与关系. 格式：KV, map type / JSON KV, key为目标标签名称，value为标签规则表达式，格式为OP|VALUES,
	// OP可以为eq(默认为空也按eq处理)等于、ne不等于、gt大于、lt小于、ge大于等于、le小于等于, VALUES可以为单独的标签值或多个标签值例如1,2,3 其表示
	// IN(1,2,3)的语意. OP和VALUES之间用竖线分割. 注意：以往协议中没有OP表达式支持的情况，即为空OP按照eq等于处理.
	LabelsAnd   []*common.LabelsMap `protobuf:"bytes,5,rep,name=labels_and,json=labelsAnd" json:"labels_and,omitempty"`
	ContentId   string              `protobuf:"bytes,6,opt,name=content_id,json=contentId" json:"content_id,omitempty"`
	ContentSize uint32              `protobuf:"varint,7,opt,name=content_size,json=contentSize" json:"content_size,omitempty"`
	Memo        string              `protobuf:"bytes,8,opt,name=memo" json:"memo,omitempty"`
}

func (m *CreateConfigContentReq) Reset()                    { *m = CreateConfigContentReq{} }
func (m *CreateConfigContentReq) String() string            { return proto.CompactTextString(m) }
func (*CreateConfigContentReq) ProtoMessage()               {}
func (*CreateConfigContentReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *CreateConfigContentReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *CreateConfigContentReq) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *CreateConfigContentReq) GetCommitId() string {
	if m != nil {
		return m.CommitId
	}
	return ""
}

func (m *CreateConfigContentReq) GetLabelsOr() []*common.LabelsMap {
	if m != nil {
		return m.LabelsOr
	}
	return nil
}

func (m *CreateConfigContentReq) GetLabelsAnd() []*common.LabelsMap {
	if m != nil {
		return m.LabelsAnd
	}
	return nil
}

func (m *CreateConfigContentReq) GetContentId() string {
	if m != nil {
		return m.ContentId
	}
	return ""
}

func (m *CreateConfigContentReq) GetContentSize() uint32 {
	if m != nil {
		return m.ContentSize
	}
	return 0
}

func (m *CreateConfigContentReq) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

type CreateConfigContentResp struct {
	Result  bool           `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Code    common.ErrCode `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string         `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *CreateConfigContentResp) Reset()                    { *m = CreateConfigContentResp{} }
func (m *CreateConfigContentResp) String() string            { return proto.CompactTextString(m) }
func (*CreateConfigContentResp) ProtoMessage()               {}
func (*CreateConfigContentResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *CreateConfigContentResp) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *CreateConfigContentResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *CreateConfigContentResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type QueryConfigContentReq struct {
	BizId    string            `protobuf:"bytes,1,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId    string            `protobuf:"bytes,2,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	CommitId string            `protobuf:"bytes,3,opt,name=commit_id,json=commitId" json:"commit_id,omitempty"`
	Labels   map[string]string `protobuf:"bytes,4,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *QueryConfigContentReq) Reset()                    { *m = QueryConfigContentReq{} }
func (m *QueryConfigContentReq) String() string            { return proto.CompactTextString(m) }
func (*QueryConfigContentReq) ProtoMessage()               {}
func (*QueryConfigContentReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *QueryConfigContentReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *QueryConfigContentReq) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *QueryConfigContentReq) GetCommitId() string {
	if m != nil {
		return m.CommitId
	}
	return ""
}

func (m *QueryConfigContentReq) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

type QueryConfigContentResp struct {
	Result  bool            `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Code    common.ErrCode  `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string          `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    *common.Content `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *QueryConfigContentResp) Reset()                    { *m = QueryConfigContentResp{} }
func (m *QueryConfigContentResp) String() string            { return proto.CompactTextString(m) }
func (*QueryConfigContentResp) ProtoMessage()               {}
func (*QueryConfigContentResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *QueryConfigContentResp) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *QueryConfigContentResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *QueryConfigContentResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *QueryConfigContentResp) GetData() *common.Content {
	if m != nil {
		return m.Data
	}
	return nil
}

type QueryConfigContentListReq struct {
	BizId    string       `protobuf:"bytes,1,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId    string       `protobuf:"bytes,2,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	CommitId string       `protobuf:"bytes,3,opt,name=commit_id,json=commitId" json:"commit_id,omitempty"`
	Page     *common.Page `protobuf:"bytes,4,opt,name=page" json:"page,omitempty"`
}

func (m *QueryConfigContentListReq) Reset()                    { *m = QueryConfigContentListReq{} }
func (m *QueryConfigContentListReq) String() string            { return proto.CompactTextString(m) }
func (*QueryConfigContentListReq) ProtoMessage()               {}
func (*QueryConfigContentListReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *QueryConfigContentListReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *QueryConfigContentListReq) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *QueryConfigContentListReq) GetCommitId() string {
	if m != nil {
		return m.CommitId
	}
	return ""
}

func (m *QueryConfigContentListReq) GetPage() *common.Page {
	if m != nil {
		return m.Page
	}
	return nil
}

type QueryConfigContentListResp struct {
	Result  bool                                 `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Code    common.ErrCode                       `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string                               `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    *QueryConfigContentListResp_RespData `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *QueryConfigContentListResp) Reset()                    { *m = QueryConfigContentListResp{} }
func (m *QueryConfigContentListResp) String() string            { return proto.CompactTextString(m) }
func (*QueryConfigContentListResp) ProtoMessage()               {}
func (*QueryConfigContentListResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *QueryConfigContentListResp) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *QueryConfigContentListResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *QueryConfigContentListResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *QueryConfigContentListResp) GetData() *QueryConfigContentListResp_RespData {
	if m != nil {
		return m.Data
	}
	return nil
}

type QueryConfigContentListResp_RespData struct {
	TotalCount uint32            `protobuf:"varint,1,opt,name=total_count,json=totalCount" json:"total_count,omitempty"`
	Info       []*common.Content `protobuf:"bytes,2,rep,name=info" json:"info,omitempty"`
}

func (m *QueryConfigContentListResp_RespData) Reset()         { *m = QueryConfigContentListResp_RespData{} }
func (m *QueryConfigContentListResp_RespData) String() string { return proto.CompactTextString(m) }
func (*QueryConfigContentListResp_RespData) ProtoMessage()    {}
func (*QueryConfigContentListResp_RespData) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{25, 0}
}

func (m *QueryConfigContentListResp_RespData) GetTotalCount() uint32 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *QueryConfigContentListResp_RespData) GetInfo() []*common.Content {
	if m != nil {
		return m.Info
	}
	return nil
}

type QueryReleaseConfigContentReq struct {
	BizId    string            `protobuf:"bytes,1,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId    string            `protobuf:"bytes,2,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	CloudId  string            `protobuf:"bytes,3,opt,name=cloud_id,json=cloudId" json:"cloud_id,omitempty"`
	Ip       string            `protobuf:"bytes,4,opt,name=ip" json:"ip,omitempty"`
	Path     string            `protobuf:"bytes,5,opt,name=path" json:"path,omitempty"`
	Labels   map[string]string `protobuf:"bytes,6,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	CommitId string            `protobuf:"bytes,7,opt,name=commit_id,json=commitId" json:"commit_id,omitempty"`
}

func (m *QueryReleaseConfigContentReq) Reset()                    { *m = QueryReleaseConfigContentReq{} }
func (m *QueryReleaseConfigContentReq) String() string            { return proto.CompactTextString(m) }
func (*QueryReleaseConfigContentReq) ProtoMessage()               {}
func (*QueryReleaseConfigContentReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *QueryReleaseConfigContentReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *QueryReleaseConfigContentReq) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *QueryReleaseConfigContentReq) GetCloudId() string {
	if m != nil {
		return m.CloudId
	}
	return ""
}

func (m *QueryReleaseConfigContentReq) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *QueryReleaseConfigContentReq) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *QueryReleaseConfigContentReq) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *QueryReleaseConfigContentReq) GetCommitId() string {
	if m != nil {
		return m.CommitId
	}
	return ""
}

type QueryReleaseConfigContentResp struct {
	Result  bool            `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Code    common.ErrCode  `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string          `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    *common.Content `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *QueryReleaseConfigContentResp) Reset()                    { *m = QueryReleaseConfigContentResp{} }
func (m *QueryReleaseConfigContentResp) String() string            { return proto.CompactTextString(m) }
func (*QueryReleaseConfigContentResp) ProtoMessage()               {}
func (*QueryReleaseConfigContentResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *QueryReleaseConfigContentResp) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *QueryReleaseConfigContentResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *QueryReleaseConfigContentResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *QueryReleaseConfigContentResp) GetData() *common.Content {
	if m != nil {
		return m.Data
	}
	return nil
}

type CreateCommitReq struct {
	BizId      string `protobuf:"bytes,1,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId      string `protobuf:"bytes,2,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	CfgId      string `protobuf:"bytes,3,opt,name=cfg_id,json=cfgId" json:"cfg_id,omitempty"`
	CommitMode int32  `protobuf:"varint,4,opt,name=commit_mode,json=commitMode" json:"commit_mode,omitempty"`
	Memo       string `protobuf:"bytes,5,opt,name=memo" json:"memo,omitempty"`
}

func (m *CreateCommitReq) Reset()                    { *m = CreateCommitReq{} }
func (m *CreateCommitReq) String() string            { return proto.CompactTextString(m) }
func (*CreateCommitReq) ProtoMessage()               {}
func (*CreateCommitReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *CreateCommitReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *CreateCommitReq) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *CreateCommitReq) GetCfgId() string {
	if m != nil {
		return m.CfgId
	}
	return ""
}

func (m *CreateCommitReq) GetCommitMode() int32 {
	if m != nil {
		return m.CommitMode
	}
	return 0
}

func (m *CreateCommitReq) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

type CreateCommitResp struct {
	Result  bool                       `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Code    common.ErrCode             `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string                     `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    *CreateCommitResp_RespData `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *CreateCommitResp) Reset()                    { *m = CreateCommitResp{} }
func (m *CreateCommitResp) String() string            { return proto.CompactTextString(m) }
func (*CreateCommitResp) ProtoMessage()               {}
func (*CreateCommitResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *CreateCommitResp) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *CreateCommitResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *CreateCommitResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *CreateCommitResp) GetData() *CreateCommitResp_RespData {
	if m != nil {
		return m.Data
	}
	return nil
}

type CreateCommitResp_RespData struct {
	CommitId string `protobuf:"bytes,1,opt,name=commit_id,json=commitId" json:"commit_id,omitempty"`
}

func (m *CreateCommitResp_RespData) Reset()                    { *m = CreateCommitResp_RespData{} }
func (m *CreateCommitResp_RespData) String() string            { return proto.CompactTextString(m) }
func (*CreateCommitResp_RespData) ProtoMessage()               {}
func (*CreateCommitResp_RespData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29, 0} }

func (m *CreateCommitResp_RespData) GetCommitId() string {
	if m != nil {
		return m.CommitId
	}
	return ""
}

type QueryCommitReq struct {
	BizId    string `protobuf:"bytes,1,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId    string `protobuf:"bytes,2,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	CommitId string `protobuf:"bytes,3,opt,name=commit_id,json=commitId" json:"commit_id,omitempty"`
}

func (m *QueryCommitReq) Reset()                    { *m = QueryCommitReq{} }
func (m *QueryCommitReq) String() string            { return proto.CompactTextString(m) }
func (*QueryCommitReq) ProtoMessage()               {}
func (*QueryCommitReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *QueryCommitReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *QueryCommitReq) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *QueryCommitReq) GetCommitId() string {
	if m != nil {
		return m.CommitId
	}
	return ""
}

type QueryCommitResp struct {
	Result  bool           `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Code    common.ErrCode `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string         `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    *common.Commit `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *QueryCommitResp) Reset()                    { *m = QueryCommitResp{} }
func (m *QueryCommitResp) String() string            { return proto.CompactTextString(m) }
func (*QueryCommitResp) ProtoMessage()               {}
func (*QueryCommitResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *QueryCommitResp) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *QueryCommitResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *QueryCommitResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *QueryCommitResp) GetData() *common.Commit {
	if m != nil {
		return m.Data
	}
	return nil
}

type QueryHistoryCommitsReq struct {
	BizId     string       `protobuf:"bytes,1,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId     string       `protobuf:"bytes,2,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	CfgId     string       `protobuf:"bytes,3,opt,name=cfg_id,json=cfgId" json:"cfg_id,omitempty"`
	Operator  string       `protobuf:"bytes,4,opt,name=operator" json:"operator,omitempty"`
	QueryType int32        `protobuf:"varint,5,opt,name=query_type,json=queryType" json:"query_type,omitempty"`
	Page      *common.Page `protobuf:"bytes,6,opt,name=page" json:"page,omitempty"`
}

func (m *QueryHistoryCommitsReq) Reset()                    { *m = QueryHistoryCommitsReq{} }
func (m *QueryHistoryCommitsReq) String() string            { return proto.CompactTextString(m) }
func (*QueryHistoryCommitsReq) ProtoMessage()               {}
func (*QueryHistoryCommitsReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *QueryHistoryCommitsReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *QueryHistoryCommitsReq) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *QueryHistoryCommitsReq) GetCfgId() string {
	if m != nil {
		return m.CfgId
	}
	return ""
}

func (m *QueryHistoryCommitsReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *QueryHistoryCommitsReq) GetQueryType() int32 {
	if m != nil {
		return m.QueryType
	}
	return 0
}

func (m *QueryHistoryCommitsReq) GetPage() *common.Page {
	if m != nil {
		return m.Page
	}
	return nil
}

type QueryHistoryCommitsResp struct {
	Result  bool                              `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Code    common.ErrCode                    `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string                            `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    *QueryHistoryCommitsResp_RespData `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *QueryHistoryCommitsResp) Reset()                    { *m = QueryHistoryCommitsResp{} }
func (m *QueryHistoryCommitsResp) String() string            { return proto.CompactTextString(m) }
func (*QueryHistoryCommitsResp) ProtoMessage()               {}
func (*QueryHistoryCommitsResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *QueryHistoryCommitsResp) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *QueryHistoryCommitsResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *QueryHistoryCommitsResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *QueryHistoryCommitsResp) GetData() *QueryHistoryCommitsResp_RespData {
	if m != nil {
		return m.Data
	}
	return nil
}

type QueryHistoryCommitsResp_RespData struct {
	TotalCount uint32           `protobuf:"varint,1,opt,name=total_count,json=totalCount" json:"total_count,omitempty"`
	Info       []*common.Commit `protobuf:"bytes,2,rep,name=info" json:"info,omitempty"`
}

func (m *QueryHistoryCommitsResp_RespData) Reset()         { *m = QueryHistoryCommitsResp_RespData{} }
func (m *QueryHistoryCommitsResp_RespData) String() string { return proto.CompactTextString(m) }
func (*QueryHistoryCommitsResp_RespData) ProtoMessage()    {}
func (*QueryHistoryCommitsResp_RespData) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{33, 0}
}

func (m *QueryHistoryCommitsResp_RespData) GetTotalCount() uint32 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *QueryHistoryCommitsResp_RespData) GetInfo() []*common.Commit {
	if m != nil {
		return m.Info
	}
	return nil
}

type UpdateCommitReq struct {
	BizId      string `protobuf:"bytes,1,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId      string `protobuf:"bytes,2,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	CommitId   string `protobuf:"bytes,3,opt,name=commit_id,json=commitId" json:"commit_id,omitempty"`
	CommitMode int32  `protobuf:"varint,4,opt,name=commit_mode,json=commitMode" json:"commit_mode,omitempty"`
	Memo       string `protobuf:"bytes,5,opt,name=memo" json:"memo,omitempty"`
}

func (m *UpdateCommitReq) Reset()                    { *m = UpdateCommitReq{} }
func (m *UpdateCommitReq) String() string            { return proto.CompactTextString(m) }
func (*UpdateCommitReq) ProtoMessage()               {}
func (*UpdateCommitReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

func (m *UpdateCommitReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *UpdateCommitReq) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *UpdateCommitReq) GetCommitId() string {
	if m != nil {
		return m.CommitId
	}
	return ""
}

func (m *UpdateCommitReq) GetCommitMode() int32 {
	if m != nil {
		return m.CommitMode
	}
	return 0
}

func (m *UpdateCommitReq) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

type UpdateCommitResp struct {
	Result  bool           `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Code    common.ErrCode `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string         `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *UpdateCommitResp) Reset()                    { *m = UpdateCommitResp{} }
func (m *UpdateCommitResp) String() string            { return proto.CompactTextString(m) }
func (*UpdateCommitResp) ProtoMessage()               {}
func (*UpdateCommitResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

func (m *UpdateCommitResp) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *UpdateCommitResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *UpdateCommitResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type CancelCommitReq struct {
	BizId    string `protobuf:"bytes,1,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId    string `protobuf:"bytes,2,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	CommitId string `protobuf:"bytes,3,opt,name=commit_id,json=commitId" json:"commit_id,omitempty"`
}

func (m *CancelCommitReq) Reset()                    { *m = CancelCommitReq{} }
func (m *CancelCommitReq) String() string            { return proto.CompactTextString(m) }
func (*CancelCommitReq) ProtoMessage()               {}
func (*CancelCommitReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

func (m *CancelCommitReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *CancelCommitReq) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *CancelCommitReq) GetCommitId() string {
	if m != nil {
		return m.CommitId
	}
	return ""
}

type CancelCommitResp struct {
	Result  bool           `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Code    common.ErrCode `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string         `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *CancelCommitResp) Reset()                    { *m = CancelCommitResp{} }
func (m *CancelCommitResp) String() string            { return proto.CompactTextString(m) }
func (*CancelCommitResp) ProtoMessage()               {}
func (*CancelCommitResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

func (m *CancelCommitResp) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *CancelCommitResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *CancelCommitResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type ConfirmCommitReq struct {
	BizId    string `protobuf:"bytes,1,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId    string `protobuf:"bytes,2,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	CommitId string `protobuf:"bytes,3,opt,name=commit_id,json=commitId" json:"commit_id,omitempty"`
}

func (m *ConfirmCommitReq) Reset()                    { *m = ConfirmCommitReq{} }
func (m *ConfirmCommitReq) String() string            { return proto.CompactTextString(m) }
func (*ConfirmCommitReq) ProtoMessage()               {}
func (*ConfirmCommitReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

func (m *ConfirmCommitReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *ConfirmCommitReq) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *ConfirmCommitReq) GetCommitId() string {
	if m != nil {
		return m.CommitId
	}
	return ""
}

type ConfirmCommitResp struct {
	Result  bool           `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Code    common.ErrCode `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string         `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *ConfirmCommitResp) Reset()                    { *m = ConfirmCommitResp{} }
func (m *ConfirmCommitResp) String() string            { return proto.CompactTextString(m) }
func (*ConfirmCommitResp) ProtoMessage()               {}
func (*ConfirmCommitResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{39} }

func (m *ConfirmCommitResp) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *ConfirmCommitResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *ConfirmCommitResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type CreateMultiCommitWithContentReq struct {
	BizId     string                              `protobuf:"bytes,1,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId     string                              `protobuf:"bytes,2,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	Memo      string                              `protobuf:"bytes,3,opt,name=memo" json:"memo,omitempty"`
	Metadatas []*common.CommitMetadataWithContent `protobuf:"bytes,4,rep,name=metadatas" json:"metadatas,omitempty"`
}

func (m *CreateMultiCommitWithContentReq) Reset()         { *m = CreateMultiCommitWithContentReq{} }
func (m *CreateMultiCommitWithContentReq) String() string { return proto.CompactTextString(m) }
func (*CreateMultiCommitWithContentReq) ProtoMessage()    {}
func (*CreateMultiCommitWithContentReq) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{40}
}

func (m *CreateMultiCommitWithContentReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *CreateMultiCommitWithContentReq) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *CreateMultiCommitWithContentReq) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *CreateMultiCommitWithContentReq) GetMetadatas() []*common.CommitMetadataWithContent {
	if m != nil {
		return m.Metadatas
	}
	return nil
}

type CreateMultiCommitWithContentResp struct {
	Result  bool                                       `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Code    common.ErrCode                             `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string                                     `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    *CreateMultiCommitWithContentResp_RespData `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *CreateMultiCommitWithContentResp) Reset()         { *m = CreateMultiCommitWithContentResp{} }
func (m *CreateMultiCommitWithContentResp) String() string { return proto.CompactTextString(m) }
func (*CreateMultiCommitWithContentResp) ProtoMessage()    {}
func (*CreateMultiCommitWithContentResp) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{41}
}

func (m *CreateMultiCommitWithContentResp) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *CreateMultiCommitWithContentResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *CreateMultiCommitWithContentResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *CreateMultiCommitWithContentResp) GetData() *CreateMultiCommitWithContentResp_RespData {
	if m != nil {
		return m.Data
	}
	return nil
}

type CreateMultiCommitWithContentResp_RespData struct {
	MultiCommitId string `protobuf:"bytes,1,opt,name=multi_commit_id,json=multiCommitId" json:"multi_commit_id,omitempty"`
}

func (m *CreateMultiCommitWithContentResp_RespData) Reset() {
	*m = CreateMultiCommitWithContentResp_RespData{}
}
func (m *CreateMultiCommitWithContentResp_RespData) String() string { return proto.CompactTextString(m) }
func (*CreateMultiCommitWithContentResp_RespData) ProtoMessage()    {}
func (*CreateMultiCommitWithContentResp_RespData) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{41, 0}
}

func (m *CreateMultiCommitWithContentResp_RespData) GetMultiCommitId() string {
	if m != nil {
		return m.MultiCommitId
	}
	return ""
}

type CreateMultiCommitReq struct {
	BizId     string                   `protobuf:"bytes,1,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId     string                   `protobuf:"bytes,2,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	Memo      string                   `protobuf:"bytes,3,opt,name=memo" json:"memo,omitempty"`
	Metadatas []*common.CommitMetadata `protobuf:"bytes,4,rep,name=metadatas" json:"metadatas,omitempty"`
}

func (m *CreateMultiCommitReq) Reset()                    { *m = CreateMultiCommitReq{} }
func (m *CreateMultiCommitReq) String() string            { return proto.CompactTextString(m) }
func (*CreateMultiCommitReq) ProtoMessage()               {}
func (*CreateMultiCommitReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{42} }

func (m *CreateMultiCommitReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *CreateMultiCommitReq) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *CreateMultiCommitReq) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *CreateMultiCommitReq) GetMetadatas() []*common.CommitMetadata {
	if m != nil {
		return m.Metadatas
	}
	return nil
}

type CreateMultiCommitResp struct {
	Result  bool                            `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Code    common.ErrCode                  `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string                          `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    *CreateMultiCommitResp_RespData `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *CreateMultiCommitResp) Reset()                    { *m = CreateMultiCommitResp{} }
func (m *CreateMultiCommitResp) String() string            { return proto.CompactTextString(m) }
func (*CreateMultiCommitResp) ProtoMessage()               {}
func (*CreateMultiCommitResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{43} }

func (m *CreateMultiCommitResp) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *CreateMultiCommitResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *CreateMultiCommitResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *CreateMultiCommitResp) GetData() *CreateMultiCommitResp_RespData {
	if m != nil {
		return m.Data
	}
	return nil
}

type CreateMultiCommitResp_RespData struct {
	MultiCommitId string `protobuf:"bytes,1,opt,name=multi_commit_id,json=multiCommitId" json:"multi_commit_id,omitempty"`
}

func (m *CreateMultiCommitResp_RespData) Reset()         { *m = CreateMultiCommitResp_RespData{} }
func (m *CreateMultiCommitResp_RespData) String() string { return proto.CompactTextString(m) }
func (*CreateMultiCommitResp_RespData) ProtoMessage()    {}
func (*CreateMultiCommitResp_RespData) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{43, 0}
}

func (m *CreateMultiCommitResp_RespData) GetMultiCommitId() string {
	if m != nil {
		return m.MultiCommitId
	}
	return ""
}

type QueryMultiCommitReq struct {
	BizId         string `protobuf:"bytes,1,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId         string `protobuf:"bytes,2,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	MultiCommitId string `protobuf:"bytes,3,opt,name=multi_commit_id,json=multiCommitId" json:"multi_commit_id,omitempty"`
}

func (m *QueryMultiCommitReq) Reset()                    { *m = QueryMultiCommitReq{} }
func (m *QueryMultiCommitReq) String() string            { return proto.CompactTextString(m) }
func (*QueryMultiCommitReq) ProtoMessage()               {}
func (*QueryMultiCommitReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{44} }

func (m *QueryMultiCommitReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *QueryMultiCommitReq) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *QueryMultiCommitReq) GetMultiCommitId() string {
	if m != nil {
		return m.MultiCommitId
	}
	return ""
}

type QueryMultiCommitResp struct {
	Result  bool                           `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Code    common.ErrCode                 `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string                         `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    *QueryMultiCommitResp_RespData `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *QueryMultiCommitResp) Reset()                    { *m = QueryMultiCommitResp{} }
func (m *QueryMultiCommitResp) String() string            { return proto.CompactTextString(m) }
func (*QueryMultiCommitResp) ProtoMessage()               {}
func (*QueryMultiCommitResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{45} }

func (m *QueryMultiCommitResp) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *QueryMultiCommitResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *QueryMultiCommitResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *QueryMultiCommitResp) GetData() *QueryMultiCommitResp_RespData {
	if m != nil {
		return m.Data
	}
	return nil
}

type QueryMultiCommitResp_RespData struct {
	MultiCommit *common.MultiCommit      `protobuf:"bytes,1,opt,name=multi_commit,json=multiCommit" json:"multi_commit,omitempty"`
	Metadatas   []*common.CommitMetadata `protobuf:"bytes,2,rep,name=metadatas" json:"metadatas,omitempty"`
}

func (m *QueryMultiCommitResp_RespData) Reset()         { *m = QueryMultiCommitResp_RespData{} }
func (m *QueryMultiCommitResp_RespData) String() string { return proto.CompactTextString(m) }
func (*QueryMultiCommitResp_RespData) ProtoMessage()    {}
func (*QueryMultiCommitResp_RespData) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{45, 0}
}

func (m *QueryMultiCommitResp_RespData) GetMultiCommit() *common.MultiCommit {
	if m != nil {
		return m.MultiCommit
	}
	return nil
}

func (m *QueryMultiCommitResp_RespData) GetMetadatas() []*common.CommitMetadata {
	if m != nil {
		return m.Metadatas
	}
	return nil
}

type QueryHistoryMultiCommitsReq struct {
	BizId     string       `protobuf:"bytes,1,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId     string       `protobuf:"bytes,2,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	Operator  string       `protobuf:"bytes,3,opt,name=operator" json:"operator,omitempty"`
	QueryType int32        `protobuf:"varint,4,opt,name=query_type,json=queryType" json:"query_type,omitempty"`
	Page      *common.Page `protobuf:"bytes,5,opt,name=page" json:"page,omitempty"`
}

func (m *QueryHistoryMultiCommitsReq) Reset()                    { *m = QueryHistoryMultiCommitsReq{} }
func (m *QueryHistoryMultiCommitsReq) String() string            { return proto.CompactTextString(m) }
func (*QueryHistoryMultiCommitsReq) ProtoMessage()               {}
func (*QueryHistoryMultiCommitsReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{46} }

func (m *QueryHistoryMultiCommitsReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *QueryHistoryMultiCommitsReq) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *QueryHistoryMultiCommitsReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *QueryHistoryMultiCommitsReq) GetQueryType() int32 {
	if m != nil {
		return m.QueryType
	}
	return 0
}

func (m *QueryHistoryMultiCommitsReq) GetPage() *common.Page {
	if m != nil {
		return m.Page
	}
	return nil
}

type QueryHistoryMultiCommitsResp struct {
	Result  bool                                   `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Code    common.ErrCode                         `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string                                 `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    *QueryHistoryMultiCommitsResp_RespData `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *QueryHistoryMultiCommitsResp) Reset()                    { *m = QueryHistoryMultiCommitsResp{} }
func (m *QueryHistoryMultiCommitsResp) String() string            { return proto.CompactTextString(m) }
func (*QueryHistoryMultiCommitsResp) ProtoMessage()               {}
func (*QueryHistoryMultiCommitsResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{47} }

func (m *QueryHistoryMultiCommitsResp) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *QueryHistoryMultiCommitsResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *QueryHistoryMultiCommitsResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *QueryHistoryMultiCommitsResp) GetData() *QueryHistoryMultiCommitsResp_RespData {
	if m != nil {
		return m.Data
	}
	return nil
}

type QueryHistoryMultiCommitsResp_RespData struct {
	TotalCount uint32                `protobuf:"varint,1,opt,name=total_count,json=totalCount" json:"total_count,omitempty"`
	Info       []*common.MultiCommit `protobuf:"bytes,2,rep,name=info" json:"info,omitempty"`
}

func (m *QueryHistoryMultiCommitsResp_RespData) Reset()         { *m = QueryHistoryMultiCommitsResp_RespData{} }
func (m *QueryHistoryMultiCommitsResp_RespData) String() string { return proto.CompactTextString(m) }
func (*QueryHistoryMultiCommitsResp_RespData) ProtoMessage()    {}
func (*QueryHistoryMultiCommitsResp_RespData) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{47, 0}
}

func (m *QueryHistoryMultiCommitsResp_RespData) GetTotalCount() uint32 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *QueryHistoryMultiCommitsResp_RespData) GetInfo() []*common.MultiCommit {
	if m != nil {
		return m.Info
	}
	return nil
}

type UpdateMultiCommitReq struct {
	BizId         string `protobuf:"bytes,1,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId         string `protobuf:"bytes,2,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	MultiCommitId string `protobuf:"bytes,3,opt,name=multi_commit_id,json=multiCommitId" json:"multi_commit_id,omitempty"`
	Memo          string `protobuf:"bytes,4,opt,name=memo" json:"memo,omitempty"`
}

func (m *UpdateMultiCommitReq) Reset()                    { *m = UpdateMultiCommitReq{} }
func (m *UpdateMultiCommitReq) String() string            { return proto.CompactTextString(m) }
func (*UpdateMultiCommitReq) ProtoMessage()               {}
func (*UpdateMultiCommitReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{48} }

func (m *UpdateMultiCommitReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *UpdateMultiCommitReq) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *UpdateMultiCommitReq) GetMultiCommitId() string {
	if m != nil {
		return m.MultiCommitId
	}
	return ""
}

func (m *UpdateMultiCommitReq) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

type UpdateMultiCommitResp struct {
	Result  bool           `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Code    common.ErrCode `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string         `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *UpdateMultiCommitResp) Reset()                    { *m = UpdateMultiCommitResp{} }
func (m *UpdateMultiCommitResp) String() string            { return proto.CompactTextString(m) }
func (*UpdateMultiCommitResp) ProtoMessage()               {}
func (*UpdateMultiCommitResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{49} }

func (m *UpdateMultiCommitResp) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *UpdateMultiCommitResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *UpdateMultiCommitResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type CancelMultiCommitReq struct {
	BizId         string `protobuf:"bytes,1,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId         string `protobuf:"bytes,2,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	MultiCommitId string `protobuf:"bytes,3,opt,name=multi_commit_id,json=multiCommitId" json:"multi_commit_id,omitempty"`
}

func (m *CancelMultiCommitReq) Reset()                    { *m = CancelMultiCommitReq{} }
func (m *CancelMultiCommitReq) String() string            { return proto.CompactTextString(m) }
func (*CancelMultiCommitReq) ProtoMessage()               {}
func (*CancelMultiCommitReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{50} }

func (m *CancelMultiCommitReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *CancelMultiCommitReq) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *CancelMultiCommitReq) GetMultiCommitId() string {
	if m != nil {
		return m.MultiCommitId
	}
	return ""
}

type CancelMultiCommitResp struct {
	Result  bool           `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Code    common.ErrCode `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string         `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *CancelMultiCommitResp) Reset()                    { *m = CancelMultiCommitResp{} }
func (m *CancelMultiCommitResp) String() string            { return proto.CompactTextString(m) }
func (*CancelMultiCommitResp) ProtoMessage()               {}
func (*CancelMultiCommitResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{51} }

func (m *CancelMultiCommitResp) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *CancelMultiCommitResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *CancelMultiCommitResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type ConfirmMultiCommitReq struct {
	BizId         string `protobuf:"bytes,1,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId         string `protobuf:"bytes,2,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	MultiCommitId string `protobuf:"bytes,3,opt,name=multi_commit_id,json=multiCommitId" json:"multi_commit_id,omitempty"`
}

func (m *ConfirmMultiCommitReq) Reset()                    { *m = ConfirmMultiCommitReq{} }
func (m *ConfirmMultiCommitReq) String() string            { return proto.CompactTextString(m) }
func (*ConfirmMultiCommitReq) ProtoMessage()               {}
func (*ConfirmMultiCommitReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{52} }

func (m *ConfirmMultiCommitReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *ConfirmMultiCommitReq) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *ConfirmMultiCommitReq) GetMultiCommitId() string {
	if m != nil {
		return m.MultiCommitId
	}
	return ""
}

type ConfirmMultiCommitResp struct {
	Result  bool           `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Code    common.ErrCode `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string         `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *ConfirmMultiCommitResp) Reset()                    { *m = ConfirmMultiCommitResp{} }
func (m *ConfirmMultiCommitResp) String() string            { return proto.CompactTextString(m) }
func (*ConfirmMultiCommitResp) ProtoMessage()               {}
func (*ConfirmMultiCommitResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{53} }

func (m *ConfirmMultiCommitResp) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *ConfirmMultiCommitResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *ConfirmMultiCommitResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type CreateReleaseReq struct {
	BizId      string `protobuf:"bytes,1,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId      string `protobuf:"bytes,2,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	Name       string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	CommitId   string `protobuf:"bytes,4,opt,name=commit_id,json=commitId" json:"commit_id,omitempty"`
	StrategyId string `protobuf:"bytes,5,opt,name=strategy_id,json=strategyId" json:"strategy_id,omitempty"`
	Memo       string `protobuf:"bytes,6,opt,name=memo" json:"memo,omitempty"`
}

func (m *CreateReleaseReq) Reset()                    { *m = CreateReleaseReq{} }
func (m *CreateReleaseReq) String() string            { return proto.CompactTextString(m) }
func (*CreateReleaseReq) ProtoMessage()               {}
func (*CreateReleaseReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{54} }

func (m *CreateReleaseReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *CreateReleaseReq) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *CreateReleaseReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateReleaseReq) GetCommitId() string {
	if m != nil {
		return m.CommitId
	}
	return ""
}

func (m *CreateReleaseReq) GetStrategyId() string {
	if m != nil {
		return m.StrategyId
	}
	return ""
}

func (m *CreateReleaseReq) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

type CreateReleaseResp struct {
	Result  bool                        `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Code    common.ErrCode              `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string                      `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    *CreateReleaseResp_RespData `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *CreateReleaseResp) Reset()                    { *m = CreateReleaseResp{} }
func (m *CreateReleaseResp) String() string            { return proto.CompactTextString(m) }
func (*CreateReleaseResp) ProtoMessage()               {}
func (*CreateReleaseResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{55} }

func (m *CreateReleaseResp) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *CreateReleaseResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *CreateReleaseResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *CreateReleaseResp) GetData() *CreateReleaseResp_RespData {
	if m != nil {
		return m.Data
	}
	return nil
}

type CreateReleaseResp_RespData struct {
	ReleaseId string `protobuf:"bytes,1,opt,name=release_id,json=releaseId" json:"release_id,omitempty"`
}

func (m *CreateReleaseResp_RespData) Reset()                    { *m = CreateReleaseResp_RespData{} }
func (m *CreateReleaseResp_RespData) String() string            { return proto.CompactTextString(m) }
func (*CreateReleaseResp_RespData) ProtoMessage()               {}
func (*CreateReleaseResp_RespData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{55, 0} }

func (m *CreateReleaseResp_RespData) GetReleaseId() string {
	if m != nil {
		return m.ReleaseId
	}
	return ""
}

type QueryReleaseReq struct {
	BizId     string `protobuf:"bytes,1,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId     string `protobuf:"bytes,2,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	ReleaseId string `protobuf:"bytes,3,opt,name=release_id,json=releaseId" json:"release_id,omitempty"`
}

func (m *QueryReleaseReq) Reset()                    { *m = QueryReleaseReq{} }
func (m *QueryReleaseReq) String() string            { return proto.CompactTextString(m) }
func (*QueryReleaseReq) ProtoMessage()               {}
func (*QueryReleaseReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{56} }

func (m *QueryReleaseReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *QueryReleaseReq) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *QueryReleaseReq) GetReleaseId() string {
	if m != nil {
		return m.ReleaseId
	}
	return ""
}

type QueryReleaseResp struct {
	Result  bool            `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Code    common.ErrCode  `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string          `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    *common.Release `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *QueryReleaseResp) Reset()                    { *m = QueryReleaseResp{} }
func (m *QueryReleaseResp) String() string            { return proto.CompactTextString(m) }
func (*QueryReleaseResp) ProtoMessage()               {}
func (*QueryReleaseResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{57} }

func (m *QueryReleaseResp) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *QueryReleaseResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *QueryReleaseResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *QueryReleaseResp) GetData() *common.Release {
	if m != nil {
		return m.Data
	}
	return nil
}

type QueryHistoryReleasesReq struct {
	BizId     string       `protobuf:"bytes,1,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId     string       `protobuf:"bytes,2,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	CfgId     string       `protobuf:"bytes,3,opt,name=cfg_id,json=cfgId" json:"cfg_id,omitempty"`
	Operator  string       `protobuf:"bytes,4,opt,name=operator" json:"operator,omitempty"`
	QueryType int32        `protobuf:"varint,5,opt,name=query_type,json=queryType" json:"query_type,omitempty"`
	OrderType int32        `protobuf:"varint,6,opt,name=order_type,json=orderType" json:"order_type,omitempty"`
	Page      *common.Page `protobuf:"bytes,7,opt,name=page" json:"page,omitempty"`
}

func (m *QueryHistoryReleasesReq) Reset()                    { *m = QueryHistoryReleasesReq{} }
func (m *QueryHistoryReleasesReq) String() string            { return proto.CompactTextString(m) }
func (*QueryHistoryReleasesReq) ProtoMessage()               {}
func (*QueryHistoryReleasesReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{58} }

func (m *QueryHistoryReleasesReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *QueryHistoryReleasesReq) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *QueryHistoryReleasesReq) GetCfgId() string {
	if m != nil {
		return m.CfgId
	}
	return ""
}

func (m *QueryHistoryReleasesReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *QueryHistoryReleasesReq) GetQueryType() int32 {
	if m != nil {
		return m.QueryType
	}
	return 0
}

func (m *QueryHistoryReleasesReq) GetOrderType() int32 {
	if m != nil {
		return m.OrderType
	}
	return 0
}

func (m *QueryHistoryReleasesReq) GetPage() *common.Page {
	if m != nil {
		return m.Page
	}
	return nil
}

type QueryHistoryReleasesResp struct {
	Result  bool                               `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Code    common.ErrCode                     `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string                             `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    *QueryHistoryReleasesResp_RespData `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *QueryHistoryReleasesResp) Reset()                    { *m = QueryHistoryReleasesResp{} }
func (m *QueryHistoryReleasesResp) String() string            { return proto.CompactTextString(m) }
func (*QueryHistoryReleasesResp) ProtoMessage()               {}
func (*QueryHistoryReleasesResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{59} }

func (m *QueryHistoryReleasesResp) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *QueryHistoryReleasesResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *QueryHistoryReleasesResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *QueryHistoryReleasesResp) GetData() *QueryHistoryReleasesResp_RespData {
	if m != nil {
		return m.Data
	}
	return nil
}

type QueryHistoryReleasesResp_RespData struct {
	TotalCount uint32            `protobuf:"varint,1,opt,name=total_count,json=totalCount" json:"total_count,omitempty"`
	Info       []*common.Release `protobuf:"bytes,2,rep,name=info" json:"info,omitempty"`
}

func (m *QueryHistoryReleasesResp_RespData) Reset()         { *m = QueryHistoryReleasesResp_RespData{} }
func (m *QueryHistoryReleasesResp_RespData) String() string { return proto.CompactTextString(m) }
func (*QueryHistoryReleasesResp_RespData) ProtoMessage()    {}
func (*QueryHistoryReleasesResp_RespData) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{59, 0}
}

func (m *QueryHistoryReleasesResp_RespData) GetTotalCount() uint32 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *QueryHistoryReleasesResp_RespData) GetInfo() []*common.Release {
	if m != nil {
		return m.Info
	}
	return nil
}

type UpdateReleaseReq struct {
	BizId     string `protobuf:"bytes,1,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId     string `protobuf:"bytes,2,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	ReleaseId string `protobuf:"bytes,3,opt,name=release_id,json=releaseId" json:"release_id,omitempty"`
	Name      string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	Memo      string `protobuf:"bytes,5,opt,name=memo" json:"memo,omitempty"`
}

func (m *UpdateReleaseReq) Reset()                    { *m = UpdateReleaseReq{} }
func (m *UpdateReleaseReq) String() string            { return proto.CompactTextString(m) }
func (*UpdateReleaseReq) ProtoMessage()               {}
func (*UpdateReleaseReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{60} }

func (m *UpdateReleaseReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *UpdateReleaseReq) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *UpdateReleaseReq) GetReleaseId() string {
	if m != nil {
		return m.ReleaseId
	}
	return ""
}

func (m *UpdateReleaseReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateReleaseReq) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

type UpdateReleaseResp struct {
	Result  bool           `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Code    common.ErrCode `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string         `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *UpdateReleaseResp) Reset()                    { *m = UpdateReleaseResp{} }
func (m *UpdateReleaseResp) String() string            { return proto.CompactTextString(m) }
func (*UpdateReleaseResp) ProtoMessage()               {}
func (*UpdateReleaseResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{61} }

func (m *UpdateReleaseResp) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *UpdateReleaseResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *UpdateReleaseResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type CancelReleaseReq struct {
	BizId     string `protobuf:"bytes,1,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId     string `protobuf:"bytes,2,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	ReleaseId string `protobuf:"bytes,3,opt,name=release_id,json=releaseId" json:"release_id,omitempty"`
}

func (m *CancelReleaseReq) Reset()                    { *m = CancelReleaseReq{} }
func (m *CancelReleaseReq) String() string            { return proto.CompactTextString(m) }
func (*CancelReleaseReq) ProtoMessage()               {}
func (*CancelReleaseReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{62} }

func (m *CancelReleaseReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *CancelReleaseReq) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *CancelReleaseReq) GetReleaseId() string {
	if m != nil {
		return m.ReleaseId
	}
	return ""
}

type CancelReleaseResp struct {
	Result  bool           `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Code    common.ErrCode `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string         `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *CancelReleaseResp) Reset()                    { *m = CancelReleaseResp{} }
func (m *CancelReleaseResp) String() string            { return proto.CompactTextString(m) }
func (*CancelReleaseResp) ProtoMessage()               {}
func (*CancelReleaseResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{63} }

func (m *CancelReleaseResp) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *CancelReleaseResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *CancelReleaseResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type PublishReleaseReq struct {
	BizId     string `protobuf:"bytes,1,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId     string `protobuf:"bytes,2,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	ReleaseId string `protobuf:"bytes,3,opt,name=release_id,json=releaseId" json:"release_id,omitempty"`
}

func (m *PublishReleaseReq) Reset()                    { *m = PublishReleaseReq{} }
func (m *PublishReleaseReq) String() string            { return proto.CompactTextString(m) }
func (*PublishReleaseReq) ProtoMessage()               {}
func (*PublishReleaseReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{64} }

func (m *PublishReleaseReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *PublishReleaseReq) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *PublishReleaseReq) GetReleaseId() string {
	if m != nil {
		return m.ReleaseId
	}
	return ""
}

type PublishReleaseResp struct {
	Result  bool           `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Code    common.ErrCode `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string         `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *PublishReleaseResp) Reset()                    { *m = PublishReleaseResp{} }
func (m *PublishReleaseResp) String() string            { return proto.CompactTextString(m) }
func (*PublishReleaseResp) ProtoMessage()               {}
func (*PublishReleaseResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{65} }

func (m *PublishReleaseResp) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *PublishReleaseResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *PublishReleaseResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type RollbackReleaseReq struct {
	BizId        string `protobuf:"bytes,1,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId        string `protobuf:"bytes,2,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	ReleaseId    string `protobuf:"bytes,3,opt,name=release_id,json=releaseId" json:"release_id,omitempty"`
	NewReleaseId string `protobuf:"bytes,4,opt,name=new_release_id,json=newReleaseId" json:"new_release_id,omitempty"`
}

func (m *RollbackReleaseReq) Reset()                    { *m = RollbackReleaseReq{} }
func (m *RollbackReleaseReq) String() string            { return proto.CompactTextString(m) }
func (*RollbackReleaseReq) ProtoMessage()               {}
func (*RollbackReleaseReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{66} }

func (m *RollbackReleaseReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *RollbackReleaseReq) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *RollbackReleaseReq) GetReleaseId() string {
	if m != nil {
		return m.ReleaseId
	}
	return ""
}

func (m *RollbackReleaseReq) GetNewReleaseId() string {
	if m != nil {
		return m.NewReleaseId
	}
	return ""
}

type RollbackReleaseResp struct {
	Result  bool                          `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Code    common.ErrCode                `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string                        `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    *RollbackReleaseResp_RespData `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *RollbackReleaseResp) Reset()                    { *m = RollbackReleaseResp{} }
func (m *RollbackReleaseResp) String() string            { return proto.CompactTextString(m) }
func (*RollbackReleaseResp) ProtoMessage()               {}
func (*RollbackReleaseResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{67} }

func (m *RollbackReleaseResp) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *RollbackReleaseResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *RollbackReleaseResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *RollbackReleaseResp) GetData() *RollbackReleaseResp_RespData {
	if m != nil {
		return m.Data
	}
	return nil
}

type RollbackReleaseResp_RespData struct {
	ReleaseId string `protobuf:"bytes,1,opt,name=release_id,json=releaseId" json:"release_id,omitempty"`
}

func (m *RollbackReleaseResp_RespData) Reset()         { *m = RollbackReleaseResp_RespData{} }
func (m *RollbackReleaseResp_RespData) String() string { return proto.CompactTextString(m) }
func (*RollbackReleaseResp_RespData) ProtoMessage()    {}
func (*RollbackReleaseResp_RespData) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{67, 0}
}

func (m *RollbackReleaseResp_RespData) GetReleaseId() string {
	if m != nil {
		return m.ReleaseId
	}
	return ""
}

type CreateMultiReleaseReq struct {
	BizId         string `protobuf:"bytes,1,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId         string `protobuf:"bytes,2,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	Name          string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	MultiCommitId string `protobuf:"bytes,4,opt,name=multi_commit_id,json=multiCommitId" json:"multi_commit_id,omitempty"`
	StrategyId    string `protobuf:"bytes,5,opt,name=strategy_id,json=strategyId" json:"strategy_id,omitempty"`
	Memo          string `protobuf:"bytes,6,opt,name=memo" json:"memo,omitempty"`
}

func (m *CreateMultiReleaseReq) Reset()                    { *m = CreateMultiReleaseReq{} }
func (m *CreateMultiReleaseReq) String() string            { return proto.CompactTextString(m) }
func (*CreateMultiReleaseReq) ProtoMessage()               {}
func (*CreateMultiReleaseReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{68} }

func (m *CreateMultiReleaseReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *CreateMultiReleaseReq) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *CreateMultiReleaseReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateMultiReleaseReq) GetMultiCommitId() string {
	if m != nil {
		return m.MultiCommitId
	}
	return ""
}

func (m *CreateMultiReleaseReq) GetStrategyId() string {
	if m != nil {
		return m.StrategyId
	}
	return ""
}

func (m *CreateMultiReleaseReq) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

type CreateMultiReleaseResp struct {
	Result  bool                             `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Code    common.ErrCode                   `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string                           `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    *CreateMultiReleaseResp_RespData `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *CreateMultiReleaseResp) Reset()                    { *m = CreateMultiReleaseResp{} }
func (m *CreateMultiReleaseResp) String() string            { return proto.CompactTextString(m) }
func (*CreateMultiReleaseResp) ProtoMessage()               {}
func (*CreateMultiReleaseResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{69} }

func (m *CreateMultiReleaseResp) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *CreateMultiReleaseResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *CreateMultiReleaseResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *CreateMultiReleaseResp) GetData() *CreateMultiReleaseResp_RespData {
	if m != nil {
		return m.Data
	}
	return nil
}

type CreateMultiReleaseResp_RespData struct {
	MultiReleaseId string `protobuf:"bytes,1,opt,name=multi_release_id,json=multiReleaseId" json:"multi_release_id,omitempty"`
}

func (m *CreateMultiReleaseResp_RespData) Reset()         { *m = CreateMultiReleaseResp_RespData{} }
func (m *CreateMultiReleaseResp_RespData) String() string { return proto.CompactTextString(m) }
func (*CreateMultiReleaseResp_RespData) ProtoMessage()    {}
func (*CreateMultiReleaseResp_RespData) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{69, 0}
}

func (m *CreateMultiReleaseResp_RespData) GetMultiReleaseId() string {
	if m != nil {
		return m.MultiReleaseId
	}
	return ""
}

type QueryMultiReleaseReq struct {
	BizId          string `protobuf:"bytes,1,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId          string `protobuf:"bytes,2,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	MultiReleaseId string `protobuf:"bytes,3,opt,name=multi_release_id,json=multiReleaseId" json:"multi_release_id,omitempty"`
}

func (m *QueryMultiReleaseReq) Reset()                    { *m = QueryMultiReleaseReq{} }
func (m *QueryMultiReleaseReq) String() string            { return proto.CompactTextString(m) }
func (*QueryMultiReleaseReq) ProtoMessage()               {}
func (*QueryMultiReleaseReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{70} }

func (m *QueryMultiReleaseReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *QueryMultiReleaseReq) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *QueryMultiReleaseReq) GetMultiReleaseId() string {
	if m != nil {
		return m.MultiReleaseId
	}
	return ""
}

type QueryMultiReleaseResp struct {
	Result  bool                            `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Code    common.ErrCode                  `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string                          `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    *QueryMultiReleaseResp_RespData `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *QueryMultiReleaseResp) Reset()                    { *m = QueryMultiReleaseResp{} }
func (m *QueryMultiReleaseResp) String() string            { return proto.CompactTextString(m) }
func (*QueryMultiReleaseResp) ProtoMessage()               {}
func (*QueryMultiReleaseResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{71} }

func (m *QueryMultiReleaseResp) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *QueryMultiReleaseResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *QueryMultiReleaseResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *QueryMultiReleaseResp) GetData() *QueryMultiReleaseResp_RespData {
	if m != nil {
		return m.Data
	}
	return nil
}

type QueryMultiReleaseResp_RespData struct {
	MultiRelease *common.MultiRelease      `protobuf:"bytes,1,opt,name=multi_release,json=multiRelease" json:"multi_release,omitempty"`
	Metadatas    []*common.ReleaseMetadata `protobuf:"bytes,2,rep,name=metadatas" json:"metadatas,omitempty"`
}

func (m *QueryMultiReleaseResp_RespData) Reset()         { *m = QueryMultiReleaseResp_RespData{} }
func (m *QueryMultiReleaseResp_RespData) String() string { return proto.CompactTextString(m) }
func (*QueryMultiReleaseResp_RespData) ProtoMessage()    {}
func (*QueryMultiReleaseResp_RespData) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{71, 0}
}

func (m *QueryMultiReleaseResp_RespData) GetMultiRelease() *common.MultiRelease {
	if m != nil {
		return m.MultiRelease
	}
	return nil
}

func (m *QueryMultiReleaseResp_RespData) GetMetadatas() []*common.ReleaseMetadata {
	if m != nil {
		return m.Metadatas
	}
	return nil
}

type QueryHistoryMultiReleasesReq struct {
	BizId     string       `protobuf:"bytes,1,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId     string       `protobuf:"bytes,2,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	Operator  string       `protobuf:"bytes,3,opt,name=operator" json:"operator,omitempty"`
	QueryType int32        `protobuf:"varint,4,opt,name=query_type,json=queryType" json:"query_type,omitempty"`
	OrderType int32        `protobuf:"varint,5,opt,name=order_type,json=orderType" json:"order_type,omitempty"`
	Page      *common.Page `protobuf:"bytes,6,opt,name=page" json:"page,omitempty"`
}

func (m *QueryHistoryMultiReleasesReq) Reset()                    { *m = QueryHistoryMultiReleasesReq{} }
func (m *QueryHistoryMultiReleasesReq) String() string            { return proto.CompactTextString(m) }
func (*QueryHistoryMultiReleasesReq) ProtoMessage()               {}
func (*QueryHistoryMultiReleasesReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{72} }

func (m *QueryHistoryMultiReleasesReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *QueryHistoryMultiReleasesReq) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *QueryHistoryMultiReleasesReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *QueryHistoryMultiReleasesReq) GetQueryType() int32 {
	if m != nil {
		return m.QueryType
	}
	return 0
}

func (m *QueryHistoryMultiReleasesReq) GetOrderType() int32 {
	if m != nil {
		return m.OrderType
	}
	return 0
}

func (m *QueryHistoryMultiReleasesReq) GetPage() *common.Page {
	if m != nil {
		return m.Page
	}
	return nil
}

type QueryHistoryMultiReleasesResp struct {
	Result  bool                                    `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Code    common.ErrCode                          `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string                                  `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    *QueryHistoryMultiReleasesResp_RespData `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *QueryHistoryMultiReleasesResp) Reset()                    { *m = QueryHistoryMultiReleasesResp{} }
func (m *QueryHistoryMultiReleasesResp) String() string            { return proto.CompactTextString(m) }
func (*QueryHistoryMultiReleasesResp) ProtoMessage()               {}
func (*QueryHistoryMultiReleasesResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{73} }

func (m *QueryHistoryMultiReleasesResp) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *QueryHistoryMultiReleasesResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *QueryHistoryMultiReleasesResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *QueryHistoryMultiReleasesResp) GetData() *QueryHistoryMultiReleasesResp_RespData {
	if m != nil {
		return m.Data
	}
	return nil
}

type QueryHistoryMultiReleasesResp_RespData struct {
	TotalCount uint32                 `protobuf:"varint,1,opt,name=total_count,json=totalCount" json:"total_count,omitempty"`
	Info       []*common.MultiRelease `protobuf:"bytes,2,rep,name=info" json:"info,omitempty"`
}

func (m *QueryHistoryMultiReleasesResp_RespData) Reset() {
	*m = QueryHistoryMultiReleasesResp_RespData{}
}
func (m *QueryHistoryMultiReleasesResp_RespData) String() string { return proto.CompactTextString(m) }
func (*QueryHistoryMultiReleasesResp_RespData) ProtoMessage()    {}
func (*QueryHistoryMultiReleasesResp_RespData) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{73, 0}
}

func (m *QueryHistoryMultiReleasesResp_RespData) GetTotalCount() uint32 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *QueryHistoryMultiReleasesResp_RespData) GetInfo() []*common.MultiRelease {
	if m != nil {
		return m.Info
	}
	return nil
}

type UpdateMultiReleaseReq struct {
	BizId          string `protobuf:"bytes,1,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId          string `protobuf:"bytes,2,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	MultiReleaseId string `protobuf:"bytes,3,opt,name=multi_release_id,json=multiReleaseId" json:"multi_release_id,omitempty"`
	Name           string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	Memo           string `protobuf:"bytes,5,opt,name=memo" json:"memo,omitempty"`
}

func (m *UpdateMultiReleaseReq) Reset()                    { *m = UpdateMultiReleaseReq{} }
func (m *UpdateMultiReleaseReq) String() string            { return proto.CompactTextString(m) }
func (*UpdateMultiReleaseReq) ProtoMessage()               {}
func (*UpdateMultiReleaseReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{74} }

func (m *UpdateMultiReleaseReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *UpdateMultiReleaseReq) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *UpdateMultiReleaseReq) GetMultiReleaseId() string {
	if m != nil {
		return m.MultiReleaseId
	}
	return ""
}

func (m *UpdateMultiReleaseReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateMultiReleaseReq) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

type UpdateMultiReleaseResp struct {
	Result  bool           `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Code    common.ErrCode `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string         `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *UpdateMultiReleaseResp) Reset()                    { *m = UpdateMultiReleaseResp{} }
func (m *UpdateMultiReleaseResp) String() string            { return proto.CompactTextString(m) }
func (*UpdateMultiReleaseResp) ProtoMessage()               {}
func (*UpdateMultiReleaseResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{75} }

func (m *UpdateMultiReleaseResp) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *UpdateMultiReleaseResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *UpdateMultiReleaseResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type CancelMultiReleaseReq struct {
	BizId          string `protobuf:"bytes,1,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId          string `protobuf:"bytes,2,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	MultiReleaseId string `protobuf:"bytes,3,opt,name=multi_release_id,json=multiReleaseId" json:"multi_release_id,omitempty"`
}

func (m *CancelMultiReleaseReq) Reset()                    { *m = CancelMultiReleaseReq{} }
func (m *CancelMultiReleaseReq) String() string            { return proto.CompactTextString(m) }
func (*CancelMultiReleaseReq) ProtoMessage()               {}
func (*CancelMultiReleaseReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{76} }

func (m *CancelMultiReleaseReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *CancelMultiReleaseReq) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *CancelMultiReleaseReq) GetMultiReleaseId() string {
	if m != nil {
		return m.MultiReleaseId
	}
	return ""
}

type CancelMultiReleaseResp struct {
	Result  bool           `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Code    common.ErrCode `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string         `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *CancelMultiReleaseResp) Reset()                    { *m = CancelMultiReleaseResp{} }
func (m *CancelMultiReleaseResp) String() string            { return proto.CompactTextString(m) }
func (*CancelMultiReleaseResp) ProtoMessage()               {}
func (*CancelMultiReleaseResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{77} }

func (m *CancelMultiReleaseResp) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *CancelMultiReleaseResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *CancelMultiReleaseResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type PublishMultiReleaseReq struct {
	BizId          string `protobuf:"bytes,1,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId          string `protobuf:"bytes,2,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	MultiReleaseId string `protobuf:"bytes,3,opt,name=multi_release_id,json=multiReleaseId" json:"multi_release_id,omitempty"`
}

func (m *PublishMultiReleaseReq) Reset()                    { *m = PublishMultiReleaseReq{} }
func (m *PublishMultiReleaseReq) String() string            { return proto.CompactTextString(m) }
func (*PublishMultiReleaseReq) ProtoMessage()               {}
func (*PublishMultiReleaseReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{78} }

func (m *PublishMultiReleaseReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *PublishMultiReleaseReq) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *PublishMultiReleaseReq) GetMultiReleaseId() string {
	if m != nil {
		return m.MultiReleaseId
	}
	return ""
}

type PublishMultiReleaseResp struct {
	Result  bool           `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Code    common.ErrCode `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string         `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *PublishMultiReleaseResp) Reset()                    { *m = PublishMultiReleaseResp{} }
func (m *PublishMultiReleaseResp) String() string            { return proto.CompactTextString(m) }
func (*PublishMultiReleaseResp) ProtoMessage()               {}
func (*PublishMultiReleaseResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{79} }

func (m *PublishMultiReleaseResp) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *PublishMultiReleaseResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *PublishMultiReleaseResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type RollbackMultiReleaseReq struct {
	BizId          string `protobuf:"bytes,1,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId          string `protobuf:"bytes,2,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	MultiReleaseId string `protobuf:"bytes,3,opt,name=multi_release_id,json=multiReleaseId" json:"multi_release_id,omitempty"`
}

func (m *RollbackMultiReleaseReq) Reset()                    { *m = RollbackMultiReleaseReq{} }
func (m *RollbackMultiReleaseReq) String() string            { return proto.CompactTextString(m) }
func (*RollbackMultiReleaseReq) ProtoMessage()               {}
func (*RollbackMultiReleaseReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{80} }

func (m *RollbackMultiReleaseReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *RollbackMultiReleaseReq) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *RollbackMultiReleaseReq) GetMultiReleaseId() string {
	if m != nil {
		return m.MultiReleaseId
	}
	return ""
}

type RollbackMultiReleaseResp struct {
	Result  bool           `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Code    common.ErrCode `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string         `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *RollbackMultiReleaseResp) Reset()                    { *m = RollbackMultiReleaseResp{} }
func (m *RollbackMultiReleaseResp) String() string            { return proto.CompactTextString(m) }
func (*RollbackMultiReleaseResp) ProtoMessage()               {}
func (*RollbackMultiReleaseResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{81} }

func (m *RollbackMultiReleaseResp) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *RollbackMultiReleaseResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *RollbackMultiReleaseResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type ReloadReq struct {
	BizId          string `protobuf:"bytes,1,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId          string `protobuf:"bytes,2,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	ReleaseId      string `protobuf:"bytes,3,opt,name=release_id,json=releaseId" json:"release_id,omitempty"`
	MultiReleaseId string `protobuf:"bytes,4,opt,name=multi_release_id,json=multiReleaseId" json:"multi_release_id,omitempty"`
	Rollback       bool   `protobuf:"varint,5,opt,name=rollback" json:"rollback,omitempty"`
}

func (m *ReloadReq) Reset()                    { *m = ReloadReq{} }
func (m *ReloadReq) String() string            { return proto.CompactTextString(m) }
func (*ReloadReq) ProtoMessage()               {}
func (*ReloadReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{82} }

func (m *ReloadReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *ReloadReq) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *ReloadReq) GetReleaseId() string {
	if m != nil {
		return m.ReleaseId
	}
	return ""
}

func (m *ReloadReq) GetMultiReleaseId() string {
	if m != nil {
		return m.MultiReleaseId
	}
	return ""
}

func (m *ReloadReq) GetRollback() bool {
	if m != nil {
		return m.Rollback
	}
	return false
}

type ReloadResp struct {
	Result  bool           `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Code    common.ErrCode `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string         `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *ReloadResp) Reset()                    { *m = ReloadResp{} }
func (m *ReloadResp) String() string            { return proto.CompactTextString(m) }
func (*ReloadResp) ProtoMessage()               {}
func (*ReloadResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{83} }

func (m *ReloadResp) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *ReloadResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *ReloadResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type QueryHistoryAppInstancesReq struct {
	BizId string `protobuf:"bytes,1,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId string `protobuf:"bytes,2,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	// 期望的节点实例标签逻辑或集合, 该维度支持多个标签，每个标签之间为逻辑或的关系, 与其他维度之间整体为逻辑或关系. 格式：KV, map type / JSON KV, key为目标
	// 标签名称，value为标签规则表达式，格式为OP|VALUES, OP可以为eq(默认为空也按eq处理)等于、ne不等于、gt大于、lt小于、ge大于等于、le小于等于, VALUES可以为单独的标签值或多个标签值例如1,2,3 其表示IN(1,2,3)的语意. OP和VALUES之间用竖线分割.
	// 注意：以往协议中没有OP表达式支持的情况，即为空OP按照eq等于处理.
	LabelsOr []*common.LabelsMap `protobuf:"bytes,3,rep,name=labels_or,json=labelsOr" json:"labels_or,omitempty"`
	// 期望的节点实例标签逻辑与集合, 该维度支持多个标签，每个标签之间为逻辑与的关系, 与其他维度之间整体为逻辑或关系. 格式：KV, map type / JSON KV, key为目标
	// 标签名称，value为标签规则表达式，格式为OP|VALUES, OP可以为eq(默认为空也按eq处理)等于、ne不等于、gt大于、lt小于、ge大于等于、le小于等于, VALUES可以为单独的标签值或多个标签值例如1,2,3 其表示IN(1,2,3)的语意. OP和VALUES之间用竖线分割.
	// 注意：以往协议中没有OP表达式支持的情况，即为空OP按照eq等于处理.
	LabelsAnd []*common.LabelsMap `protobuf:"bytes,4,rep,name=labels_and,json=labelsAnd" json:"labels_and,omitempty"`
	QueryType int32               `protobuf:"varint,5,opt,name=query_type,json=queryType" json:"query_type,omitempty"`
	Page      *common.Page        `protobuf:"bytes,6,opt,name=page" json:"page,omitempty"`
}

func (m *QueryHistoryAppInstancesReq) Reset()                    { *m = QueryHistoryAppInstancesReq{} }
func (m *QueryHistoryAppInstancesReq) String() string            { return proto.CompactTextString(m) }
func (*QueryHistoryAppInstancesReq) ProtoMessage()               {}
func (*QueryHistoryAppInstancesReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{84} }

func (m *QueryHistoryAppInstancesReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *QueryHistoryAppInstancesReq) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *QueryHistoryAppInstancesReq) GetLabelsOr() []*common.LabelsMap {
	if m != nil {
		return m.LabelsOr
	}
	return nil
}

func (m *QueryHistoryAppInstancesReq) GetLabelsAnd() []*common.LabelsMap {
	if m != nil {
		return m.LabelsAnd
	}
	return nil
}

func (m *QueryHistoryAppInstancesReq) GetQueryType() int32 {
	if m != nil {
		return m.QueryType
	}
	return 0
}

func (m *QueryHistoryAppInstancesReq) GetPage() *common.Page {
	if m != nil {
		return m.Page
	}
	return nil
}

type QueryHistoryAppInstancesResp struct {
	Result  bool                                   `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Code    common.ErrCode                         `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string                                 `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    *QueryHistoryAppInstancesResp_RespData `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *QueryHistoryAppInstancesResp) Reset()                    { *m = QueryHistoryAppInstancesResp{} }
func (m *QueryHistoryAppInstancesResp) String() string            { return proto.CompactTextString(m) }
func (*QueryHistoryAppInstancesResp) ProtoMessage()               {}
func (*QueryHistoryAppInstancesResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{85} }

func (m *QueryHistoryAppInstancesResp) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *QueryHistoryAppInstancesResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *QueryHistoryAppInstancesResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *QueryHistoryAppInstancesResp) GetData() *QueryHistoryAppInstancesResp_RespData {
	if m != nil {
		return m.Data
	}
	return nil
}

type QueryHistoryAppInstancesResp_RespData struct {
	TotalCount uint32                `protobuf:"varint,1,opt,name=total_count,json=totalCount" json:"total_count,omitempty"`
	Info       []*common.AppInstance `protobuf:"bytes,2,rep,name=info" json:"info,omitempty"`
}

func (m *QueryHistoryAppInstancesResp_RespData) Reset()         { *m = QueryHistoryAppInstancesResp_RespData{} }
func (m *QueryHistoryAppInstancesResp_RespData) String() string { return proto.CompactTextString(m) }
func (*QueryHistoryAppInstancesResp_RespData) ProtoMessage()    {}
func (*QueryHistoryAppInstancesResp_RespData) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{85, 0}
}

func (m *QueryHistoryAppInstancesResp_RespData) GetTotalCount() uint32 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *QueryHistoryAppInstancesResp_RespData) GetInfo() []*common.AppInstance {
	if m != nil {
		return m.Info
	}
	return nil
}

type QueryReachableAppInstancesReq struct {
	BizId string `protobuf:"bytes,1,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId string `protobuf:"bytes,2,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	// 期望的节点实例标签逻辑或集合, 该维度支持多个标签，每个标签之间为逻辑或的关系, 与其他维度之间整体为逻辑或关系. 格式：KV, map type / JSON KV, key为目标
	// 标签名称，value为标签规则表达式，格式为OP|VALUES, OP可以为eq(默认为空也按eq处理)等于、ne不等于、gt大于、lt小于、ge大于等于、le小于等于, VALUES可以为单独的标签值或多个标签值例如1,2,3 其表示IN(1,2,3)的语意. OP和VALUES之间用竖线分割.
	// 注意：以往协议中没有OP表达式支持的情况，即为空OP按照eq等于处理.
	LabelsOr []*common.LabelsMap `protobuf:"bytes,3,rep,name=labels_or,json=labelsOr" json:"labels_or,omitempty"`
	// 期望的节点实例标签逻辑与集合, 该维度支持多个标签，每个标签之间为逻辑与的关系, 与其他维度之间整体为逻辑或关系. 格式：KV, map type / JSON KV, key为目标
	// 标签名称，value为标签规则表达式，格式为OP|VALUES, OP可以为eq(默认为空也按eq处理)等于、ne不等于、gt大于、lt小于、ge大于等于、le小于等于, VALUES可以为单独的标签值或多个标签值例如1,2,3 其表示IN(1,2,3)的语意. OP和VALUES之间用竖线分割.
	// 注意：以往协议中没有OP表达式支持的情况，即为空OP按照eq等于处理.
	LabelsAnd []*common.LabelsMap `protobuf:"bytes,4,rep,name=labels_and,json=labelsAnd" json:"labels_and,omitempty"`
	Page      *common.Page        `protobuf:"bytes,5,opt,name=page" json:"page,omitempty"`
}

func (m *QueryReachableAppInstancesReq) Reset()                    { *m = QueryReachableAppInstancesReq{} }
func (m *QueryReachableAppInstancesReq) String() string            { return proto.CompactTextString(m) }
func (*QueryReachableAppInstancesReq) ProtoMessage()               {}
func (*QueryReachableAppInstancesReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{86} }

func (m *QueryReachableAppInstancesReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *QueryReachableAppInstancesReq) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *QueryReachableAppInstancesReq) GetLabelsOr() []*common.LabelsMap {
	if m != nil {
		return m.LabelsOr
	}
	return nil
}

func (m *QueryReachableAppInstancesReq) GetLabelsAnd() []*common.LabelsMap {
	if m != nil {
		return m.LabelsAnd
	}
	return nil
}

func (m *QueryReachableAppInstancesReq) GetPage() *common.Page {
	if m != nil {
		return m.Page
	}
	return nil
}

type QueryReachableAppInstancesResp struct {
	Result  bool                                     `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Code    common.ErrCode                           `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string                                   `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    *QueryReachableAppInstancesResp_RespData `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *QueryReachableAppInstancesResp) Reset()                    { *m = QueryReachableAppInstancesResp{} }
func (m *QueryReachableAppInstancesResp) String() string            { return proto.CompactTextString(m) }
func (*QueryReachableAppInstancesResp) ProtoMessage()               {}
func (*QueryReachableAppInstancesResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{87} }

func (m *QueryReachableAppInstancesResp) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *QueryReachableAppInstancesResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *QueryReachableAppInstancesResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *QueryReachableAppInstancesResp) GetData() *QueryReachableAppInstancesResp_RespData {
	if m != nil {
		return m.Data
	}
	return nil
}

type QueryReachableAppInstancesResp_RespData struct {
	TotalCount uint32                `protobuf:"varint,1,opt,name=total_count,json=totalCount" json:"total_count,omitempty"`
	Info       []*common.AppInstance `protobuf:"bytes,2,rep,name=info" json:"info,omitempty"`
}

func (m *QueryReachableAppInstancesResp_RespData) Reset() {
	*m = QueryReachableAppInstancesResp_RespData{}
}
func (m *QueryReachableAppInstancesResp_RespData) String() string { return proto.CompactTextString(m) }
func (*QueryReachableAppInstancesResp_RespData) ProtoMessage()    {}
func (*QueryReachableAppInstancesResp_RespData) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{87, 0}
}

func (m *QueryReachableAppInstancesResp_RespData) GetTotalCount() uint32 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *QueryReachableAppInstancesResp_RespData) GetInfo() []*common.AppInstance {
	if m != nil {
		return m.Info
	}
	return nil
}

type QueryMatchedAppInstancesReq struct {
	BizId          string       `protobuf:"bytes,1,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId          string       `protobuf:"bytes,2,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	StrategyId     string       `protobuf:"bytes,3,opt,name=strategy_id,json=strategyId" json:"strategy_id,omitempty"`
	ReleaseId      string       `protobuf:"bytes,4,opt,name=release_id,json=releaseId" json:"release_id,omitempty"`
	MultiReleaseId string       `protobuf:"bytes,5,opt,name=multi_release_id,json=multiReleaseId" json:"multi_release_id,omitempty"`
	Page           *common.Page `protobuf:"bytes,6,opt,name=page" json:"page,omitempty"`
}

func (m *QueryMatchedAppInstancesReq) Reset()                    { *m = QueryMatchedAppInstancesReq{} }
func (m *QueryMatchedAppInstancesReq) String() string            { return proto.CompactTextString(m) }
func (*QueryMatchedAppInstancesReq) ProtoMessage()               {}
func (*QueryMatchedAppInstancesReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{88} }

func (m *QueryMatchedAppInstancesReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *QueryMatchedAppInstancesReq) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *QueryMatchedAppInstancesReq) GetStrategyId() string {
	if m != nil {
		return m.StrategyId
	}
	return ""
}

func (m *QueryMatchedAppInstancesReq) GetReleaseId() string {
	if m != nil {
		return m.ReleaseId
	}
	return ""
}

func (m *QueryMatchedAppInstancesReq) GetMultiReleaseId() string {
	if m != nil {
		return m.MultiReleaseId
	}
	return ""
}

func (m *QueryMatchedAppInstancesReq) GetPage() *common.Page {
	if m != nil {
		return m.Page
	}
	return nil
}

type QueryMatchedAppInstancesResp struct {
	Result  bool                                   `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Code    common.ErrCode                         `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string                                 `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    *QueryMatchedAppInstancesResp_RespData `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *QueryMatchedAppInstancesResp) Reset()                    { *m = QueryMatchedAppInstancesResp{} }
func (m *QueryMatchedAppInstancesResp) String() string            { return proto.CompactTextString(m) }
func (*QueryMatchedAppInstancesResp) ProtoMessage()               {}
func (*QueryMatchedAppInstancesResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{89} }

func (m *QueryMatchedAppInstancesResp) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *QueryMatchedAppInstancesResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *QueryMatchedAppInstancesResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *QueryMatchedAppInstancesResp) GetData() *QueryMatchedAppInstancesResp_RespData {
	if m != nil {
		return m.Data
	}
	return nil
}

type QueryMatchedAppInstancesResp_RespData struct {
	TotalCount uint32                `protobuf:"varint,1,opt,name=total_count,json=totalCount" json:"total_count,omitempty"`
	Info       []*common.AppInstance `protobuf:"bytes,2,rep,name=info" json:"info,omitempty"`
}

func (m *QueryMatchedAppInstancesResp_RespData) Reset()         { *m = QueryMatchedAppInstancesResp_RespData{} }
func (m *QueryMatchedAppInstancesResp_RespData) String() string { return proto.CompactTextString(m) }
func (*QueryMatchedAppInstancesResp_RespData) ProtoMessage()    {}
func (*QueryMatchedAppInstancesResp_RespData) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{89, 0}
}

func (m *QueryMatchedAppInstancesResp_RespData) GetTotalCount() uint32 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *QueryMatchedAppInstancesResp_RespData) GetInfo() []*common.AppInstance {
	if m != nil {
		return m.Info
	}
	return nil
}

type QueryEffectedAppInstancesReq struct {
	BizId     string       `protobuf:"bytes,1,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId     string       `protobuf:"bytes,2,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	CfgId     string       `protobuf:"bytes,3,opt,name=cfg_id,json=cfgId" json:"cfg_id,omitempty"`
	ReleaseId string       `protobuf:"bytes,4,opt,name=release_id,json=releaseId" json:"release_id,omitempty"`
	Page      *common.Page `protobuf:"bytes,5,opt,name=page" json:"page,omitempty"`
}

func (m *QueryEffectedAppInstancesReq) Reset()                    { *m = QueryEffectedAppInstancesReq{} }
func (m *QueryEffectedAppInstancesReq) String() string            { return proto.CompactTextString(m) }
func (*QueryEffectedAppInstancesReq) ProtoMessage()               {}
func (*QueryEffectedAppInstancesReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{90} }

func (m *QueryEffectedAppInstancesReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *QueryEffectedAppInstancesReq) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *QueryEffectedAppInstancesReq) GetCfgId() string {
	if m != nil {
		return m.CfgId
	}
	return ""
}

func (m *QueryEffectedAppInstancesReq) GetReleaseId() string {
	if m != nil {
		return m.ReleaseId
	}
	return ""
}

func (m *QueryEffectedAppInstancesReq) GetPage() *common.Page {
	if m != nil {
		return m.Page
	}
	return nil
}

type QueryEffectedAppInstancesResp struct {
	Result  bool                                    `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Code    common.ErrCode                          `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string                                  `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    *QueryEffectedAppInstancesResp_RespData `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *QueryEffectedAppInstancesResp) Reset()                    { *m = QueryEffectedAppInstancesResp{} }
func (m *QueryEffectedAppInstancesResp) String() string            { return proto.CompactTextString(m) }
func (*QueryEffectedAppInstancesResp) ProtoMessage()               {}
func (*QueryEffectedAppInstancesResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{91} }

func (m *QueryEffectedAppInstancesResp) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *QueryEffectedAppInstancesResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *QueryEffectedAppInstancesResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *QueryEffectedAppInstancesResp) GetData() *QueryEffectedAppInstancesResp_RespData {
	if m != nil {
		return m.Data
	}
	return nil
}

type QueryEffectedAppInstancesResp_RespData struct {
	TotalCount uint32                       `protobuf:"varint,1,opt,name=total_count,json=totalCount" json:"total_count,omitempty"`
	Info       []*common.AppInstanceRelease `protobuf:"bytes,2,rep,name=info" json:"info,omitempty"`
}

func (m *QueryEffectedAppInstancesResp_RespData) Reset() {
	*m = QueryEffectedAppInstancesResp_RespData{}
}
func (m *QueryEffectedAppInstancesResp_RespData) String() string { return proto.CompactTextString(m) }
func (*QueryEffectedAppInstancesResp_RespData) ProtoMessage()    {}
func (*QueryEffectedAppInstancesResp_RespData) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{91, 0}
}

func (m *QueryEffectedAppInstancesResp_RespData) GetTotalCount() uint32 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *QueryEffectedAppInstancesResp_RespData) GetInfo() []*common.AppInstanceRelease {
	if m != nil {
		return m.Info
	}
	return nil
}

type QueryAppInstanceReleaseReq struct {
	BizId   string `protobuf:"bytes,1,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId   string `protobuf:"bytes,2,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	CloudId string `protobuf:"bytes,3,opt,name=cloud_id,json=cloudId" json:"cloud_id,omitempty"`
	Ip      string `protobuf:"bytes,4,opt,name=ip" json:"ip,omitempty"`
	Path    string `protobuf:"bytes,5,opt,name=path" json:"path,omitempty"`
	CfgId   string `protobuf:"bytes,6,opt,name=cfg_id,json=cfgId" json:"cfg_id,omitempty"`
}

func (m *QueryAppInstanceReleaseReq) Reset()                    { *m = QueryAppInstanceReleaseReq{} }
func (m *QueryAppInstanceReleaseReq) String() string            { return proto.CompactTextString(m) }
func (*QueryAppInstanceReleaseReq) ProtoMessage()               {}
func (*QueryAppInstanceReleaseReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{92} }

func (m *QueryAppInstanceReleaseReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *QueryAppInstanceReleaseReq) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *QueryAppInstanceReleaseReq) GetCloudId() string {
	if m != nil {
		return m.CloudId
	}
	return ""
}

func (m *QueryAppInstanceReleaseReq) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *QueryAppInstanceReleaseReq) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *QueryAppInstanceReleaseReq) GetCfgId() string {
	if m != nil {
		return m.CfgId
	}
	return ""
}

type QueryAppInstanceReleaseResp struct {
	Result  bool                                  `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Code    common.ErrCode                        `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string                                `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    *QueryAppInstanceReleaseResp_RespData `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *QueryAppInstanceReleaseResp) Reset()                    { *m = QueryAppInstanceReleaseResp{} }
func (m *QueryAppInstanceReleaseResp) String() string            { return proto.CompactTextString(m) }
func (*QueryAppInstanceReleaseResp) ProtoMessage()               {}
func (*QueryAppInstanceReleaseResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{93} }

func (m *QueryAppInstanceReleaseResp) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *QueryAppInstanceReleaseResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *QueryAppInstanceReleaseResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *QueryAppInstanceReleaseResp) GetData() *QueryAppInstanceReleaseResp_RespData {
	if m != nil {
		return m.Data
	}
	return nil
}

type QueryAppInstanceReleaseResp_RespData struct {
	ContentId      string `protobuf:"bytes,1,opt,name=content_id,json=contentId" json:"content_id,omitempty"`
	ContentSize    uint32 `protobuf:"varint,2,opt,name=content_size,json=contentSize" json:"content_size,omitempty"`
	ReleaseId      string `protobuf:"bytes,3,opt,name=release_id,json=releaseId" json:"release_id,omitempty"`
	CommitId       string `protobuf:"bytes,4,opt,name=commit_id,json=commitId" json:"commit_id,omitempty"`
	MultiReleaseId string `protobuf:"bytes,5,opt,name=multi_release_id,json=multiReleaseId" json:"multi_release_id,omitempty"`
	MultiCommitId  string `protobuf:"bytes,6,opt,name=multi_commit_id,json=multiCommitId" json:"multi_commit_id,omitempty"`
	ReleaseName    string `protobuf:"bytes,7,opt,name=release_name,json=releaseName" json:"release_name,omitempty"`
	Memo           string `protobuf:"bytes,8,opt,name=memo" json:"memo,omitempty"`
}

func (m *QueryAppInstanceReleaseResp_RespData) Reset()         { *m = QueryAppInstanceReleaseResp_RespData{} }
func (m *QueryAppInstanceReleaseResp_RespData) String() string { return proto.CompactTextString(m) }
func (*QueryAppInstanceReleaseResp_RespData) ProtoMessage()    {}
func (*QueryAppInstanceReleaseResp_RespData) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{93, 0}
}

func (m *QueryAppInstanceReleaseResp_RespData) GetContentId() string {
	if m != nil {
		return m.ContentId
	}
	return ""
}

func (m *QueryAppInstanceReleaseResp_RespData) GetContentSize() uint32 {
	if m != nil {
		return m.ContentSize
	}
	return 0
}

func (m *QueryAppInstanceReleaseResp_RespData) GetReleaseId() string {
	if m != nil {
		return m.ReleaseId
	}
	return ""
}

func (m *QueryAppInstanceReleaseResp_RespData) GetCommitId() string {
	if m != nil {
		return m.CommitId
	}
	return ""
}

func (m *QueryAppInstanceReleaseResp_RespData) GetMultiReleaseId() string {
	if m != nil {
		return m.MultiReleaseId
	}
	return ""
}

func (m *QueryAppInstanceReleaseResp_RespData) GetMultiCommitId() string {
	if m != nil {
		return m.MultiCommitId
	}
	return ""
}

func (m *QueryAppInstanceReleaseResp_RespData) GetReleaseName() string {
	if m != nil {
		return m.ReleaseName
	}
	return ""
}

func (m *QueryAppInstanceReleaseResp_RespData) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

type CreateStrategyReq struct {
	BizId string `protobuf:"bytes,1,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId string `protobuf:"bytes,2,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	Name  string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	// 期望的节点实例标签逻辑或集合, 该维度支持多个标签，每个标签之间为逻辑或的关系, 与其他维度之间整体为逻辑或关系. 格式：KV, map type / JSON KV, key为目标
	// 标签名称，value为标签规则表达式，格式为OP|VALUES, OP可以为eq(默认为空也按eq处理)等于、ne不等于、gt大于、lt小于、ge大于等于、le小于等于, VALUES可以为单独的标签值或多个标签值例如1,2,3 其表示IN(1,2,3)的语意. OP和VALUES之间用竖线分割.
	// 注意：以往协议中没有OP表达式支持的情况，即为空OP按照eq等于处理.
	LabelsOr []*common.LabelsMap `protobuf:"bytes,4,rep,name=labels_or,json=labelsOr" json:"labels_or,omitempty"`
	// 期望的节点实例标签逻辑与集合, 该维度支持多个标签，每个标签之间为逻辑与的关系, 与其他维度之间整体为逻辑或关系. 格式：KV, map type / JSON KV, key为目标
	// 标签名称，value为标签规则表达式，格式为OP|VALUES, OP可以为eq(默认为空也按eq处理)等于、ne不等于、gt大于、lt小于、ge大于等于、le小于等于, VALUES可以为单独的标签值或多个标签值例如1,2,3 其表示IN(1,2,3)的语意. OP和VALUES之间用竖线分割.
	// 注意：以往协议中没有OP表达式支持的情况，即为空OP按照eq等于处理.
	LabelsAnd []*common.LabelsMap `protobuf:"bytes,5,rep,name=labels_and,json=labelsAnd" json:"labels_and,omitempty"`
	Memo      string              `protobuf:"bytes,6,opt,name=memo" json:"memo,omitempty"`
}

func (m *CreateStrategyReq) Reset()                    { *m = CreateStrategyReq{} }
func (m *CreateStrategyReq) String() string            { return proto.CompactTextString(m) }
func (*CreateStrategyReq) ProtoMessage()               {}
func (*CreateStrategyReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{94} }

func (m *CreateStrategyReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *CreateStrategyReq) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *CreateStrategyReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateStrategyReq) GetLabelsOr() []*common.LabelsMap {
	if m != nil {
		return m.LabelsOr
	}
	return nil
}

func (m *CreateStrategyReq) GetLabelsAnd() []*common.LabelsMap {
	if m != nil {
		return m.LabelsAnd
	}
	return nil
}

func (m *CreateStrategyReq) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

type CreateStrategyResp struct {
	Result  bool                         `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Code    common.ErrCode               `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string                       `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    *CreateStrategyResp_RespData `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *CreateStrategyResp) Reset()                    { *m = CreateStrategyResp{} }
func (m *CreateStrategyResp) String() string            { return proto.CompactTextString(m) }
func (*CreateStrategyResp) ProtoMessage()               {}
func (*CreateStrategyResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{95} }

func (m *CreateStrategyResp) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *CreateStrategyResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *CreateStrategyResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *CreateStrategyResp) GetData() *CreateStrategyResp_RespData {
	if m != nil {
		return m.Data
	}
	return nil
}

type CreateStrategyResp_RespData struct {
	StrategyId string `protobuf:"bytes,1,opt,name=strategy_id,json=strategyId" json:"strategy_id,omitempty"`
}

func (m *CreateStrategyResp_RespData) Reset()                    { *m = CreateStrategyResp_RespData{} }
func (m *CreateStrategyResp_RespData) String() string            { return proto.CompactTextString(m) }
func (*CreateStrategyResp_RespData) ProtoMessage()               {}
func (*CreateStrategyResp_RespData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{95, 0} }

func (m *CreateStrategyResp_RespData) GetStrategyId() string {
	if m != nil {
		return m.StrategyId
	}
	return ""
}

type QueryStrategyReq struct {
	BizId      string `protobuf:"bytes,1,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId      string `protobuf:"bytes,2,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	StrategyId string `protobuf:"bytes,3,opt,name=strategy_id,json=strategyId" json:"strategy_id,omitempty"`
	Name       string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
}

func (m *QueryStrategyReq) Reset()                    { *m = QueryStrategyReq{} }
func (m *QueryStrategyReq) String() string            { return proto.CompactTextString(m) }
func (*QueryStrategyReq) ProtoMessage()               {}
func (*QueryStrategyReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{96} }

func (m *QueryStrategyReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *QueryStrategyReq) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *QueryStrategyReq) GetStrategyId() string {
	if m != nil {
		return m.StrategyId
	}
	return ""
}

func (m *QueryStrategyReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type QueryStrategyResp struct {
	Result  bool             `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Code    common.ErrCode   `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string           `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    *common.Strategy `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *QueryStrategyResp) Reset()                    { *m = QueryStrategyResp{} }
func (m *QueryStrategyResp) String() string            { return proto.CompactTextString(m) }
func (*QueryStrategyResp) ProtoMessage()               {}
func (*QueryStrategyResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{97} }

func (m *QueryStrategyResp) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *QueryStrategyResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *QueryStrategyResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *QueryStrategyResp) GetData() *common.Strategy {
	if m != nil {
		return m.Data
	}
	return nil
}

type QueryStrategyListReq struct {
	BizId string       `protobuf:"bytes,1,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId string       `protobuf:"bytes,2,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	Page  *common.Page `protobuf:"bytes,3,opt,name=page" json:"page,omitempty"`
}

func (m *QueryStrategyListReq) Reset()                    { *m = QueryStrategyListReq{} }
func (m *QueryStrategyListReq) String() string            { return proto.CompactTextString(m) }
func (*QueryStrategyListReq) ProtoMessage()               {}
func (*QueryStrategyListReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{98} }

func (m *QueryStrategyListReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *QueryStrategyListReq) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *QueryStrategyListReq) GetPage() *common.Page {
	if m != nil {
		return m.Page
	}
	return nil
}

type QueryStrategyListResp struct {
	Result  bool                            `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Code    common.ErrCode                  `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string                          `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    *QueryStrategyListResp_RespData `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *QueryStrategyListResp) Reset()                    { *m = QueryStrategyListResp{} }
func (m *QueryStrategyListResp) String() string            { return proto.CompactTextString(m) }
func (*QueryStrategyListResp) ProtoMessage()               {}
func (*QueryStrategyListResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{99} }

func (m *QueryStrategyListResp) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *QueryStrategyListResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *QueryStrategyListResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *QueryStrategyListResp) GetData() *QueryStrategyListResp_RespData {
	if m != nil {
		return m.Data
	}
	return nil
}

type QueryStrategyListResp_RespData struct {
	TotalCount uint32             `protobuf:"varint,1,opt,name=total_count,json=totalCount" json:"total_count,omitempty"`
	Info       []*common.Strategy `protobuf:"bytes,2,rep,name=info" json:"info,omitempty"`
}

func (m *QueryStrategyListResp_RespData) Reset()         { *m = QueryStrategyListResp_RespData{} }
func (m *QueryStrategyListResp_RespData) String() string { return proto.CompactTextString(m) }
func (*QueryStrategyListResp_RespData) ProtoMessage()    {}
func (*QueryStrategyListResp_RespData) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{99, 0}
}

func (m *QueryStrategyListResp_RespData) GetTotalCount() uint32 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *QueryStrategyListResp_RespData) GetInfo() []*common.Strategy {
	if m != nil {
		return m.Info
	}
	return nil
}

type DeleteStrategyReq struct {
	BizId      string `protobuf:"bytes,1,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId      string `protobuf:"bytes,2,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	StrategyId string `protobuf:"bytes,3,opt,name=strategy_id,json=strategyId" json:"strategy_id,omitempty"`
}

func (m *DeleteStrategyReq) Reset()                    { *m = DeleteStrategyReq{} }
func (m *DeleteStrategyReq) String() string            { return proto.CompactTextString(m) }
func (*DeleteStrategyReq) ProtoMessage()               {}
func (*DeleteStrategyReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{100} }

func (m *DeleteStrategyReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *DeleteStrategyReq) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *DeleteStrategyReq) GetStrategyId() string {
	if m != nil {
		return m.StrategyId
	}
	return ""
}

type DeleteStrategyResp struct {
	Result  bool           `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Code    common.ErrCode `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string         `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *DeleteStrategyResp) Reset()                    { *m = DeleteStrategyResp{} }
func (m *DeleteStrategyResp) String() string            { return proto.CompactTextString(m) }
func (*DeleteStrategyResp) ProtoMessage()               {}
func (*DeleteStrategyResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{101} }

func (m *DeleteStrategyResp) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *DeleteStrategyResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *DeleteStrategyResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type CreateProcAttrReq struct {
	CloudId string            `protobuf:"bytes,1,opt,name=cloud_id,json=cloudId" json:"cloud_id,omitempty"`
	Ip      string            `protobuf:"bytes,2,opt,name=ip" json:"ip,omitempty"`
	BizId   string            `protobuf:"bytes,3,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId   string            `protobuf:"bytes,4,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	Labels  map[string]string `protobuf:"bytes,5,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Path    string            `protobuf:"bytes,6,opt,name=path" json:"path,omitempty"`
	Memo    string            `protobuf:"bytes,7,opt,name=memo" json:"memo,omitempty"`
}

func (m *CreateProcAttrReq) Reset()                    { *m = CreateProcAttrReq{} }
func (m *CreateProcAttrReq) String() string            { return proto.CompactTextString(m) }
func (*CreateProcAttrReq) ProtoMessage()               {}
func (*CreateProcAttrReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{102} }

func (m *CreateProcAttrReq) GetCloudId() string {
	if m != nil {
		return m.CloudId
	}
	return ""
}

func (m *CreateProcAttrReq) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *CreateProcAttrReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *CreateProcAttrReq) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *CreateProcAttrReq) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *CreateProcAttrReq) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *CreateProcAttrReq) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

type CreateProcAttrResp struct {
	Result  bool           `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Code    common.ErrCode `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string         `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *CreateProcAttrResp) Reset()                    { *m = CreateProcAttrResp{} }
func (m *CreateProcAttrResp) String() string            { return proto.CompactTextString(m) }
func (*CreateProcAttrResp) ProtoMessage()               {}
func (*CreateProcAttrResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{103} }

func (m *CreateProcAttrResp) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *CreateProcAttrResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *CreateProcAttrResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type QueryHostProcAttrReq struct {
	CloudId string `protobuf:"bytes,1,opt,name=cloud_id,json=cloudId" json:"cloud_id,omitempty"`
	Ip      string `protobuf:"bytes,2,opt,name=ip" json:"ip,omitempty"`
	BizId   string `protobuf:"bytes,3,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId   string `protobuf:"bytes,4,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	Path    string `protobuf:"bytes,5,opt,name=path" json:"path,omitempty"`
}

func (m *QueryHostProcAttrReq) Reset()                    { *m = QueryHostProcAttrReq{} }
func (m *QueryHostProcAttrReq) String() string            { return proto.CompactTextString(m) }
func (*QueryHostProcAttrReq) ProtoMessage()               {}
func (*QueryHostProcAttrReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{104} }

func (m *QueryHostProcAttrReq) GetCloudId() string {
	if m != nil {
		return m.CloudId
	}
	return ""
}

func (m *QueryHostProcAttrReq) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *QueryHostProcAttrReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *QueryHostProcAttrReq) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *QueryHostProcAttrReq) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

type QueryHostProcAttrResp struct {
	Result  bool             `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Code    common.ErrCode   `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string           `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    *common.ProcAttr `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *QueryHostProcAttrResp) Reset()                    { *m = QueryHostProcAttrResp{} }
func (m *QueryHostProcAttrResp) String() string            { return proto.CompactTextString(m) }
func (*QueryHostProcAttrResp) ProtoMessage()               {}
func (*QueryHostProcAttrResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{105} }

func (m *QueryHostProcAttrResp) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *QueryHostProcAttrResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *QueryHostProcAttrResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *QueryHostProcAttrResp) GetData() *common.ProcAttr {
	if m != nil {
		return m.Data
	}
	return nil
}

type QueryHostProcAttrListReq struct {
	CloudId string       `protobuf:"bytes,1,opt,name=cloud_id,json=cloudId" json:"cloud_id,omitempty"`
	Ip      string       `protobuf:"bytes,2,opt,name=ip" json:"ip,omitempty"`
	Page    *common.Page `protobuf:"bytes,3,opt,name=page" json:"page,omitempty"`
}

func (m *QueryHostProcAttrListReq) Reset()                    { *m = QueryHostProcAttrListReq{} }
func (m *QueryHostProcAttrListReq) String() string            { return proto.CompactTextString(m) }
func (*QueryHostProcAttrListReq) ProtoMessage()               {}
func (*QueryHostProcAttrListReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{106} }

func (m *QueryHostProcAttrListReq) GetCloudId() string {
	if m != nil {
		return m.CloudId
	}
	return ""
}

func (m *QueryHostProcAttrListReq) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *QueryHostProcAttrListReq) GetPage() *common.Page {
	if m != nil {
		return m.Page
	}
	return nil
}

type QueryHostProcAttrListResp struct {
	Result  bool                                `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Code    common.ErrCode                      `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string                              `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    *QueryHostProcAttrListResp_RespData `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *QueryHostProcAttrListResp) Reset()                    { *m = QueryHostProcAttrListResp{} }
func (m *QueryHostProcAttrListResp) String() string            { return proto.CompactTextString(m) }
func (*QueryHostProcAttrListResp) ProtoMessage()               {}
func (*QueryHostProcAttrListResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{107} }

func (m *QueryHostProcAttrListResp) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *QueryHostProcAttrListResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *QueryHostProcAttrListResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *QueryHostProcAttrListResp) GetData() *QueryHostProcAttrListResp_RespData {
	if m != nil {
		return m.Data
	}
	return nil
}

type QueryHostProcAttrListResp_RespData struct {
	TotalCount uint32             `protobuf:"varint,1,opt,name=total_count,json=totalCount" json:"total_count,omitempty"`
	Info       []*common.ProcAttr `protobuf:"bytes,2,rep,name=info" json:"info,omitempty"`
}

func (m *QueryHostProcAttrListResp_RespData) Reset()         { *m = QueryHostProcAttrListResp_RespData{} }
func (m *QueryHostProcAttrListResp_RespData) String() string { return proto.CompactTextString(m) }
func (*QueryHostProcAttrListResp_RespData) ProtoMessage()    {}
func (*QueryHostProcAttrListResp_RespData) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{107, 0}
}

func (m *QueryHostProcAttrListResp_RespData) GetTotalCount() uint32 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *QueryHostProcAttrListResp_RespData) GetInfo() []*common.ProcAttr {
	if m != nil {
		return m.Info
	}
	return nil
}

type QueryAppProcAttrListReq struct {
	BizId string       `protobuf:"bytes,1,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId string       `protobuf:"bytes,2,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	Page  *common.Page `protobuf:"bytes,3,opt,name=page" json:"page,omitempty"`
}

func (m *QueryAppProcAttrListReq) Reset()                    { *m = QueryAppProcAttrListReq{} }
func (m *QueryAppProcAttrListReq) String() string            { return proto.CompactTextString(m) }
func (*QueryAppProcAttrListReq) ProtoMessage()               {}
func (*QueryAppProcAttrListReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{108} }

func (m *QueryAppProcAttrListReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *QueryAppProcAttrListReq) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *QueryAppProcAttrListReq) GetPage() *common.Page {
	if m != nil {
		return m.Page
	}
	return nil
}

type QueryAppProcAttrListResp struct {
	Result  bool                               `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Code    common.ErrCode                     `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string                             `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    *QueryAppProcAttrListResp_RespData `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *QueryAppProcAttrListResp) Reset()                    { *m = QueryAppProcAttrListResp{} }
func (m *QueryAppProcAttrListResp) String() string            { return proto.CompactTextString(m) }
func (*QueryAppProcAttrListResp) ProtoMessage()               {}
func (*QueryAppProcAttrListResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{109} }

func (m *QueryAppProcAttrListResp) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *QueryAppProcAttrListResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *QueryAppProcAttrListResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *QueryAppProcAttrListResp) GetData() *QueryAppProcAttrListResp_RespData {
	if m != nil {
		return m.Data
	}
	return nil
}

type QueryAppProcAttrListResp_RespData struct {
	TotalCount uint32             `protobuf:"varint,1,opt,name=total_count,json=totalCount" json:"total_count,omitempty"`
	Info       []*common.ProcAttr `protobuf:"bytes,2,rep,name=info" json:"info,omitempty"`
}

func (m *QueryAppProcAttrListResp_RespData) Reset()         { *m = QueryAppProcAttrListResp_RespData{} }
func (m *QueryAppProcAttrListResp_RespData) String() string { return proto.CompactTextString(m) }
func (*QueryAppProcAttrListResp_RespData) ProtoMessage()    {}
func (*QueryAppProcAttrListResp_RespData) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{109, 0}
}

func (m *QueryAppProcAttrListResp_RespData) GetTotalCount() uint32 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *QueryAppProcAttrListResp_RespData) GetInfo() []*common.ProcAttr {
	if m != nil {
		return m.Info
	}
	return nil
}

type UpdateProcAttrReq struct {
	CloudId string            `protobuf:"bytes,1,opt,name=cloud_id,json=cloudId" json:"cloud_id,omitempty"`
	Ip      string            `protobuf:"bytes,2,opt,name=ip" json:"ip,omitempty"`
	BizId   string            `protobuf:"bytes,3,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId   string            `protobuf:"bytes,4,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	Path    string            `protobuf:"bytes,5,opt,name=path" json:"path,omitempty"`
	Labels  map[string]string `protobuf:"bytes,6,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Memo    string            `protobuf:"bytes,7,opt,name=memo" json:"memo,omitempty"`
}

func (m *UpdateProcAttrReq) Reset()                    { *m = UpdateProcAttrReq{} }
func (m *UpdateProcAttrReq) String() string            { return proto.CompactTextString(m) }
func (*UpdateProcAttrReq) ProtoMessage()               {}
func (*UpdateProcAttrReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{110} }

func (m *UpdateProcAttrReq) GetCloudId() string {
	if m != nil {
		return m.CloudId
	}
	return ""
}

func (m *UpdateProcAttrReq) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *UpdateProcAttrReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *UpdateProcAttrReq) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *UpdateProcAttrReq) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *UpdateProcAttrReq) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *UpdateProcAttrReq) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

type UpdateProcAttrResp struct {
	Result  bool           `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Code    common.ErrCode `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string         `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *UpdateProcAttrResp) Reset()                    { *m = UpdateProcAttrResp{} }
func (m *UpdateProcAttrResp) String() string            { return proto.CompactTextString(m) }
func (*UpdateProcAttrResp) ProtoMessage()               {}
func (*UpdateProcAttrResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{111} }

func (m *UpdateProcAttrResp) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *UpdateProcAttrResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *UpdateProcAttrResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type DeleteProcAttrReq struct {
	CloudId string `protobuf:"bytes,1,opt,name=cloud_id,json=cloudId" json:"cloud_id,omitempty"`
	Ip      string `protobuf:"bytes,2,opt,name=ip" json:"ip,omitempty"`
	BizId   string `protobuf:"bytes,3,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId   string `protobuf:"bytes,4,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	Path    string `protobuf:"bytes,5,opt,name=path" json:"path,omitempty"`
}

func (m *DeleteProcAttrReq) Reset()                    { *m = DeleteProcAttrReq{} }
func (m *DeleteProcAttrReq) String() string            { return proto.CompactTextString(m) }
func (*DeleteProcAttrReq) ProtoMessage()               {}
func (*DeleteProcAttrReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{112} }

func (m *DeleteProcAttrReq) GetCloudId() string {
	if m != nil {
		return m.CloudId
	}
	return ""
}

func (m *DeleteProcAttrReq) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *DeleteProcAttrReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *DeleteProcAttrReq) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *DeleteProcAttrReq) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

type DeleteProcAttrResp struct {
	Result  bool           `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Code    common.ErrCode `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string         `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *DeleteProcAttrResp) Reset()                    { *m = DeleteProcAttrResp{} }
func (m *DeleteProcAttrResp) String() string            { return proto.CompactTextString(m) }
func (*DeleteProcAttrResp) ProtoMessage()               {}
func (*DeleteProcAttrResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{113} }

func (m *DeleteProcAttrResp) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *DeleteProcAttrResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *DeleteProcAttrResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type QueryAuditListReq struct {
	BizId      string       `protobuf:"bytes,1,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	SourceType int32        `protobuf:"varint,2,opt,name=source_type,json=sourceType" json:"source_type,omitempty"`
	OpType     int32        `protobuf:"varint,3,opt,name=op_type,json=opType" json:"op_type,omitempty"`
	SourceId   string       `protobuf:"bytes,4,opt,name=source_id,json=sourceId" json:"source_id,omitempty"`
	Operator   string       `protobuf:"bytes,5,opt,name=operator" json:"operator,omitempty"`
	Page       *common.Page `protobuf:"bytes,6,opt,name=page" json:"page,omitempty"`
}

func (m *QueryAuditListReq) Reset()                    { *m = QueryAuditListReq{} }
func (m *QueryAuditListReq) String() string            { return proto.CompactTextString(m) }
func (*QueryAuditListReq) ProtoMessage()               {}
func (*QueryAuditListReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{114} }

func (m *QueryAuditListReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *QueryAuditListReq) GetSourceType() int32 {
	if m != nil {
		return m.SourceType
	}
	return 0
}

func (m *QueryAuditListReq) GetOpType() int32 {
	if m != nil {
		return m.OpType
	}
	return 0
}

func (m *QueryAuditListReq) GetSourceId() string {
	if m != nil {
		return m.SourceId
	}
	return ""
}

func (m *QueryAuditListReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *QueryAuditListReq) GetPage() *common.Page {
	if m != nil {
		return m.Page
	}
	return nil
}

type QueryAuditListResp struct {
	Result  bool                         `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Code    common.ErrCode               `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string                       `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    *QueryAuditListResp_RespData `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *QueryAuditListResp) Reset()                    { *m = QueryAuditListResp{} }
func (m *QueryAuditListResp) String() string            { return proto.CompactTextString(m) }
func (*QueryAuditListResp) ProtoMessage()               {}
func (*QueryAuditListResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{115} }

func (m *QueryAuditListResp) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *QueryAuditListResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *QueryAuditListResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *QueryAuditListResp) GetData() *QueryAuditListResp_RespData {
	if m != nil {
		return m.Data
	}
	return nil
}

type QueryAuditListResp_RespData struct {
	TotalCount uint32          `protobuf:"varint,1,opt,name=total_count,json=totalCount" json:"total_count,omitempty"`
	Info       []*common.Audit `protobuf:"bytes,2,rep,name=info" json:"info,omitempty"`
}

func (m *QueryAuditListResp_RespData) Reset()         { *m = QueryAuditListResp_RespData{} }
func (m *QueryAuditListResp_RespData) String() string { return proto.CompactTextString(m) }
func (*QueryAuditListResp_RespData) ProtoMessage()    {}
func (*QueryAuditListResp_RespData) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{115, 0}
}

func (m *QueryAuditListResp_RespData) GetTotalCount() uint32 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *QueryAuditListResp_RespData) GetInfo() []*common.Audit {
	if m != nil {
		return m.Info
	}
	return nil
}

type HealthzReq struct {
	Seq string `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
}

func (m *HealthzReq) Reset()                    { *m = HealthzReq{} }
func (m *HealthzReq) String() string            { return proto.CompactTextString(m) }
func (*HealthzReq) ProtoMessage()               {}
func (*HealthzReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{116} }

func (m *HealthzReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

type HealthzResp struct {
	Seq     string                    `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode            `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string                    `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    *common.ModuleHealthzInfo `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *HealthzResp) Reset()                    { *m = HealthzResp{} }
func (m *HealthzResp) String() string            { return proto.CompactTextString(m) }
func (*HealthzResp) ProtoMessage()               {}
func (*HealthzResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{117} }

func (m *HealthzResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *HealthzResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *HealthzResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *HealthzResp) GetData() *common.ModuleHealthzInfo {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*CreateAppReq)(nil), "configserver.CreateAppReq")
	proto.RegisterType((*CreateAppResp)(nil), "configserver.CreateAppResp")
	proto.RegisterType((*CreateAppResp_RespData)(nil), "configserver.CreateAppResp.RespData")
	proto.RegisterType((*QueryAppReq)(nil), "configserver.QueryAppReq")
	proto.RegisterType((*QueryAppResp)(nil), "configserver.QueryAppResp")
	proto.RegisterType((*QueryAppListReq)(nil), "configserver.QueryAppListReq")
	proto.RegisterType((*QueryAppListResp)(nil), "configserver.QueryAppListResp")
	proto.RegisterType((*QueryAppListResp_RespData)(nil), "configserver.QueryAppListResp.RespData")
	proto.RegisterType((*UpdateAppReq)(nil), "configserver.UpdateAppReq")
	proto.RegisterType((*UpdateAppResp)(nil), "configserver.UpdateAppResp")
	proto.RegisterType((*DeleteAppReq)(nil), "configserver.DeleteAppReq")
	proto.RegisterType((*DeleteAppResp)(nil), "configserver.DeleteAppResp")
	proto.RegisterType((*CreateConfigReq)(nil), "configserver.CreateConfigReq")
	proto.RegisterType((*CreateConfigResp)(nil), "configserver.CreateConfigResp")
	proto.RegisterType((*CreateConfigResp_RespData)(nil), "configserver.CreateConfigResp.RespData")
	proto.RegisterType((*QueryConfigReq)(nil), "configserver.QueryConfigReq")
	proto.RegisterType((*QueryConfigResp)(nil), "configserver.QueryConfigResp")
	proto.RegisterType((*QueryConfigListReq)(nil), "configserver.QueryConfigListReq")
	proto.RegisterType((*QueryConfigListResp)(nil), "configserver.QueryConfigListResp")
	proto.RegisterType((*QueryConfigListResp_RespData)(nil), "configserver.QueryConfigListResp.RespData")
	proto.RegisterType((*UpdateConfigReq)(nil), "configserver.UpdateConfigReq")
	proto.RegisterType((*UpdateConfigResp)(nil), "configserver.UpdateConfigResp")
	proto.RegisterType((*DeleteConfigReq)(nil), "configserver.DeleteConfigReq")
	proto.RegisterType((*DeleteConfigResp)(nil), "configserver.DeleteConfigResp")
	proto.RegisterType((*CreateConfigContentReq)(nil), "configserver.CreateConfigContentReq")
	proto.RegisterType((*CreateConfigContentResp)(nil), "configserver.CreateConfigContentResp")
	proto.RegisterType((*QueryConfigContentReq)(nil), "configserver.QueryConfigContentReq")
	proto.RegisterType((*QueryConfigContentResp)(nil), "configserver.QueryConfigContentResp")
	proto.RegisterType((*QueryConfigContentListReq)(nil), "configserver.QueryConfigContentListReq")
	proto.RegisterType((*QueryConfigContentListResp)(nil), "configserver.QueryConfigContentListResp")
	proto.RegisterType((*QueryConfigContentListResp_RespData)(nil), "configserver.QueryConfigContentListResp.RespData")
	proto.RegisterType((*QueryReleaseConfigContentReq)(nil), "configserver.QueryReleaseConfigContentReq")
	proto.RegisterType((*QueryReleaseConfigContentResp)(nil), "configserver.QueryReleaseConfigContentResp")
	proto.RegisterType((*CreateCommitReq)(nil), "configserver.CreateCommitReq")
	proto.RegisterType((*CreateCommitResp)(nil), "configserver.CreateCommitResp")
	proto.RegisterType((*CreateCommitResp_RespData)(nil), "configserver.CreateCommitResp.RespData")
	proto.RegisterType((*QueryCommitReq)(nil), "configserver.QueryCommitReq")
	proto.RegisterType((*QueryCommitResp)(nil), "configserver.QueryCommitResp")
	proto.RegisterType((*QueryHistoryCommitsReq)(nil), "configserver.QueryHistoryCommitsReq")
	proto.RegisterType((*QueryHistoryCommitsResp)(nil), "configserver.QueryHistoryCommitsResp")
	proto.RegisterType((*QueryHistoryCommitsResp_RespData)(nil), "configserver.QueryHistoryCommitsResp.RespData")
	proto.RegisterType((*UpdateCommitReq)(nil), "configserver.UpdateCommitReq")
	proto.RegisterType((*UpdateCommitResp)(nil), "configserver.UpdateCommitResp")
	proto.RegisterType((*CancelCommitReq)(nil), "configserver.CancelCommitReq")
	proto.RegisterType((*CancelCommitResp)(nil), "configserver.CancelCommitResp")
	proto.RegisterType((*ConfirmCommitReq)(nil), "configserver.ConfirmCommitReq")
	proto.RegisterType((*ConfirmCommitResp)(nil), "configserver.ConfirmCommitResp")
	proto.RegisterType((*CreateMultiCommitWithContentReq)(nil), "configserver.CreateMultiCommitWithContentReq")
	proto.RegisterType((*CreateMultiCommitWithContentResp)(nil), "configserver.CreateMultiCommitWithContentResp")
	proto.RegisterType((*CreateMultiCommitWithContentResp_RespData)(nil), "configserver.CreateMultiCommitWithContentResp.RespData")
	proto.RegisterType((*CreateMultiCommitReq)(nil), "configserver.CreateMultiCommitReq")
	proto.RegisterType((*CreateMultiCommitResp)(nil), "configserver.CreateMultiCommitResp")
	proto.RegisterType((*CreateMultiCommitResp_RespData)(nil), "configserver.CreateMultiCommitResp.RespData")
	proto.RegisterType((*QueryMultiCommitReq)(nil), "configserver.QueryMultiCommitReq")
	proto.RegisterType((*QueryMultiCommitResp)(nil), "configserver.QueryMultiCommitResp")
	proto.RegisterType((*QueryMultiCommitResp_RespData)(nil), "configserver.QueryMultiCommitResp.RespData")
	proto.RegisterType((*QueryHistoryMultiCommitsReq)(nil), "configserver.QueryHistoryMultiCommitsReq")
	proto.RegisterType((*QueryHistoryMultiCommitsResp)(nil), "configserver.QueryHistoryMultiCommitsResp")
	proto.RegisterType((*QueryHistoryMultiCommitsResp_RespData)(nil), "configserver.QueryHistoryMultiCommitsResp.RespData")
	proto.RegisterType((*UpdateMultiCommitReq)(nil), "configserver.UpdateMultiCommitReq")
	proto.RegisterType((*UpdateMultiCommitResp)(nil), "configserver.UpdateMultiCommitResp")
	proto.RegisterType((*CancelMultiCommitReq)(nil), "configserver.CancelMultiCommitReq")
	proto.RegisterType((*CancelMultiCommitResp)(nil), "configserver.CancelMultiCommitResp")
	proto.RegisterType((*ConfirmMultiCommitReq)(nil), "configserver.ConfirmMultiCommitReq")
	proto.RegisterType((*ConfirmMultiCommitResp)(nil), "configserver.ConfirmMultiCommitResp")
	proto.RegisterType((*CreateReleaseReq)(nil), "configserver.CreateReleaseReq")
	proto.RegisterType((*CreateReleaseResp)(nil), "configserver.CreateReleaseResp")
	proto.RegisterType((*CreateReleaseResp_RespData)(nil), "configserver.CreateReleaseResp.RespData")
	proto.RegisterType((*QueryReleaseReq)(nil), "configserver.QueryReleaseReq")
	proto.RegisterType((*QueryReleaseResp)(nil), "configserver.QueryReleaseResp")
	proto.RegisterType((*QueryHistoryReleasesReq)(nil), "configserver.QueryHistoryReleasesReq")
	proto.RegisterType((*QueryHistoryReleasesResp)(nil), "configserver.QueryHistoryReleasesResp")
	proto.RegisterType((*QueryHistoryReleasesResp_RespData)(nil), "configserver.QueryHistoryReleasesResp.RespData")
	proto.RegisterType((*UpdateReleaseReq)(nil), "configserver.UpdateReleaseReq")
	proto.RegisterType((*UpdateReleaseResp)(nil), "configserver.UpdateReleaseResp")
	proto.RegisterType((*CancelReleaseReq)(nil), "configserver.CancelReleaseReq")
	proto.RegisterType((*CancelReleaseResp)(nil), "configserver.CancelReleaseResp")
	proto.RegisterType((*PublishReleaseReq)(nil), "configserver.PublishReleaseReq")
	proto.RegisterType((*PublishReleaseResp)(nil), "configserver.PublishReleaseResp")
	proto.RegisterType((*RollbackReleaseReq)(nil), "configserver.RollbackReleaseReq")
	proto.RegisterType((*RollbackReleaseResp)(nil), "configserver.RollbackReleaseResp")
	proto.RegisterType((*RollbackReleaseResp_RespData)(nil), "configserver.RollbackReleaseResp.RespData")
	proto.RegisterType((*CreateMultiReleaseReq)(nil), "configserver.CreateMultiReleaseReq")
	proto.RegisterType((*CreateMultiReleaseResp)(nil), "configserver.CreateMultiReleaseResp")
	proto.RegisterType((*CreateMultiReleaseResp_RespData)(nil), "configserver.CreateMultiReleaseResp.RespData")
	proto.RegisterType((*QueryMultiReleaseReq)(nil), "configserver.QueryMultiReleaseReq")
	proto.RegisterType((*QueryMultiReleaseResp)(nil), "configserver.QueryMultiReleaseResp")
	proto.RegisterType((*QueryMultiReleaseResp_RespData)(nil), "configserver.QueryMultiReleaseResp.RespData")
	proto.RegisterType((*QueryHistoryMultiReleasesReq)(nil), "configserver.QueryHistoryMultiReleasesReq")
	proto.RegisterType((*QueryHistoryMultiReleasesResp)(nil), "configserver.QueryHistoryMultiReleasesResp")
	proto.RegisterType((*QueryHistoryMultiReleasesResp_RespData)(nil), "configserver.QueryHistoryMultiReleasesResp.RespData")
	proto.RegisterType((*UpdateMultiReleaseReq)(nil), "configserver.UpdateMultiReleaseReq")
	proto.RegisterType((*UpdateMultiReleaseResp)(nil), "configserver.UpdateMultiReleaseResp")
	proto.RegisterType((*CancelMultiReleaseReq)(nil), "configserver.CancelMultiReleaseReq")
	proto.RegisterType((*CancelMultiReleaseResp)(nil), "configserver.CancelMultiReleaseResp")
	proto.RegisterType((*PublishMultiReleaseReq)(nil), "configserver.PublishMultiReleaseReq")
	proto.RegisterType((*PublishMultiReleaseResp)(nil), "configserver.PublishMultiReleaseResp")
	proto.RegisterType((*RollbackMultiReleaseReq)(nil), "configserver.RollbackMultiReleaseReq")
	proto.RegisterType((*RollbackMultiReleaseResp)(nil), "configserver.RollbackMultiReleaseResp")
	proto.RegisterType((*ReloadReq)(nil), "configserver.ReloadReq")
	proto.RegisterType((*ReloadResp)(nil), "configserver.ReloadResp")
	proto.RegisterType((*QueryHistoryAppInstancesReq)(nil), "configserver.QueryHistoryAppInstancesReq")
	proto.RegisterType((*QueryHistoryAppInstancesResp)(nil), "configserver.QueryHistoryAppInstancesResp")
	proto.RegisterType((*QueryHistoryAppInstancesResp_RespData)(nil), "configserver.QueryHistoryAppInstancesResp.RespData")
	proto.RegisterType((*QueryReachableAppInstancesReq)(nil), "configserver.QueryReachableAppInstancesReq")
	proto.RegisterType((*QueryReachableAppInstancesResp)(nil), "configserver.QueryReachableAppInstancesResp")
	proto.RegisterType((*QueryReachableAppInstancesResp_RespData)(nil), "configserver.QueryReachableAppInstancesResp.RespData")
	proto.RegisterType((*QueryMatchedAppInstancesReq)(nil), "configserver.QueryMatchedAppInstancesReq")
	proto.RegisterType((*QueryMatchedAppInstancesResp)(nil), "configserver.QueryMatchedAppInstancesResp")
	proto.RegisterType((*QueryMatchedAppInstancesResp_RespData)(nil), "configserver.QueryMatchedAppInstancesResp.RespData")
	proto.RegisterType((*QueryEffectedAppInstancesReq)(nil), "configserver.QueryEffectedAppInstancesReq")
	proto.RegisterType((*QueryEffectedAppInstancesResp)(nil), "configserver.QueryEffectedAppInstancesResp")
	proto.RegisterType((*QueryEffectedAppInstancesResp_RespData)(nil), "configserver.QueryEffectedAppInstancesResp.RespData")
	proto.RegisterType((*QueryAppInstanceReleaseReq)(nil), "configserver.QueryAppInstanceReleaseReq")
	proto.RegisterType((*QueryAppInstanceReleaseResp)(nil), "configserver.QueryAppInstanceReleaseResp")
	proto.RegisterType((*QueryAppInstanceReleaseResp_RespData)(nil), "configserver.QueryAppInstanceReleaseResp.RespData")
	proto.RegisterType((*CreateStrategyReq)(nil), "configserver.CreateStrategyReq")
	proto.RegisterType((*CreateStrategyResp)(nil), "configserver.CreateStrategyResp")
	proto.RegisterType((*CreateStrategyResp_RespData)(nil), "configserver.CreateStrategyResp.RespData")
	proto.RegisterType((*QueryStrategyReq)(nil), "configserver.QueryStrategyReq")
	proto.RegisterType((*QueryStrategyResp)(nil), "configserver.QueryStrategyResp")
	proto.RegisterType((*QueryStrategyListReq)(nil), "configserver.QueryStrategyListReq")
	proto.RegisterType((*QueryStrategyListResp)(nil), "configserver.QueryStrategyListResp")
	proto.RegisterType((*QueryStrategyListResp_RespData)(nil), "configserver.QueryStrategyListResp.RespData")
	proto.RegisterType((*DeleteStrategyReq)(nil), "configserver.DeleteStrategyReq")
	proto.RegisterType((*DeleteStrategyResp)(nil), "configserver.DeleteStrategyResp")
	proto.RegisterType((*CreateProcAttrReq)(nil), "configserver.CreateProcAttrReq")
	proto.RegisterType((*CreateProcAttrResp)(nil), "configserver.CreateProcAttrResp")
	proto.RegisterType((*QueryHostProcAttrReq)(nil), "configserver.QueryHostProcAttrReq")
	proto.RegisterType((*QueryHostProcAttrResp)(nil), "configserver.QueryHostProcAttrResp")
	proto.RegisterType((*QueryHostProcAttrListReq)(nil), "configserver.QueryHostProcAttrListReq")
	proto.RegisterType((*QueryHostProcAttrListResp)(nil), "configserver.QueryHostProcAttrListResp")
	proto.RegisterType((*QueryHostProcAttrListResp_RespData)(nil), "configserver.QueryHostProcAttrListResp.RespData")
	proto.RegisterType((*QueryAppProcAttrListReq)(nil), "configserver.QueryAppProcAttrListReq")
	proto.RegisterType((*QueryAppProcAttrListResp)(nil), "configserver.QueryAppProcAttrListResp")
	proto.RegisterType((*QueryAppProcAttrListResp_RespData)(nil), "configserver.QueryAppProcAttrListResp.RespData")
	proto.RegisterType((*UpdateProcAttrReq)(nil), "configserver.UpdateProcAttrReq")
	proto.RegisterType((*UpdateProcAttrResp)(nil), "configserver.UpdateProcAttrResp")
	proto.RegisterType((*DeleteProcAttrReq)(nil), "configserver.DeleteProcAttrReq")
	proto.RegisterType((*DeleteProcAttrResp)(nil), "configserver.DeleteProcAttrResp")
	proto.RegisterType((*QueryAuditListReq)(nil), "configserver.QueryAuditListReq")
	proto.RegisterType((*QueryAuditListResp)(nil), "configserver.QueryAuditListResp")
	proto.RegisterType((*QueryAuditListResp_RespData)(nil), "configserver.QueryAuditListResp.RespData")
	proto.RegisterType((*HealthzReq)(nil), "configserver.HealthzReq")
	proto.RegisterType((*HealthzResp)(nil), "configserver.HealthzResp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Config service

type ConfigClient interface {
	CreateApp(ctx context.Context, in *CreateAppReq, opts ...grpc.CallOption) (*CreateAppResp, error)
	QueryApp(ctx context.Context, in *QueryAppReq, opts ...grpc.CallOption) (*QueryAppResp, error)
	QueryAppList(ctx context.Context, in *QueryAppListReq, opts ...grpc.CallOption) (*QueryAppListResp, error)
	UpdateApp(ctx context.Context, in *UpdateAppReq, opts ...grpc.CallOption) (*UpdateAppResp, error)
	DeleteApp(ctx context.Context, in *DeleteAppReq, opts ...grpc.CallOption) (*DeleteAppResp, error)
	CreateConfig(ctx context.Context, in *CreateConfigReq, opts ...grpc.CallOption) (*CreateConfigResp, error)
	QueryConfig(ctx context.Context, in *QueryConfigReq, opts ...grpc.CallOption) (*QueryConfigResp, error)
	QueryConfigList(ctx context.Context, in *QueryConfigListReq, opts ...grpc.CallOption) (*QueryConfigListResp, error)
	UpdateConfig(ctx context.Context, in *UpdateConfigReq, opts ...grpc.CallOption) (*UpdateConfigResp, error)
	DeleteConfig(ctx context.Context, in *DeleteConfigReq, opts ...grpc.CallOption) (*DeleteConfigResp, error)
	CreateConfigContent(ctx context.Context, in *CreateConfigContentReq, opts ...grpc.CallOption) (*CreateConfigContentResp, error)
	QueryConfigContentList(ctx context.Context, in *QueryConfigContentListReq, opts ...grpc.CallOption) (*QueryConfigContentListResp, error)
	QueryConfigContent(ctx context.Context, in *QueryConfigContentReq, opts ...grpc.CallOption) (*QueryConfigContentResp, error)
	QueryReleaseConfigContent(ctx context.Context, in *QueryReleaseConfigContentReq, opts ...grpc.CallOption) (*QueryReleaseConfigContentResp, error)
	CreateCommit(ctx context.Context, in *CreateCommitReq, opts ...grpc.CallOption) (*CreateCommitResp, error)
	QueryCommit(ctx context.Context, in *QueryCommitReq, opts ...grpc.CallOption) (*QueryCommitResp, error)
	QueryHistoryCommits(ctx context.Context, in *QueryHistoryCommitsReq, opts ...grpc.CallOption) (*QueryHistoryCommitsResp, error)
	UpdateCommit(ctx context.Context, in *UpdateCommitReq, opts ...grpc.CallOption) (*UpdateCommitResp, error)
	CancelCommit(ctx context.Context, in *CancelCommitReq, opts ...grpc.CallOption) (*CancelCommitResp, error)
	ConfirmCommit(ctx context.Context, in *ConfirmCommitReq, opts ...grpc.CallOption) (*ConfirmCommitResp, error)
	CreateMultiCommitWithContent(ctx context.Context, in *CreateMultiCommitWithContentReq, opts ...grpc.CallOption) (*CreateMultiCommitWithContentResp, error)
	CreateMultiCommit(ctx context.Context, in *CreateMultiCommitReq, opts ...grpc.CallOption) (*CreateMultiCommitResp, error)
	QueryMultiCommit(ctx context.Context, in *QueryMultiCommitReq, opts ...grpc.CallOption) (*QueryMultiCommitResp, error)
	QueryHistoryMultiCommits(ctx context.Context, in *QueryHistoryMultiCommitsReq, opts ...grpc.CallOption) (*QueryHistoryMultiCommitsResp, error)
	UpdateMultiCommit(ctx context.Context, in *UpdateMultiCommitReq, opts ...grpc.CallOption) (*UpdateMultiCommitResp, error)
	CancelMultiCommit(ctx context.Context, in *CancelMultiCommitReq, opts ...grpc.CallOption) (*CancelMultiCommitResp, error)
	ConfirmMultiCommit(ctx context.Context, in *ConfirmMultiCommitReq, opts ...grpc.CallOption) (*ConfirmMultiCommitResp, error)
	CreateRelease(ctx context.Context, in *CreateReleaseReq, opts ...grpc.CallOption) (*CreateReleaseResp, error)
	QueryRelease(ctx context.Context, in *QueryReleaseReq, opts ...grpc.CallOption) (*QueryReleaseResp, error)
	UpdateRelease(ctx context.Context, in *UpdateReleaseReq, opts ...grpc.CallOption) (*UpdateReleaseResp, error)
	CancelRelease(ctx context.Context, in *CancelReleaseReq, opts ...grpc.CallOption) (*CancelReleaseResp, error)
	PublishRelease(ctx context.Context, in *PublishReleaseReq, opts ...grpc.CallOption) (*PublishReleaseResp, error)
	RollbackRelease(ctx context.Context, in *RollbackReleaseReq, opts ...grpc.CallOption) (*RollbackReleaseResp, error)
	QueryHistoryReleases(ctx context.Context, in *QueryHistoryReleasesReq, opts ...grpc.CallOption) (*QueryHistoryReleasesResp, error)
	CreateMultiRelease(ctx context.Context, in *CreateMultiReleaseReq, opts ...grpc.CallOption) (*CreateMultiReleaseResp, error)
	QueryMultiRelease(ctx context.Context, in *QueryMultiReleaseReq, opts ...grpc.CallOption) (*QueryMultiReleaseResp, error)
	UpdateMultiRelease(ctx context.Context, in *UpdateMultiReleaseReq, opts ...grpc.CallOption) (*UpdateMultiReleaseResp, error)
	CancelMultiRelease(ctx context.Context, in *CancelMultiReleaseReq, opts ...grpc.CallOption) (*CancelMultiReleaseResp, error)
	PublishMultiRelease(ctx context.Context, in *PublishMultiReleaseReq, opts ...grpc.CallOption) (*PublishMultiReleaseResp, error)
	RollbackMultiRelease(ctx context.Context, in *RollbackMultiReleaseReq, opts ...grpc.CallOption) (*RollbackMultiReleaseResp, error)
	QueryHistoryMultiReleases(ctx context.Context, in *QueryHistoryMultiReleasesReq, opts ...grpc.CallOption) (*QueryHistoryMultiReleasesResp, error)
	Reload(ctx context.Context, in *ReloadReq, opts ...grpc.CallOption) (*ReloadResp, error)
	QueryHistoryAppInstances(ctx context.Context, in *QueryHistoryAppInstancesReq, opts ...grpc.CallOption) (*QueryHistoryAppInstancesResp, error)
	QueryReachableAppInstances(ctx context.Context, in *QueryReachableAppInstancesReq, opts ...grpc.CallOption) (*QueryReachableAppInstancesResp, error)
	QueryMatchedAppInstances(ctx context.Context, in *QueryMatchedAppInstancesReq, opts ...grpc.CallOption) (*QueryMatchedAppInstancesResp, error)
	QueryEffectedAppInstances(ctx context.Context, in *QueryEffectedAppInstancesReq, opts ...grpc.CallOption) (*QueryEffectedAppInstancesResp, error)
	QueryAppInstanceRelease(ctx context.Context, in *QueryAppInstanceReleaseReq, opts ...grpc.CallOption) (*QueryAppInstanceReleaseResp, error)
	CreateStrategy(ctx context.Context, in *CreateStrategyReq, opts ...grpc.CallOption) (*CreateStrategyResp, error)
	QueryStrategy(ctx context.Context, in *QueryStrategyReq, opts ...grpc.CallOption) (*QueryStrategyResp, error)
	QueryStrategyList(ctx context.Context, in *QueryStrategyListReq, opts ...grpc.CallOption) (*QueryStrategyListResp, error)
	DeleteStrategy(ctx context.Context, in *DeleteStrategyReq, opts ...grpc.CallOption) (*DeleteStrategyResp, error)
	CreateProcAttr(ctx context.Context, in *CreateProcAttrReq, opts ...grpc.CallOption) (*CreateProcAttrResp, error)
	QueryHostProcAttr(ctx context.Context, in *QueryHostProcAttrReq, opts ...grpc.CallOption) (*QueryHostProcAttrResp, error)
	QueryHostProcAttrList(ctx context.Context, in *QueryHostProcAttrListReq, opts ...grpc.CallOption) (*QueryHostProcAttrListResp, error)
	QueryAppProcAttrList(ctx context.Context, in *QueryAppProcAttrListReq, opts ...grpc.CallOption) (*QueryAppProcAttrListResp, error)
	UpdateProcAttr(ctx context.Context, in *UpdateProcAttrReq, opts ...grpc.CallOption) (*UpdateProcAttrResp, error)
	DeleteProcAttr(ctx context.Context, in *DeleteProcAttrReq, opts ...grpc.CallOption) (*DeleteProcAttrResp, error)
	QueryAuditList(ctx context.Context, in *QueryAuditListReq, opts ...grpc.CallOption) (*QueryAuditListResp, error)
	Healthz(ctx context.Context, in *HealthzReq, opts ...grpc.CallOption) (*HealthzResp, error)
}

type configClient struct {
	cc *grpc.ClientConn
}

func NewConfigClient(cc *grpc.ClientConn) ConfigClient {
	return &configClient{cc}
}

func (c *configClient) CreateApp(ctx context.Context, in *CreateAppReq, opts ...grpc.CallOption) (*CreateAppResp, error) {
	out := new(CreateAppResp)
	err := grpc.Invoke(ctx, "/configserver.Config/CreateApp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) QueryApp(ctx context.Context, in *QueryAppReq, opts ...grpc.CallOption) (*QueryAppResp, error) {
	out := new(QueryAppResp)
	err := grpc.Invoke(ctx, "/configserver.Config/QueryApp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) QueryAppList(ctx context.Context, in *QueryAppListReq, opts ...grpc.CallOption) (*QueryAppListResp, error) {
	out := new(QueryAppListResp)
	err := grpc.Invoke(ctx, "/configserver.Config/QueryAppList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) UpdateApp(ctx context.Context, in *UpdateAppReq, opts ...grpc.CallOption) (*UpdateAppResp, error) {
	out := new(UpdateAppResp)
	err := grpc.Invoke(ctx, "/configserver.Config/UpdateApp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) DeleteApp(ctx context.Context, in *DeleteAppReq, opts ...grpc.CallOption) (*DeleteAppResp, error) {
	out := new(DeleteAppResp)
	err := grpc.Invoke(ctx, "/configserver.Config/DeleteApp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) CreateConfig(ctx context.Context, in *CreateConfigReq, opts ...grpc.CallOption) (*CreateConfigResp, error) {
	out := new(CreateConfigResp)
	err := grpc.Invoke(ctx, "/configserver.Config/CreateConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) QueryConfig(ctx context.Context, in *QueryConfigReq, opts ...grpc.CallOption) (*QueryConfigResp, error) {
	out := new(QueryConfigResp)
	err := grpc.Invoke(ctx, "/configserver.Config/QueryConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) QueryConfigList(ctx context.Context, in *QueryConfigListReq, opts ...grpc.CallOption) (*QueryConfigListResp, error) {
	out := new(QueryConfigListResp)
	err := grpc.Invoke(ctx, "/configserver.Config/QueryConfigList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) UpdateConfig(ctx context.Context, in *UpdateConfigReq, opts ...grpc.CallOption) (*UpdateConfigResp, error) {
	out := new(UpdateConfigResp)
	err := grpc.Invoke(ctx, "/configserver.Config/UpdateConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) DeleteConfig(ctx context.Context, in *DeleteConfigReq, opts ...grpc.CallOption) (*DeleteConfigResp, error) {
	out := new(DeleteConfigResp)
	err := grpc.Invoke(ctx, "/configserver.Config/DeleteConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) CreateConfigContent(ctx context.Context, in *CreateConfigContentReq, opts ...grpc.CallOption) (*CreateConfigContentResp, error) {
	out := new(CreateConfigContentResp)
	err := grpc.Invoke(ctx, "/configserver.Config/CreateConfigContent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) QueryConfigContentList(ctx context.Context, in *QueryConfigContentListReq, opts ...grpc.CallOption) (*QueryConfigContentListResp, error) {
	out := new(QueryConfigContentListResp)
	err := grpc.Invoke(ctx, "/configserver.Config/QueryConfigContentList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) QueryConfigContent(ctx context.Context, in *QueryConfigContentReq, opts ...grpc.CallOption) (*QueryConfigContentResp, error) {
	out := new(QueryConfigContentResp)
	err := grpc.Invoke(ctx, "/configserver.Config/QueryConfigContent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) QueryReleaseConfigContent(ctx context.Context, in *QueryReleaseConfigContentReq, opts ...grpc.CallOption) (*QueryReleaseConfigContentResp, error) {
	out := new(QueryReleaseConfigContentResp)
	err := grpc.Invoke(ctx, "/configserver.Config/QueryReleaseConfigContent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) CreateCommit(ctx context.Context, in *CreateCommitReq, opts ...grpc.CallOption) (*CreateCommitResp, error) {
	out := new(CreateCommitResp)
	err := grpc.Invoke(ctx, "/configserver.Config/CreateCommit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) QueryCommit(ctx context.Context, in *QueryCommitReq, opts ...grpc.CallOption) (*QueryCommitResp, error) {
	out := new(QueryCommitResp)
	err := grpc.Invoke(ctx, "/configserver.Config/QueryCommit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) QueryHistoryCommits(ctx context.Context, in *QueryHistoryCommitsReq, opts ...grpc.CallOption) (*QueryHistoryCommitsResp, error) {
	out := new(QueryHistoryCommitsResp)
	err := grpc.Invoke(ctx, "/configserver.Config/QueryHistoryCommits", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) UpdateCommit(ctx context.Context, in *UpdateCommitReq, opts ...grpc.CallOption) (*UpdateCommitResp, error) {
	out := new(UpdateCommitResp)
	err := grpc.Invoke(ctx, "/configserver.Config/UpdateCommit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) CancelCommit(ctx context.Context, in *CancelCommitReq, opts ...grpc.CallOption) (*CancelCommitResp, error) {
	out := new(CancelCommitResp)
	err := grpc.Invoke(ctx, "/configserver.Config/CancelCommit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ConfirmCommit(ctx context.Context, in *ConfirmCommitReq, opts ...grpc.CallOption) (*ConfirmCommitResp, error) {
	out := new(ConfirmCommitResp)
	err := grpc.Invoke(ctx, "/configserver.Config/ConfirmCommit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) CreateMultiCommitWithContent(ctx context.Context, in *CreateMultiCommitWithContentReq, opts ...grpc.CallOption) (*CreateMultiCommitWithContentResp, error) {
	out := new(CreateMultiCommitWithContentResp)
	err := grpc.Invoke(ctx, "/configserver.Config/CreateMultiCommitWithContent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) CreateMultiCommit(ctx context.Context, in *CreateMultiCommitReq, opts ...grpc.CallOption) (*CreateMultiCommitResp, error) {
	out := new(CreateMultiCommitResp)
	err := grpc.Invoke(ctx, "/configserver.Config/CreateMultiCommit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) QueryMultiCommit(ctx context.Context, in *QueryMultiCommitReq, opts ...grpc.CallOption) (*QueryMultiCommitResp, error) {
	out := new(QueryMultiCommitResp)
	err := grpc.Invoke(ctx, "/configserver.Config/QueryMultiCommit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) QueryHistoryMultiCommits(ctx context.Context, in *QueryHistoryMultiCommitsReq, opts ...grpc.CallOption) (*QueryHistoryMultiCommitsResp, error) {
	out := new(QueryHistoryMultiCommitsResp)
	err := grpc.Invoke(ctx, "/configserver.Config/QueryHistoryMultiCommits", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) UpdateMultiCommit(ctx context.Context, in *UpdateMultiCommitReq, opts ...grpc.CallOption) (*UpdateMultiCommitResp, error) {
	out := new(UpdateMultiCommitResp)
	err := grpc.Invoke(ctx, "/configserver.Config/UpdateMultiCommit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) CancelMultiCommit(ctx context.Context, in *CancelMultiCommitReq, opts ...grpc.CallOption) (*CancelMultiCommitResp, error) {
	out := new(CancelMultiCommitResp)
	err := grpc.Invoke(ctx, "/configserver.Config/CancelMultiCommit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ConfirmMultiCommit(ctx context.Context, in *ConfirmMultiCommitReq, opts ...grpc.CallOption) (*ConfirmMultiCommitResp, error) {
	out := new(ConfirmMultiCommitResp)
	err := grpc.Invoke(ctx, "/configserver.Config/ConfirmMultiCommit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) CreateRelease(ctx context.Context, in *CreateReleaseReq, opts ...grpc.CallOption) (*CreateReleaseResp, error) {
	out := new(CreateReleaseResp)
	err := grpc.Invoke(ctx, "/configserver.Config/CreateRelease", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) QueryRelease(ctx context.Context, in *QueryReleaseReq, opts ...grpc.CallOption) (*QueryReleaseResp, error) {
	out := new(QueryReleaseResp)
	err := grpc.Invoke(ctx, "/configserver.Config/QueryRelease", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) UpdateRelease(ctx context.Context, in *UpdateReleaseReq, opts ...grpc.CallOption) (*UpdateReleaseResp, error) {
	out := new(UpdateReleaseResp)
	err := grpc.Invoke(ctx, "/configserver.Config/UpdateRelease", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) CancelRelease(ctx context.Context, in *CancelReleaseReq, opts ...grpc.CallOption) (*CancelReleaseResp, error) {
	out := new(CancelReleaseResp)
	err := grpc.Invoke(ctx, "/configserver.Config/CancelRelease", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) PublishRelease(ctx context.Context, in *PublishReleaseReq, opts ...grpc.CallOption) (*PublishReleaseResp, error) {
	out := new(PublishReleaseResp)
	err := grpc.Invoke(ctx, "/configserver.Config/PublishRelease", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) RollbackRelease(ctx context.Context, in *RollbackReleaseReq, opts ...grpc.CallOption) (*RollbackReleaseResp, error) {
	out := new(RollbackReleaseResp)
	err := grpc.Invoke(ctx, "/configserver.Config/RollbackRelease", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) QueryHistoryReleases(ctx context.Context, in *QueryHistoryReleasesReq, opts ...grpc.CallOption) (*QueryHistoryReleasesResp, error) {
	out := new(QueryHistoryReleasesResp)
	err := grpc.Invoke(ctx, "/configserver.Config/QueryHistoryReleases", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) CreateMultiRelease(ctx context.Context, in *CreateMultiReleaseReq, opts ...grpc.CallOption) (*CreateMultiReleaseResp, error) {
	out := new(CreateMultiReleaseResp)
	err := grpc.Invoke(ctx, "/configserver.Config/CreateMultiRelease", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) QueryMultiRelease(ctx context.Context, in *QueryMultiReleaseReq, opts ...grpc.CallOption) (*QueryMultiReleaseResp, error) {
	out := new(QueryMultiReleaseResp)
	err := grpc.Invoke(ctx, "/configserver.Config/QueryMultiRelease", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) UpdateMultiRelease(ctx context.Context, in *UpdateMultiReleaseReq, opts ...grpc.CallOption) (*UpdateMultiReleaseResp, error) {
	out := new(UpdateMultiReleaseResp)
	err := grpc.Invoke(ctx, "/configserver.Config/UpdateMultiRelease", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) CancelMultiRelease(ctx context.Context, in *CancelMultiReleaseReq, opts ...grpc.CallOption) (*CancelMultiReleaseResp, error) {
	out := new(CancelMultiReleaseResp)
	err := grpc.Invoke(ctx, "/configserver.Config/CancelMultiRelease", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) PublishMultiRelease(ctx context.Context, in *PublishMultiReleaseReq, opts ...grpc.CallOption) (*PublishMultiReleaseResp, error) {
	out := new(PublishMultiReleaseResp)
	err := grpc.Invoke(ctx, "/configserver.Config/PublishMultiRelease", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) RollbackMultiRelease(ctx context.Context, in *RollbackMultiReleaseReq, opts ...grpc.CallOption) (*RollbackMultiReleaseResp, error) {
	out := new(RollbackMultiReleaseResp)
	err := grpc.Invoke(ctx, "/configserver.Config/RollbackMultiRelease", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) QueryHistoryMultiReleases(ctx context.Context, in *QueryHistoryMultiReleasesReq, opts ...grpc.CallOption) (*QueryHistoryMultiReleasesResp, error) {
	out := new(QueryHistoryMultiReleasesResp)
	err := grpc.Invoke(ctx, "/configserver.Config/QueryHistoryMultiReleases", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) Reload(ctx context.Context, in *ReloadReq, opts ...grpc.CallOption) (*ReloadResp, error) {
	out := new(ReloadResp)
	err := grpc.Invoke(ctx, "/configserver.Config/Reload", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) QueryHistoryAppInstances(ctx context.Context, in *QueryHistoryAppInstancesReq, opts ...grpc.CallOption) (*QueryHistoryAppInstancesResp, error) {
	out := new(QueryHistoryAppInstancesResp)
	err := grpc.Invoke(ctx, "/configserver.Config/QueryHistoryAppInstances", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) QueryReachableAppInstances(ctx context.Context, in *QueryReachableAppInstancesReq, opts ...grpc.CallOption) (*QueryReachableAppInstancesResp, error) {
	out := new(QueryReachableAppInstancesResp)
	err := grpc.Invoke(ctx, "/configserver.Config/QueryReachableAppInstances", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) QueryMatchedAppInstances(ctx context.Context, in *QueryMatchedAppInstancesReq, opts ...grpc.CallOption) (*QueryMatchedAppInstancesResp, error) {
	out := new(QueryMatchedAppInstancesResp)
	err := grpc.Invoke(ctx, "/configserver.Config/QueryMatchedAppInstances", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) QueryEffectedAppInstances(ctx context.Context, in *QueryEffectedAppInstancesReq, opts ...grpc.CallOption) (*QueryEffectedAppInstancesResp, error) {
	out := new(QueryEffectedAppInstancesResp)
	err := grpc.Invoke(ctx, "/configserver.Config/QueryEffectedAppInstances", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) QueryAppInstanceRelease(ctx context.Context, in *QueryAppInstanceReleaseReq, opts ...grpc.CallOption) (*QueryAppInstanceReleaseResp, error) {
	out := new(QueryAppInstanceReleaseResp)
	err := grpc.Invoke(ctx, "/configserver.Config/QueryAppInstanceRelease", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) CreateStrategy(ctx context.Context, in *CreateStrategyReq, opts ...grpc.CallOption) (*CreateStrategyResp, error) {
	out := new(CreateStrategyResp)
	err := grpc.Invoke(ctx, "/configserver.Config/CreateStrategy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) QueryStrategy(ctx context.Context, in *QueryStrategyReq, opts ...grpc.CallOption) (*QueryStrategyResp, error) {
	out := new(QueryStrategyResp)
	err := grpc.Invoke(ctx, "/configserver.Config/QueryStrategy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) QueryStrategyList(ctx context.Context, in *QueryStrategyListReq, opts ...grpc.CallOption) (*QueryStrategyListResp, error) {
	out := new(QueryStrategyListResp)
	err := grpc.Invoke(ctx, "/configserver.Config/QueryStrategyList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) DeleteStrategy(ctx context.Context, in *DeleteStrategyReq, opts ...grpc.CallOption) (*DeleteStrategyResp, error) {
	out := new(DeleteStrategyResp)
	err := grpc.Invoke(ctx, "/configserver.Config/DeleteStrategy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) CreateProcAttr(ctx context.Context, in *CreateProcAttrReq, opts ...grpc.CallOption) (*CreateProcAttrResp, error) {
	out := new(CreateProcAttrResp)
	err := grpc.Invoke(ctx, "/configserver.Config/CreateProcAttr", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) QueryHostProcAttr(ctx context.Context, in *QueryHostProcAttrReq, opts ...grpc.CallOption) (*QueryHostProcAttrResp, error) {
	out := new(QueryHostProcAttrResp)
	err := grpc.Invoke(ctx, "/configserver.Config/QueryHostProcAttr", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) QueryHostProcAttrList(ctx context.Context, in *QueryHostProcAttrListReq, opts ...grpc.CallOption) (*QueryHostProcAttrListResp, error) {
	out := new(QueryHostProcAttrListResp)
	err := grpc.Invoke(ctx, "/configserver.Config/QueryHostProcAttrList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) QueryAppProcAttrList(ctx context.Context, in *QueryAppProcAttrListReq, opts ...grpc.CallOption) (*QueryAppProcAttrListResp, error) {
	out := new(QueryAppProcAttrListResp)
	err := grpc.Invoke(ctx, "/configserver.Config/QueryAppProcAttrList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) UpdateProcAttr(ctx context.Context, in *UpdateProcAttrReq, opts ...grpc.CallOption) (*UpdateProcAttrResp, error) {
	out := new(UpdateProcAttrResp)
	err := grpc.Invoke(ctx, "/configserver.Config/UpdateProcAttr", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) DeleteProcAttr(ctx context.Context, in *DeleteProcAttrReq, opts ...grpc.CallOption) (*DeleteProcAttrResp, error) {
	out := new(DeleteProcAttrResp)
	err := grpc.Invoke(ctx, "/configserver.Config/DeleteProcAttr", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) QueryAuditList(ctx context.Context, in *QueryAuditListReq, opts ...grpc.CallOption) (*QueryAuditListResp, error) {
	out := new(QueryAuditListResp)
	err := grpc.Invoke(ctx, "/configserver.Config/QueryAuditList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) Healthz(ctx context.Context, in *HealthzReq, opts ...grpc.CallOption) (*HealthzResp, error) {
	out := new(HealthzResp)
	err := grpc.Invoke(ctx, "/configserver.Config/Healthz", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Config service

type ConfigServer interface {
	CreateApp(context.Context, *CreateAppReq) (*CreateAppResp, error)
	QueryApp(context.Context, *QueryAppReq) (*QueryAppResp, error)
	QueryAppList(context.Context, *QueryAppListReq) (*QueryAppListResp, error)
	UpdateApp(context.Context, *UpdateAppReq) (*UpdateAppResp, error)
	DeleteApp(context.Context, *DeleteAppReq) (*DeleteAppResp, error)
	CreateConfig(context.Context, *CreateConfigReq) (*CreateConfigResp, error)
	QueryConfig(context.Context, *QueryConfigReq) (*QueryConfigResp, error)
	QueryConfigList(context.Context, *QueryConfigListReq) (*QueryConfigListResp, error)
	UpdateConfig(context.Context, *UpdateConfigReq) (*UpdateConfigResp, error)
	DeleteConfig(context.Context, *DeleteConfigReq) (*DeleteConfigResp, error)
	CreateConfigContent(context.Context, *CreateConfigContentReq) (*CreateConfigContentResp, error)
	QueryConfigContentList(context.Context, *QueryConfigContentListReq) (*QueryConfigContentListResp, error)
	QueryConfigContent(context.Context, *QueryConfigContentReq) (*QueryConfigContentResp, error)
	QueryReleaseConfigContent(context.Context, *QueryReleaseConfigContentReq) (*QueryReleaseConfigContentResp, error)
	CreateCommit(context.Context, *CreateCommitReq) (*CreateCommitResp, error)
	QueryCommit(context.Context, *QueryCommitReq) (*QueryCommitResp, error)
	QueryHistoryCommits(context.Context, *QueryHistoryCommitsReq) (*QueryHistoryCommitsResp, error)
	UpdateCommit(context.Context, *UpdateCommitReq) (*UpdateCommitResp, error)
	CancelCommit(context.Context, *CancelCommitReq) (*CancelCommitResp, error)
	ConfirmCommit(context.Context, *ConfirmCommitReq) (*ConfirmCommitResp, error)
	CreateMultiCommitWithContent(context.Context, *CreateMultiCommitWithContentReq) (*CreateMultiCommitWithContentResp, error)
	CreateMultiCommit(context.Context, *CreateMultiCommitReq) (*CreateMultiCommitResp, error)
	QueryMultiCommit(context.Context, *QueryMultiCommitReq) (*QueryMultiCommitResp, error)
	QueryHistoryMultiCommits(context.Context, *QueryHistoryMultiCommitsReq) (*QueryHistoryMultiCommitsResp, error)
	UpdateMultiCommit(context.Context, *UpdateMultiCommitReq) (*UpdateMultiCommitResp, error)
	CancelMultiCommit(context.Context, *CancelMultiCommitReq) (*CancelMultiCommitResp, error)
	ConfirmMultiCommit(context.Context, *ConfirmMultiCommitReq) (*ConfirmMultiCommitResp, error)
	CreateRelease(context.Context, *CreateReleaseReq) (*CreateReleaseResp, error)
	QueryRelease(context.Context, *QueryReleaseReq) (*QueryReleaseResp, error)
	UpdateRelease(context.Context, *UpdateReleaseReq) (*UpdateReleaseResp, error)
	CancelRelease(context.Context, *CancelReleaseReq) (*CancelReleaseResp, error)
	PublishRelease(context.Context, *PublishReleaseReq) (*PublishReleaseResp, error)
	RollbackRelease(context.Context, *RollbackReleaseReq) (*RollbackReleaseResp, error)
	QueryHistoryReleases(context.Context, *QueryHistoryReleasesReq) (*QueryHistoryReleasesResp, error)
	CreateMultiRelease(context.Context, *CreateMultiReleaseReq) (*CreateMultiReleaseResp, error)
	QueryMultiRelease(context.Context, *QueryMultiReleaseReq) (*QueryMultiReleaseResp, error)
	UpdateMultiRelease(context.Context, *UpdateMultiReleaseReq) (*UpdateMultiReleaseResp, error)
	CancelMultiRelease(context.Context, *CancelMultiReleaseReq) (*CancelMultiReleaseResp, error)
	PublishMultiRelease(context.Context, *PublishMultiReleaseReq) (*PublishMultiReleaseResp, error)
	RollbackMultiRelease(context.Context, *RollbackMultiReleaseReq) (*RollbackMultiReleaseResp, error)
	QueryHistoryMultiReleases(context.Context, *QueryHistoryMultiReleasesReq) (*QueryHistoryMultiReleasesResp, error)
	Reload(context.Context, *ReloadReq) (*ReloadResp, error)
	QueryHistoryAppInstances(context.Context, *QueryHistoryAppInstancesReq) (*QueryHistoryAppInstancesResp, error)
	QueryReachableAppInstances(context.Context, *QueryReachableAppInstancesReq) (*QueryReachableAppInstancesResp, error)
	QueryMatchedAppInstances(context.Context, *QueryMatchedAppInstancesReq) (*QueryMatchedAppInstancesResp, error)
	QueryEffectedAppInstances(context.Context, *QueryEffectedAppInstancesReq) (*QueryEffectedAppInstancesResp, error)
	QueryAppInstanceRelease(context.Context, *QueryAppInstanceReleaseReq) (*QueryAppInstanceReleaseResp, error)
	CreateStrategy(context.Context, *CreateStrategyReq) (*CreateStrategyResp, error)
	QueryStrategy(context.Context, *QueryStrategyReq) (*QueryStrategyResp, error)
	QueryStrategyList(context.Context, *QueryStrategyListReq) (*QueryStrategyListResp, error)
	DeleteStrategy(context.Context, *DeleteStrategyReq) (*DeleteStrategyResp, error)
	CreateProcAttr(context.Context, *CreateProcAttrReq) (*CreateProcAttrResp, error)
	QueryHostProcAttr(context.Context, *QueryHostProcAttrReq) (*QueryHostProcAttrResp, error)
	QueryHostProcAttrList(context.Context, *QueryHostProcAttrListReq) (*QueryHostProcAttrListResp, error)
	QueryAppProcAttrList(context.Context, *QueryAppProcAttrListReq) (*QueryAppProcAttrListResp, error)
	UpdateProcAttr(context.Context, *UpdateProcAttrReq) (*UpdateProcAttrResp, error)
	DeleteProcAttr(context.Context, *DeleteProcAttrReq) (*DeleteProcAttrResp, error)
	QueryAuditList(context.Context, *QueryAuditListReq) (*QueryAuditListResp, error)
	Healthz(context.Context, *HealthzReq) (*HealthzResp, error)
}

func RegisterConfigServer(s *grpc.Server, srv ConfigServer) {
	s.RegisterService(&_Config_serviceDesc, srv)
}

func _Config_CreateApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).CreateApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configserver.Config/CreateApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).CreateApp(ctx, req.(*CreateAppReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_QueryApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAppReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).QueryApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configserver.Config/QueryApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).QueryApp(ctx, req.(*QueryAppReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_QueryAppList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAppListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).QueryAppList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configserver.Config/QueryAppList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).QueryAppList(ctx, req.(*QueryAppListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_UpdateApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).UpdateApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configserver.Config/UpdateApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).UpdateApp(ctx, req.(*UpdateAppReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_DeleteApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAppReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).DeleteApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configserver.Config/DeleteApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).DeleteApp(ctx, req.(*DeleteAppReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_CreateConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).CreateConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configserver.Config/CreateConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).CreateConfig(ctx, req.(*CreateConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_QueryConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).QueryConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configserver.Config/QueryConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).QueryConfig(ctx, req.(*QueryConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_QueryConfigList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryConfigListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).QueryConfigList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configserver.Config/QueryConfigList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).QueryConfigList(ctx, req.(*QueryConfigListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_UpdateConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).UpdateConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configserver.Config/UpdateConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).UpdateConfig(ctx, req.(*UpdateConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_DeleteConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).DeleteConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configserver.Config/DeleteConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).DeleteConfig(ctx, req.(*DeleteConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_CreateConfigContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConfigContentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).CreateConfigContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configserver.Config/CreateConfigContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).CreateConfigContent(ctx, req.(*CreateConfigContentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_QueryConfigContentList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryConfigContentListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).QueryConfigContentList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configserver.Config/QueryConfigContentList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).QueryConfigContentList(ctx, req.(*QueryConfigContentListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_QueryConfigContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryConfigContentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).QueryConfigContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configserver.Config/QueryConfigContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).QueryConfigContent(ctx, req.(*QueryConfigContentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_QueryReleaseConfigContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryReleaseConfigContentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).QueryReleaseConfigContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configserver.Config/QueryReleaseConfigContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).QueryReleaseConfigContent(ctx, req.(*QueryReleaseConfigContentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_CreateCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCommitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).CreateCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configserver.Config/CreateCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).CreateCommit(ctx, req.(*CreateCommitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_QueryCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCommitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).QueryCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configserver.Config/QueryCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).QueryCommit(ctx, req.(*QueryCommitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_QueryHistoryCommits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryHistoryCommitsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).QueryHistoryCommits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configserver.Config/QueryHistoryCommits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).QueryHistoryCommits(ctx, req.(*QueryHistoryCommitsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_UpdateCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCommitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).UpdateCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configserver.Config/UpdateCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).UpdateCommit(ctx, req.(*UpdateCommitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_CancelCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelCommitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).CancelCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configserver.Config/CancelCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).CancelCommit(ctx, req.(*CancelCommitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ConfirmCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmCommitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ConfirmCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configserver.Config/ConfirmCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ConfirmCommit(ctx, req.(*ConfirmCommitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_CreateMultiCommitWithContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMultiCommitWithContentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).CreateMultiCommitWithContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configserver.Config/CreateMultiCommitWithContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).CreateMultiCommitWithContent(ctx, req.(*CreateMultiCommitWithContentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_CreateMultiCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMultiCommitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).CreateMultiCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configserver.Config/CreateMultiCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).CreateMultiCommit(ctx, req.(*CreateMultiCommitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_QueryMultiCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMultiCommitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).QueryMultiCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configserver.Config/QueryMultiCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).QueryMultiCommit(ctx, req.(*QueryMultiCommitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_QueryHistoryMultiCommits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryHistoryMultiCommitsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).QueryHistoryMultiCommits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configserver.Config/QueryHistoryMultiCommits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).QueryHistoryMultiCommits(ctx, req.(*QueryHistoryMultiCommitsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_UpdateMultiCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMultiCommitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).UpdateMultiCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configserver.Config/UpdateMultiCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).UpdateMultiCommit(ctx, req.(*UpdateMultiCommitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_CancelMultiCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelMultiCommitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).CancelMultiCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configserver.Config/CancelMultiCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).CancelMultiCommit(ctx, req.(*CancelMultiCommitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ConfirmMultiCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmMultiCommitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ConfirmMultiCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configserver.Config/ConfirmMultiCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ConfirmMultiCommit(ctx, req.(*ConfirmMultiCommitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_CreateRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReleaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).CreateRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configserver.Config/CreateRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).CreateRelease(ctx, req.(*CreateReleaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_QueryRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryReleaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).QueryRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configserver.Config/QueryRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).QueryRelease(ctx, req.(*QueryReleaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_UpdateRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReleaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).UpdateRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configserver.Config/UpdateRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).UpdateRelease(ctx, req.(*UpdateReleaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_CancelRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelReleaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).CancelRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configserver.Config/CancelRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).CancelRelease(ctx, req.(*CancelReleaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_PublishRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishReleaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).PublishRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configserver.Config/PublishRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).PublishRelease(ctx, req.(*PublishReleaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_RollbackRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RollbackReleaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).RollbackRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configserver.Config/RollbackRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).RollbackRelease(ctx, req.(*RollbackReleaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_QueryHistoryReleases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryHistoryReleasesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).QueryHistoryReleases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configserver.Config/QueryHistoryReleases",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).QueryHistoryReleases(ctx, req.(*QueryHistoryReleasesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_CreateMultiRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMultiReleaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).CreateMultiRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configserver.Config/CreateMultiRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).CreateMultiRelease(ctx, req.(*CreateMultiReleaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_QueryMultiRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMultiReleaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).QueryMultiRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configserver.Config/QueryMultiRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).QueryMultiRelease(ctx, req.(*QueryMultiReleaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_UpdateMultiRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMultiReleaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).UpdateMultiRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configserver.Config/UpdateMultiRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).UpdateMultiRelease(ctx, req.(*UpdateMultiReleaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_CancelMultiRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelMultiReleaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).CancelMultiRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configserver.Config/CancelMultiRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).CancelMultiRelease(ctx, req.(*CancelMultiReleaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_PublishMultiRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishMultiReleaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).PublishMultiRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configserver.Config/PublishMultiRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).PublishMultiRelease(ctx, req.(*PublishMultiReleaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_RollbackMultiRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RollbackMultiReleaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).RollbackMultiRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configserver.Config/RollbackMultiRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).RollbackMultiRelease(ctx, req.(*RollbackMultiReleaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_QueryHistoryMultiReleases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryHistoryMultiReleasesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).QueryHistoryMultiReleases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configserver.Config/QueryHistoryMultiReleases",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).QueryHistoryMultiReleases(ctx, req.(*QueryHistoryMultiReleasesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_Reload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReloadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).Reload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configserver.Config/Reload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).Reload(ctx, req.(*ReloadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_QueryHistoryAppInstances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryHistoryAppInstancesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).QueryHistoryAppInstances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configserver.Config/QueryHistoryAppInstances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).QueryHistoryAppInstances(ctx, req.(*QueryHistoryAppInstancesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_QueryReachableAppInstances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryReachableAppInstancesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).QueryReachableAppInstances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configserver.Config/QueryReachableAppInstances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).QueryReachableAppInstances(ctx, req.(*QueryReachableAppInstancesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_QueryMatchedAppInstances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMatchedAppInstancesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).QueryMatchedAppInstances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configserver.Config/QueryMatchedAppInstances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).QueryMatchedAppInstances(ctx, req.(*QueryMatchedAppInstancesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_QueryEffectedAppInstances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryEffectedAppInstancesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).QueryEffectedAppInstances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configserver.Config/QueryEffectedAppInstances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).QueryEffectedAppInstances(ctx, req.(*QueryEffectedAppInstancesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_QueryAppInstanceRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAppInstanceReleaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).QueryAppInstanceRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configserver.Config/QueryAppInstanceRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).QueryAppInstanceRelease(ctx, req.(*QueryAppInstanceReleaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_CreateStrategy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStrategyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).CreateStrategy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configserver.Config/CreateStrategy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).CreateStrategy(ctx, req.(*CreateStrategyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_QueryStrategy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStrategyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).QueryStrategy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configserver.Config/QueryStrategy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).QueryStrategy(ctx, req.(*QueryStrategyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_QueryStrategyList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStrategyListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).QueryStrategyList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configserver.Config/QueryStrategyList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).QueryStrategyList(ctx, req.(*QueryStrategyListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_DeleteStrategy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStrategyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).DeleteStrategy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configserver.Config/DeleteStrategy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).DeleteStrategy(ctx, req.(*DeleteStrategyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_CreateProcAttr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProcAttrReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).CreateProcAttr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configserver.Config/CreateProcAttr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).CreateProcAttr(ctx, req.(*CreateProcAttrReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_QueryHostProcAttr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryHostProcAttrReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).QueryHostProcAttr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configserver.Config/QueryHostProcAttr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).QueryHostProcAttr(ctx, req.(*QueryHostProcAttrReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_QueryHostProcAttrList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryHostProcAttrListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).QueryHostProcAttrList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configserver.Config/QueryHostProcAttrList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).QueryHostProcAttrList(ctx, req.(*QueryHostProcAttrListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_QueryAppProcAttrList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAppProcAttrListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).QueryAppProcAttrList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configserver.Config/QueryAppProcAttrList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).QueryAppProcAttrList(ctx, req.(*QueryAppProcAttrListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_UpdateProcAttr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProcAttrReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).UpdateProcAttr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configserver.Config/UpdateProcAttr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).UpdateProcAttr(ctx, req.(*UpdateProcAttrReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_DeleteProcAttr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProcAttrReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).DeleteProcAttr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configserver.Config/DeleteProcAttr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).DeleteProcAttr(ctx, req.(*DeleteProcAttrReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_QueryAuditList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAuditListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).QueryAuditList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configserver.Config/QueryAuditList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).QueryAuditList(ctx, req.(*QueryAuditListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_Healthz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthzReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).Healthz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configserver.Config/Healthz",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).Healthz(ctx, req.(*HealthzReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Config_serviceDesc = grpc.ServiceDesc{
	ServiceName: "configserver.Config",
	HandlerType: (*ConfigServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateApp",
			Handler:    _Config_CreateApp_Handler,
		},
		{
			MethodName: "QueryApp",
			Handler:    _Config_QueryApp_Handler,
		},
		{
			MethodName: "QueryAppList",
			Handler:    _Config_QueryAppList_Handler,
		},
		{
			MethodName: "UpdateApp",
			Handler:    _Config_UpdateApp_Handler,
		},
		{
			MethodName: "DeleteApp",
			Handler:    _Config_DeleteApp_Handler,
		},
		{
			MethodName: "CreateConfig",
			Handler:    _Config_CreateConfig_Handler,
		},
		{
			MethodName: "QueryConfig",
			Handler:    _Config_QueryConfig_Handler,
		},
		{
			MethodName: "QueryConfigList",
			Handler:    _Config_QueryConfigList_Handler,
		},
		{
			MethodName: "UpdateConfig",
			Handler:    _Config_UpdateConfig_Handler,
		},
		{
			MethodName: "DeleteConfig",
			Handler:    _Config_DeleteConfig_Handler,
		},
		{
			MethodName: "CreateConfigContent",
			Handler:    _Config_CreateConfigContent_Handler,
		},
		{
			MethodName: "QueryConfigContentList",
			Handler:    _Config_QueryConfigContentList_Handler,
		},
		{
			MethodName: "QueryConfigContent",
			Handler:    _Config_QueryConfigContent_Handler,
		},
		{
			MethodName: "QueryReleaseConfigContent",
			Handler:    _Config_QueryReleaseConfigContent_Handler,
		},
		{
			MethodName: "CreateCommit",
			Handler:    _Config_CreateCommit_Handler,
		},
		{
			MethodName: "QueryCommit",
			Handler:    _Config_QueryCommit_Handler,
		},
		{
			MethodName: "QueryHistoryCommits",
			Handler:    _Config_QueryHistoryCommits_Handler,
		},
		{
			MethodName: "UpdateCommit",
			Handler:    _Config_UpdateCommit_Handler,
		},
		{
			MethodName: "CancelCommit",
			Handler:    _Config_CancelCommit_Handler,
		},
		{
			MethodName: "ConfirmCommit",
			Handler:    _Config_ConfirmCommit_Handler,
		},
		{
			MethodName: "CreateMultiCommitWithContent",
			Handler:    _Config_CreateMultiCommitWithContent_Handler,
		},
		{
			MethodName: "CreateMultiCommit",
			Handler:    _Config_CreateMultiCommit_Handler,
		},
		{
			MethodName: "QueryMultiCommit",
			Handler:    _Config_QueryMultiCommit_Handler,
		},
		{
			MethodName: "QueryHistoryMultiCommits",
			Handler:    _Config_QueryHistoryMultiCommits_Handler,
		},
		{
			MethodName: "UpdateMultiCommit",
			Handler:    _Config_UpdateMultiCommit_Handler,
		},
		{
			MethodName: "CancelMultiCommit",
			Handler:    _Config_CancelMultiCommit_Handler,
		},
		{
			MethodName: "ConfirmMultiCommit",
			Handler:    _Config_ConfirmMultiCommit_Handler,
		},
		{
			MethodName: "CreateRelease",
			Handler:    _Config_CreateRelease_Handler,
		},
		{
			MethodName: "QueryRelease",
			Handler:    _Config_QueryRelease_Handler,
		},
		{
			MethodName: "UpdateRelease",
			Handler:    _Config_UpdateRelease_Handler,
		},
		{
			MethodName: "CancelRelease",
			Handler:    _Config_CancelRelease_Handler,
		},
		{
			MethodName: "PublishRelease",
			Handler:    _Config_PublishRelease_Handler,
		},
		{
			MethodName: "RollbackRelease",
			Handler:    _Config_RollbackRelease_Handler,
		},
		{
			MethodName: "QueryHistoryReleases",
			Handler:    _Config_QueryHistoryReleases_Handler,
		},
		{
			MethodName: "CreateMultiRelease",
			Handler:    _Config_CreateMultiRelease_Handler,
		},
		{
			MethodName: "QueryMultiRelease",
			Handler:    _Config_QueryMultiRelease_Handler,
		},
		{
			MethodName: "UpdateMultiRelease",
			Handler:    _Config_UpdateMultiRelease_Handler,
		},
		{
			MethodName: "CancelMultiRelease",
			Handler:    _Config_CancelMultiRelease_Handler,
		},
		{
			MethodName: "PublishMultiRelease",
			Handler:    _Config_PublishMultiRelease_Handler,
		},
		{
			MethodName: "RollbackMultiRelease",
			Handler:    _Config_RollbackMultiRelease_Handler,
		},
		{
			MethodName: "QueryHistoryMultiReleases",
			Handler:    _Config_QueryHistoryMultiReleases_Handler,
		},
		{
			MethodName: "Reload",
			Handler:    _Config_Reload_Handler,
		},
		{
			MethodName: "QueryHistoryAppInstances",
			Handler:    _Config_QueryHistoryAppInstances_Handler,
		},
		{
			MethodName: "QueryReachableAppInstances",
			Handler:    _Config_QueryReachableAppInstances_Handler,
		},
		{
			MethodName: "QueryMatchedAppInstances",
			Handler:    _Config_QueryMatchedAppInstances_Handler,
		},
		{
			MethodName: "QueryEffectedAppInstances",
			Handler:    _Config_QueryEffectedAppInstances_Handler,
		},
		{
			MethodName: "QueryAppInstanceRelease",
			Handler:    _Config_QueryAppInstanceRelease_Handler,
		},
		{
			MethodName: "CreateStrategy",
			Handler:    _Config_CreateStrategy_Handler,
		},
		{
			MethodName: "QueryStrategy",
			Handler:    _Config_QueryStrategy_Handler,
		},
		{
			MethodName: "QueryStrategyList",
			Handler:    _Config_QueryStrategyList_Handler,
		},
		{
			MethodName: "DeleteStrategy",
			Handler:    _Config_DeleteStrategy_Handler,
		},
		{
			MethodName: "CreateProcAttr",
			Handler:    _Config_CreateProcAttr_Handler,
		},
		{
			MethodName: "QueryHostProcAttr",
			Handler:    _Config_QueryHostProcAttr_Handler,
		},
		{
			MethodName: "QueryHostProcAttrList",
			Handler:    _Config_QueryHostProcAttrList_Handler,
		},
		{
			MethodName: "QueryAppProcAttrList",
			Handler:    _Config_QueryAppProcAttrList_Handler,
		},
		{
			MethodName: "UpdateProcAttr",
			Handler:    _Config_UpdateProcAttr_Handler,
		},
		{
			MethodName: "DeleteProcAttr",
			Handler:    _Config_DeleteProcAttr_Handler,
		},
		{
			MethodName: "QueryAuditList",
			Handler:    _Config_QueryAuditList_Handler,
		},
		{
			MethodName: "Healthz",
			Handler:    _Config_Healthz_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "configserver.proto",
}

func init() { proto.RegisterFile("configserver.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 13874 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xec, 0x7d, 0x0b, 0x78, 0x14, 0xd7,
	0x79, 0x68, 0x67, 0x57, 0x12, 0x70, 0x24, 0x83, 0x3d, 0xc6, 0xb6, 0x2c, 0xc7, 0x78, 0x3d, 0x50,
	0x03, 0x63, 0x09, 0x69, 0x47, 0x0f, 0xa4, 0x75, 0x1c, 0x73, 0xf4, 0x32, 0xb2, 0xb1, 0x8d, 0x85,
	0x8d, 0xed, 0x38, 0x94, 0x2c, 0xd2, 0x0a, 0x64, 0x84, 0xb4, 0x68, 0x17, 0x2c, 0x2c, 0x6f, 0x8a,
	0x6d, 0x0c, 0x32, 0x0f, 0x09, 0x1f, 0x5e, 0x46, 0x80, 0x81, 0x04, 0x03, 0x49, 0x8d, 0x04, 0x7e,
	0x21, 0x24, 0x1e, 0x4d, 0x72, 0x93, 0xbe, 0x6e, 0x1f, 0x97, 0xdc, 0xe6, 0x36, 0x4d, 0x6e, 0x73,
	0xdb, 0x6a, 0x76, 0xa5, 0xdc, 0x7e, 0x75, 0xda, 0xb4, 0x37, 0x7d, 0x7c, 0xc9, 0x77, 0xbf, 0x99,
	0x73, 0x66, 0xf6, 0xcc, 0xcc, 0x99, 0xd9, 0x87, 0x24, 0xbc, 0xa4, 0xee, 0xd7, 0x2f, 0x46, 0x7b,
	0xce, 0xcc, 0xfc, 0xff, 0x7f, 0xfe, 0xf7, 0xf9, 0xcf, 0x7f, 0x00, 0xdf, 0xd4, 0xd1, 0xde, 0xd2,
	0xba, 0x36, 0x14, 0xe8, 0xdc, 0x1c, 0xe8, 0x5c, 0x14, 0xec, 0xec, 0x08, 0x77, 0xf0, 0x79, 0xf4,
	0x6f, 0x05, 0x45, 0x6b, 0xd6, 0x17, 0xad, 0x09, 0x35, 0x05, 0x8b, 0x5b, 0xdb, 0xc3, 0x81, 0xce,
	0x76, 0x7f, 0x5b, 0xb1, 0x3a, 0xab, 0xa9, 0xa3, 0xad, 0xb8, 0xa9, 0x63, 0xc3, 0x86, 0x8e, 0x76,
	0xf2, 0x1f, 0xfc, 0x70, 0xc1, 0x17, 0xd6, 0x76, 0x74, 0xac, 0x6d, 0x0b, 0x14, 0xfb, 0x83, 0xad,
	0xc5, 0xfe, 0xf6, 0xf6, 0x8e, 0xb0, 0x3f, 0xdc, 0xda, 0xd1, 0x1e, 0x22, 0xa3, 0x85, 0xf8, 0xd9,
	0xa2, 0xb5, 0x81, 0xf6, 0xa2, 0xd0, 0xcb, 0xfe, 0xb5, 0x6b, 0x03, 0x9d, 0xc5, 0x1d, 0x41, 0x75,
	0x86, 0x75, 0xb6, 0xb0, 0xdf, 0x0d, 0xf2, 0x6a, 0x3a, 0x03, 0xfe, 0x70, 0x00, 0x06, 0x83, 0x8d,
	0x81, 0x8d, 0x7c, 0x25, 0xc8, 0x59, 0xd3, 0xfa, 0xca, 0xea, 0xd6, 0xe6, 0x7c, 0xce, 0xc3, 0x2d,
	0x98, 0x51, 0x7d, 0x3f, 0x82, 0x73, 0xc4, 0x82, 0xe8, 0xc1, 0xf3, 0xf2, 0xf0, 0xfe, 0xd8, 0xfe,
	0xb3, 0xd1, 0xb7, 0xb6, 0xca, 0x57, 0x90, 0x7c, 0xe1, 0xdd, 0xd1, 0xa1, 0x7e, 0x79, 0xe7, 0xc9,
	0x86, 0xda, 0xae, 0x25, 0x8d, 0xd9, 0x6b, 0x5a, 0x5f, 0x69, 0x68, 0xe6, 0xe7, 0x83, 0xac, 0x76,
	0xff, 0x86, 0x40, 0xbe, 0x4b, 0x7d, 0xee, 0x76, 0x04, 0x6f, 0x15, 0xf3, 0xf0, 0x43, 0xf2, 0xde,
	0x3d, 0xb1, 0x33, 0xe7, 0xbb, 0x96, 0x34, 0xaa, 0x13, 0xf8, 0x2d, 0x20, 0xb7, 0x39, 0x10, 0x6c,
	0xeb, 0xd8, 0xb2, 0x3a, 0xbc, 0x25, 0x18, 0xc8, 0x77, 0x7b, 0xb8, 0x05, 0xd9, 0xd5, 0xcf, 0x23,
	0xf8, 0xac, 0xc8, 0x8f, 0xbf, 0x71, 0x36, 0x76, 0xe5, 0x83, 0x58, 0xef, 0xa0, 0xfc, 0xf5, 0x37,
	0x62, 0x17, 0x46, 0xe4, 0x77, 0x77, 0x49, 0x15, 0xf4, 0x5f, 0x9f, 0x5e, 0xde, 0xed, 0x29, 0xf1,
	0x79, 0xaa, 0x6b, 0x56, 0xc8, 0x03, 0x97, 0xe4, 0xc3, 0x67, 0xf1, 0x98, 0xc7, 0xe3, 0xf5, 0x79,
	0x1e, 0x5d, 0x51, 0x37, 0x76, 0xed, 0x48, 0xec, 0xec, 0x2e, 0xfc, 0xdb, 0x0b, 0xbf, 0xa5, 0xfe,
	0xdf, 0xcf, 0x1f, 0x69, 0x04, 0xf8, 0x63, 0xcf, 0x6c, 0x09, 0x06, 0xf8, 0xfb, 0x41, 0xd6, 0x86,
	0xc0, 0x86, 0x8e, 0xfc, 0x2c, 0x15, 0xc6, 0x5b, 0x10, 0x04, 0x62, 0x8e, 0x7c, 0x6a, 0x47, 0xf4,
	0xc3, 0xb3, 0x0a, 0x74, 0xca, 0x90, 0xef, 0x75, 0x0e, 0xc1, 0xdf, 0x05, 0x35, 0xa2, 0x81, 0x2c,
	0xd2, 0x1d, 0x72, 0xcf, 0x11, 0x79, 0x64, 0x58, 0xa7, 0xc3, 0xd8, 0xe0, 0xc5, 0xe8, 0x85, 0xd7,
	0xaf, 0x73, 0x84, 0x58, 0xd7, 0x39, 0x15, 0xb5, 0xeb, 0x1c, 0x8d, 0x99, 0x54, 0xc9, 0x57, 0x74,
	0x7b, 0x04, 0x65, 0x40, 0xf0, 0x79, 0x84, 0x0d, 0x5b, 0xfc, 0xc1, 0xa0, 0x50, 0xe8, 0x11, 0xa8,
	0x29, 0x82, 0xcf, 0x53, 0x52, 0xe8, 0x11, 0x94, 0x0f, 0x2b, 0x53, 0x30, 0x28, 0x42, 0x44, 0xf8,
	0x85, 0x1b, 0xdc, 0x42, 0x7d, 0x3f, 0x14, 0xe4, 0x17, 0x82, 0x9c, 0xce, 0x40, 0x68, 0x53, 0x5b,
	0x58, 0x5d, 0x97, 0xe9, 0xd5, 0xb7, 0x21, 0x38, 0x53, 0xcc, 0x8b, 0xbe, 0x75, 0x66, 0xec, 0xe4,
	0xee, 0xd8, 0xc8, 0xbe, 0xe8, 0xbb, 0x47, 0x1b, 0xc9, 0x04, 0xbe, 0x14, 0x64, 0x35, 0x75, 0x34,
	0xe3, 0x85, 0x98, 0x29, 0xcd, 0x5a, 0x44, 0x98, 0xa7, 0xae, 0xb3, 0xb3, 0xa6, 0xa3, 0x39, 0x50,
	0x3d, 0x13, 0xc1, 0x5c, 0x71, 0xc6, 0xf8, 0xfe, 0xc3, 0x63, 0x83, 0x83, 0xb1, 0x13, 0xaf, 0x35,
	0xaa, 0x93, 0xf9, 0x07, 0xc1, 0xb4, 0x0d, 0x81, 0x50, 0xc8, 0xbf, 0x16, 0x2f, 0xc8, 0x0c, 0xf2,
	0x01, 0x3c, 0x2d, 0xda, 0xd7, 0x37, 0x76, 0xed, 0x7c, 0xa3, 0x36, 0x83, 0xaf, 0x03, 0x59, 0xcd,
	0xfe, 0xb0, 0x5f, 0x25, 0x63, 0xae, 0x34, 0x6f, 0x91, 0x81, 0xc3, 0x0d, 0x70, 0x2f, 0x52, 0xfe,
	0xa7, 0xd6, 0x1f, 0xf6, 0x57, 0xe7, 0x22, 0x38, 0x5d, 0xcc, 0x21, 0xa0, 0xaa, 0x8f, 0x17, 0x3c,
	0x0f, 0xa6, 0x6b, 0xc3, 0xfc, 0x32, 0x90, 0xe3, 0x0f, 0x06, 0xe3, 0x7c, 0x57, 0x8e, 0xa0, 0x24,
	0xe6, 0xea, 0xf4, 0x6e, 0xa8, 0x95, 0xe6, 0x46, 0x7b, 0xf6, 0xca, 0x3b, 0x8f, 0xe3, 0x85, 0x90,
	0xf7, 0xf6, 0x8e, 0x5d, 0xdb, 0x2f, 0x1f, 0x79, 0x57, 0x9f, 0x11, 0xeb, 0xdf, 0xd6, 0x50, 0xdb,
	0x98, 0xed, 0x0f, 0x06, 0x1b, 0x9a, 0x7d, 0x1f, 0x72, 0x08, 0x0e, 0x72, 0x60, 0x89, 0x68, 0xa4,
	0xa2, 0x65, 0x19, 0xe5, 0x7d, 0x7b, 0xe4, 0xe1, 0xfd, 0xd7, 0x39, 0x42, 0xba, 0xeb, 0x9c, 0x4a,
	0x8c, 0xeb, 0x9c, 0x86, 0xa9, 0xb4, 0x9e, 0x6f, 0xed, 0xf6, 0x08, 0x78, 0x54, 0xf0, 0x79, 0xc2,
	0x9d, 0x9b, 0x02, 0x85, 0x1e, 0x41, 0x99, 0xa4, 0x2f, 0x9d, 0x3a, 0x51, 0x59, 0xbd, 0xa7, 0x1e,
	0x57, 0x57, 0xd7, 0x1f, 0xf6, 0x0b, 0x3e, 0x4f, 0xb7, 0x80, 0xd1, 0x51, 0x06, 0x4a, 0xd6, 0x54,
	0x2c, 0xf6, 0x2f, 0xae, 0xaa, 0x2c, 0x0a, 0x54, 0x35, 0x79, 0x8b, 0xbc, 0xde, 0x40, 0x55, 0x51,
	0x65, 0x93, 0x54, 0x5a, 0x54, 0x2e, 0x95, 0x97, 0x95, 0x94, 0xb4, 0x54, 0x55, 0x49, 0x8b, 0x2b,
	0x85, 0x48, 0x44, 0xe8, 0x75, 0x83, 0xdc, 0xa7, 0x37, 0x05, 0x3a, 0xb7, 0x10, 0x59, 0x2c, 0x37,
	0xc9, 0xe2, 0x1c, 0x04, 0xef, 0x11, 0xef, 0x4a, 0x28, 0x88, 0xab, 0x74, 0x52, 0x62, 0x51, 0xac,
	0x47, 0xb0, 0x46, 0x9c, 0x19, 0x3b, 0x32, 0x10, 0x3d, 0xb1, 0x43, 0xa7, 0x66, 0xf1, 0xf8, 0xd6,
	0xb7, 0xe4, 0x93, 0xbf, 0xf7, 0xe9, 0xe5, 0xdd, 0xe3, 0xc7, 0xde, 0x8d, 0x7d, 0x73, 0x38, 0x7a,
	0xe8, 0x13, 0xf9, 0xfc, 0x76, 0xf9, 0xf8, 0xf0, 0xe8, 0x70, 0xaf, 0x71, 0x6a, 0xf4, 0xf8, 0x7b,
	0x63, 0x83, 0x5f, 0x57, 0x5e, 0xaf, 0xd2, 0x96, 0x5f, 0x43, 0xe4, 0x1c, 0xb3, 0xc9, 0x93, 0x08,
	0x3e, 0x2e, 0xf2, 0xf4, 0x13, 0x58, 0xda, 0xa5, 0xd2, 0x24, 0x3f, 0x80, 0xa7, 0xeb, 0x1f, 0x51,
	0xdf, 0xed, 0xdb, 0xc6, 0x21, 0xb8, 0x95, 0x03, 0x15, 0x22, 0x4d, 0x0f, 0x69, 0x0e, 0x9e, 0x15,
	0xdd, 0xbd, 0x43, 0x1e, 0xe8, 0xc7, 0x4f, 0x8f, 0x5e, 0x3b, 0x19, 0x7d, 0x6d, 0xd0, 0x24, 0x8d,
	0x52, 0x3d, 0x5f, 0xdb, 0xed, 0x49, 0x75, 0x01, 0x0a, 0xcd, 0xa2, 0x1a, 0x11, 0xe4, 0x2c, 0x90,
	0x17, 0x07, 0x20, 0xd3, 0xa4, 0xb0, 0xd0, 0x20, 0x85, 0xb9, 0xda, 0x17, 0x60, 0x30, 0xc8, 0x10,
	0x36, 0xdf, 0x61, 0x37, 0x82, 0x07, 0xdc, 0x60, 0xa9, 0x68, 0xc0, 0xc8, 0x9e, 0xa6, 0x09, 0x45,
	0xe3, 0x0f, 0x5d, 0xfc, 0xf7, 0x5c, 0xe9, 0x0a, 0x07, 0x5e, 0x28, 0xc1, 0x27, 0xb4, 0x54, 0x2e,
	0xae, 0xf2, 0xaf, 0xa9, 0x6c, 0x29, 0x6a, 0x5a, 0x1c, 0x28, 0xc7, 0x4b, 0x53, 0xd5, 0xdc, 0x54,
	0xae, 0x2f, 0x8d, 0xf2, 0x94, 0xb6, 0x90, 0x29, 0xae, 0xa3, 0x93, 0xc6, 0x6d, 0x52, 0xd4, 0x42,
	0x47, 0xa7, 0x32, 0x29, 0xd0, 0xd6, 0xa1, 0xcc, 0x69, 0xf3, 0x87, 0xc2, 0xab, 0x37, 0x74, 0x34,
	0xb7, 0xb6, 0x6c, 0x59, 0xbd, 0x66, 0x0b, 0x35, 0x80, 0x95, 0xb3, 0x10, 0x0e, 0x84, 0xc2, 0xca,
	0x9f, 0xa1, 0xb0, 0x3f, 0x6c, 0x78, 0x4b, 0xa0, 0x79, 0xb5, 0x3f, 0x2c, 0xf8, 0x04, 0xa9, 0xc4,
	0x5b, 0x55, 0x54, 0xb2, 0xb8, 0x48, 0xaa, 0xf2, 0x78, 0xbd, 0xbe, 0xf2, 0xc5, 0x3e, 0xa9, 0x44,
	0x99, 0xbf, 0x29, 0xd8, 0xec, 0x3c, 0x27, 0x12, 0x11, 0xfe, 0x86, 0x03, 0xb3, 0xb4, 0x55, 0x59,
	0xd6, 0x1a, 0x0a, 0x2b, 0xc2, 0x5f, 0x68, 0x12, 0xfe, 0x3b, 0x10, 0xe4, 0x35, 0x29, 0xb6, 0xca,
	0x7c, 0x29, 0xc8, 0x0a, 0x2a, 0x5c, 0xe3, 0x52, 0x79, 0x21, 0x4f, 0xe3, 0x85, 0xe5, 0xfe, 0xb5,
	0x01, 0xc2, 0x43, 0x72, 0xcf, 0xf6, 0xf1, 0x93, 0x1f, 0x8f, 0x0d, 0x5c, 0x8d, 0x5d, 0x19, 0x68,
	0x54, 0x27, 0xfb, 0xd6, 0x21, 0x18, 0x00, 0x0f, 0x89, 0xe6, 0x4f, 0x4b, 0xf9, 0x98, 0x27, 0x88,
	0x7c, 0xf6, 0x1c, 0x1a, 0x3b, 0xc9, 0xb0, 0x77, 0xca, 0x1b, 0xa4, 0x07, 0xf8, 0x79, 0xdd, 0x1e,
	0x21, 0x88, 0xd7, 0xb8, 0x5b, 0xa1, 0x4d, 0x67, 0x98, 0xd0, 0xa6, 0xad, 0x75, 0x43, 0xab, 0xf2,
	0xef, 0xf2, 0x92, 0x48, 0x44, 0xd8, 0x93, 0x03, 0x6e, 0x35, 0x7e, 0x25, 0xd3, 0x84, 0x69, 0xa9,
	0x41, 0x98, 0xe6, 0x1b, 0x4d, 0x9a, 0x19, 0x74, 0x47, 0xab, 0xd6, 0x46, 0x59, 0x35, 0x09, 0xe4,
	0x86, 0x3b, 0xc2, 0xfe, 0xb6, 0xd5, 0x4d, 0x1d, 0x9b, 0xda, 0x31, 0x9e, 0xb7, 0x68, 0x78, 0x6e,
	0x1d, 0x89, 0x1e, 0x38, 0x1f, 0xdd, 0x33, 0x30, 0xbe, 0xa3, 0xaf, 0x11, 0xa8, 0xb3, 0x6a, 0x94,
	0x49, 0x8a, 0x58, 0xb7, 0xb6, 0xb7, 0x74, 0xe4, 0xbb, 0x3c, 0x6e, 0x67, 0xb1, 0x56, 0x66, 0xf9,
	0x3e, 0x74, 0x23, 0x38, 0xe8, 0x06, 0xf5, 0xa2, 0x85, 0xbe, 0xac, 0x65, 0x4c, 0x28, 0xd4, 0xa3,
	0x2e, 0xfe, 0x6f, 0xd3, 0x13, 0xea, 0x6e, 0x81, 0xc2, 0x54, 0xf0, 0x79, 0xbc, 0x85, 0x1e, 0x41,
	0x81, 0x50, 0xf0, 0xbd, 0xf8, 0xb9, 0xb8, 0xd3, 0xe2, 0xbe, 0x4a, 0x91, 0x87, 0x2c, 0x90, 0xf7,
	0xac, 0x3a, 0xd3, 0xd1, 0xed, 0xa6, 0xed, 0xa4, 0x62, 0xf0, 0x59, 0xd6, 0xbe, 0xd0, 0x64, 0xed,
	0x69, 0x3d, 0xa1, 0x99, 0xf0, 0xb8, 0xf1, 0x7e, 0xc8, 0x60, 0xbc, 0xe7, 0x23, 0x38, 0xcf, 0xe8,
	0xa4, 0x4b, 0x7c, 0xf4, 0xc8, 0x47, 0x71, 0xf7, 0xc8, 0xe8, 0xb8, 0x3f, 0x65, 0x74, 0xdc, 0xb3,
	0x54, 0xc7, 0x7d, 0x11, 0x82, 0x0f, 0x8a, 0x79, 0xc4, 0x71, 0xc7, 0x2e, 0x3b, 0x79, 0x07, 0xfd,
	0x1b, 0xdb, 0x1d, 0x2f, 0x27, 0xee, 0x78, 0x76, 0x1c, 0x67, 0xe2, 0x8e, 0xeb, 0x70, 0xa8, 0x7f,
	0x61, 0x8b, 0xa4, 0xb9, 0xe8, 0x7c, 0x2d, 0xc8, 0x56, 0x97, 0x25, 0x3f, 0x87, 0x82, 0x80, 0x78,
	0x81, 0x3b, 0x3f, 0x89, 0x6e, 0x7d, 0xcd, 0x88, 0x05, 0xfe, 0x2d, 0x0e, 0x01, 0x7e, 0xd8, 0xf7,
	0x16, 0x87, 0xe0, 0x9b, 0x1c, 0xf0, 0x89, 0x86, 0x95, 0x90, 0xf2, 0xe9, 0x47, 0x99, 0xee, 0xc5,
	0x75, 0x8e, 0x50, 0x5c, 0x7a, 0x94, 0xaf, 0xa3, 0x1c, 0xfc, 0xf6, 0xc0, 0xcb, 0x1e, 0xf5, 0xdf,
	0xc9, 0xf8, 0xf8, 0x34, 0x6b, 0x45, 0x84, 0x43, 0x2e, 0x70, 0x0b, 0x05, 0x45, 0x86, 0x29, 0x47,
	0xdf, 0x16, 0x04, 0x37, 0x83, 0x1a, 0xd1, 0x08, 0x22, 0x8b, 0x52, 0x09, 0xf5, 0x4b, 0x31, 0x5f,
	0x94, 0x8a, 0x76, 0x89, 0x08, 0x17, 0x39, 0x90, 0x57, 0x1b, 0x68, 0x0b, 0xdc, 0x68, 0x49, 0xf1,
	0x3d, 0x82, 0xe0, 0x17, 0x41, 0x99, 0x68, 0xf8, 0xb8, 0xc4, 0xcb, 0x3d, 0x27, 0xc6, 0x0f, 0x9f,
	0xb2, 0x89, 0x01, 0x35, 0xb6, 0xc8, 0xe2, 0x5d, 0xdd, 0x11, 0xe1, 0x6d, 0x17, 0xb8, 0x85, 0x7a,
	0x38, 0xd3, 0xd6, 0x34, 0x84, 0x60, 0x10, 0x3c, 0x2c, 0x1a, 0x41, 0x34, 0x22, 0x38, 0xf9, 0xab,
	0x79, 0x21, 0x1b, 0xcc, 0xc2, 0x11, 0x59, 0x8d, 0x6a, 0x5f, 0xed, 0x1d, 0x9d, 0xd4, 0x16, 0x11,
	0xcf, 0xb6, 0xaa, 0x3b, 0xd1, 0xa0, 0xee, 0xee, 0x44, 0xf0, 0x76, 0x71, 0x96, 0xa2, 0x99, 0xde,
	0xdc, 0x13, 0xbb, 0x32, 0x60, 0xd2, 0x6e, 0x25, 0x20, 0xbb, 0x25, 0xe8, 0x0f, 0xaf, 0x23, 0xc9,
	0x81, 0x02, 0x04, 0xef, 0x12, 0xf9, 0xf8, 0xe4, 0x73, 0x7b, 0xc7, 0x2e, 0x0e, 0xca, 0x57, 0xb7,
	0x75, 0x6d, 0x9d, 0xde, 0x88, 0x27, 0xf2, 0xf3, 0x41, 0xd6, 0xa6, 0x50, 0xa0, 0x93, 0xa8, 0x2f,
	0x9c, 0xf1, 0x88, 0x1e, 0xdc, 0x31, 0x3a, 0xf2, 0x89, 0xc2, 0x85, 0x3d, 0x17, 0x95, 0x57, 0x2b,
	0x13, 0xf8, 0x72, 0x00, 0x94, 0xff, 0xae, 0x5e, 0xdb, 0xd9, 0xb1, 0x29, 0xa8, 0x6a, 0xad, 0x38,
	0x30, 0xf1, 0xe9, 0xb1, 0x91, 0x6d, 0x5d, 0x4b, 0x1a, 0x67, 0x28, 0x33, 0x1f, 0x55, 0x26, 0xf2,
	0x3e, 0x30, 0xb3, 0xa5, 0xb5, 0x2d, 0xb0, 0x3a, 0xd8, 0xd9, 0xba, 0xb9, 0xb5, 0x2d, 0xb0, 0x36,
	0x90, 0x3f, 0xcd, 0xf2, 0xa5, 0xe8, 0xb1, 0x37, 0xc6, 0x0f, 0xef, 0xed, 0x5a, 0xd2, 0x78, 0x8b,
	0x32, 0x75, 0xb9, 0x36, 0x93, 0xf7, 0x81, 0x5c, 0xf5, 0xd9, 0x96, 0x8e, 0xce, 0x0d, 0xfe, 0x70,
	0xfe, 0x74, 0xf5, 0xc1, 0xbb, 0x11, 0xbc, 0x53, 0xc1, 0x49, 0xfd, 0xe6, 0x87, 0x23, 0xb1, 0x91,
	0xe3, 0xd1, 0x13, 0x97, 0xe5, 0xcb, 0x7d, 0x5d, 0x4b, 0x1a, 0x81, 0x32, 0xbb, 0x5e, 0x9d, 0xcc,
	0x7f, 0x15, 0xcc, 0x50, 0x9f, 0xdd, 0xa0, 0x70, 0xe0, 0x0c, 0x55, 0xc7, 0xd6, 0x20, 0xb8, 0x44,
	0xfc, 0x22, 0x79, 0x52, 0xd5, 0xe8, 0x1e, 0xaf, 0x2f, 0x7a, 0x70, 0x47, 0xf4, 0xe8, 0xfb, 0xf8,
	0x47, 0x8f, 0xe4, 0x1b, 0x1d, 0xde, 0x3d, 0x76, 0xed, 0x88, 0xdc, 0xf3, 0x09, 0xf9, 0xa5, 0xd4,
	0x17, 0x3d, 0x7b, 0x32, 0x7a, 0xec, 0x1a, 0xfe, 0xb3, 0x6b, 0x49, 0xe3, 0x74, 0xe5, 0xad, 0x4f,
	0x28, 0x9c, 0xaa, 0xe5, 0x61, 0x80, 0x7d, 0x1e, 0x66, 0x3b, 0x87, 0xe0, 0xeb, 0x1c, 0x80, 0xa2,
	0x99, 0x61, 0xa8, 0x20, 0x1e, 0x2f, 0x8d, 0x9d, 0x1c, 0x92, 0xa4, 0x8c, 0xf4, 0x30, 0xff, 0x50,
	0xb7, 0x47, 0x50, 0x97, 0x4c, 0x61, 0xc4, 0xe2, 0x40, 0xb8, 0x89, 0x0e, 0xf6, 0x88, 0x8f, 0xb7,
	0xc5, 0xbf, 0xa1, 0x4d, 0x60, 0xe5, 0x62, 0xfe, 0xcd, 0x0d, 0x6e, 0x35, 0x82, 0x70, 0x53, 0xf9,
	0xae, 0x66, 0xd0, 0x1d, 0x7d, 0xd7, 0x67, 0x29, 0xdf, 0xb5, 0x01, 0xe4, 0x34, 0xb5, 0xac, 0x8d,
	0xcb, 0xa5, 0x84, 0x60, 0xb1, 0x9a, 0x91, 0xc1, 0x54, 0x6f, 0xa8, 0x95, 0x3c, 0x76, 0x19, 0x19,
	0x6d, 0x46, 0x63, 0x76, 0x53, 0xcb, 0xda, 0x86, 0x66, 0xdf, 0xc7, 0x1c, 0x82, 0x17, 0x38, 0x50,
	0x23, 0x5a, 0x08, 0x69, 0x59, 0xcc, 0x84, 0x3a, 0xe7, 0x25, 0x7e, 0x5d, 0x9a, 0xfe, 0x29, 0xc6,
	0x46, 0xf9, 0xbd, 0x42, 0xaa, 0xa8, 0xac, 0xac, 0x5a, 0xe3, 0x4f, 0x94, 0x90, 0xf9, 0x51, 0x36,
	0x98, 0xa9, 0xba, 0xd5, 0x71, 0x6d, 0xe5, 0x64, 0x7e, 0x30, 0x06, 0x76, 0x9a, 0xeb, 0x2d, 0xce,
	0xa4, 0xba, 0x3a, 0x11, 0xec, 0x60, 0x3d, 0xaa, 0xe7, 0x68, 0x9e, 0x92, 0xfb, 0x06, 0xc7, 0xb7,
	0xbe, 0xe5, 0x90, 0x42, 0x61, 0x3d, 0x26, 0xa3, 0xdd, 0xb4, 0x7e, 0x7b, 0x50, 0xe1, 0x7b, 0x73,
	0x0e, 0x67, 0x95, 0xbe, 0xb6, 0x6e, 0x4b, 0x8a, 0x48, 0x5f, 0xde, 0xe2, 0x24, 0x3f, 0x4f, 0xa7,
	0x88, 0xd4, 0xf5, 0xe6, 0xbf, 0x46, 0xd4, 0x2e, 0xd6, 0xa4, 0x2f, 0x21, 0xb8, 0x56, 0x4b, 0x11,
	0xd1, 0x90, 0x4d, 0x05, 0x7e, 0x58, 0x95, 0x7f, 0x4d, 0x53, 0xe5, 0x58, 0x33, 0x2b, 0x71, 0xae,
	0x38, 0xcb, 0xa4, 0xc7, 0x27, 0xff, 0xeb, 0xba, 0x61, 0xf0, 0x9d, 0xe4, 0x10, 0x3c, 0xc6, 0x81,
	0x2f, 0x8a, 0x26, 0xee, 0xd1, 0x42, 0x32, 0xfc, 0x86, 0x04, 0xce, 0xe5, 0x2a, 0xfe, 0xc5, 0x14,
	0xd4, 0x56, 0xaa, 0xcc, 0x2d, 0xfc, 0x30, 0x9b, 0xe4, 0x1c, 0x32, 0x55, 0xab, 0x35, 0x1b, 0xb4,
	0xda, 0x4c, 0xed, 0x0b, 0x18, 0xdc, 0xea, 0x25, 0x08, 0x3e, 0x6c, 0x64, 0x2a, 0x4c, 0x4e, 0x69,
	0x3e, 0x56, 0x4a, 0x24, 0xf6, 0xd5, 0x94, 0x92, 0x66, 0x29, 0x4e, 0xc7, 0x46, 0xb6, 0xe3, 0x89,
	0x24, 0x2d, 0xf6, 0xe7, 0x6e, 0x04, 0xff, 0xc4, 0x0d, 0xea, 0x44, 0x33, 0x31, 0x58, 0x6b, 0x95,
	0x50, 0x39, 0xbd, 0xe6, 0xe6, 0x7f, 0x9d, 0x76, 0x4e, 0x4c, 0x5b, 0xc2, 0xe4, 0x56, 0xb0, 0xd0,
	0x96, 0x37, 0xcc, 0xac, 0x91, 0x74, 0xf0, 0xad, 0xbd, 0x37, 0xe5, 0x00, 0x7c, 0xc2, 0xe1, 0x35,
	0x3b, 0xba, 0xf6, 0x96, 0x14, 0x95, 0x54, 0x7a, 0xbc, 0x55, 0xbe, 0x32, 0xfb, 0xe8, 0x1a, 0xcf,
	0x91, 0x4a, 0x7c, 0x25, 0xa5, 0xbe, 0x92, 0x0a, 0x45, 0x69, 0xff, 0xd8, 0x05, 0x78, 0x6a, 0x2d,
	0x9d, 0xf3, 0x69, 0x76, 0xca, 0x3a, 0xb9, 0x1c, 0x7a, 0x42, 0x0d, 0x62, 0x97, 0x43, 0xd7, 0xd2,
	0x75, 0xee, 0x54, 0xd2, 0x75, 0x78, 0x67, 0x6a, 0xa5, 0xc8, 0xc0, 0x4e, 0x9a, 0x8f, 0xbf, 0x40,
	0x7f, 0x35, 0xd6, 0xbf, 0x8d, 0x68, 0x2a, 0x76, 0x06, 0x2f, 0xee, 0x25, 0xa9, 0xa9, 0xbc, 0xdf,
	0xe6, 0xe7, 0xea, 0xa9, 0x3c, 0x87, 0x4c, 0xde, 0x68, 0x0e, 0xb8, 0xdd, 0xf2, 0xfd, 0x4c, 0x53,
	0x1d, 0x8f, 0x1b, 0x54, 0x87, 0xc8, 0x48, 0xe6, 0x19, 0xa1, 0x77, 0xf4, 0x89, 0x3a, 0x26, 0x98,
	0xcf, 0x2b, 0x36, 0xe4, 0xf3, 0xcc, 0x7a, 0x8c, 0x91, 0xd2, 0x7b, 0x2d, 0x0b, 0xc1, 0x5f, 0xb9,
	0xc1, 0xf3, 0x22, 0x8b, 0xd0, 0x49, 0xac, 0x74, 0x42, 0x2d, 0x75, 0xc2, 0xcd, 0x1f, 0x73, 0xa7,
	0xa9, 0xa5, 0x3c, 0xb6, 0x69, 0x3e, 0xcf, 0x8b, 0x9f, 0xab, 0xb0, 0x49, 0x51, 0x61, 0xab, 0x22,
	0x11, 0xe1, 0x9f, 0x72, 0xc0, 0x2c, 0x9c, 0x6d, 0xb9, 0x31, 0x81, 0x72, 0xa1, 0xc9, 0x21, 0xa4,
	0x73, 0x23, 0x9a, 0x97, 0x17, 0xf7, 0xef, 0x1e, 0x32, 0xf8, 0x77, 0x38, 0x8b, 0x68, 0xf0, 0xec,
	0xb4, 0x0c, 0x20, 0x2b, 0xce, 0xae, 0x35, 0x3a, 0x67, 0x6a, 0xf6, 0xce, 0xe2, 0x9c, 0xdd, 0x61,
	0x78, 0x81, 0x43, 0xec, 0x9d, 0x93, 0x5a, 0xec, 0x3d, 0x2d, 0xfd, 0xd8, 0x7b, 0x7a, 0xba, 0xb1,
	0xf7, 0x8c, 0xb4, 0x63, 0x6f, 0x30, 0x15, 0xb1, 0xb7, 0x96, 0x74, 0xcd, 0x4d, 0x33, 0xe9, 0x9a,
	0x47, 0xa7, 0x7d, 0xd5, 0xf5, 0x31, 0x26, 0x5d, 0xe9, 0xdf, 0x2c, 0x49, 0xd7, 0xc3, 0x1c, 0x82,
	0x07, 0x38, 0x50, 0x2f, 0x9a, 0xb9, 0x5b, 0xcb, 0x26, 0x26, 0xe3, 0x1a, 0x5f, 0xe7, 0x08, 0xb3,
	0x4a, 0x8f, 0xf3, 0x0d, 0x06, 0x1f, 0xb9, 0x3d, 0xf0, 0xf2, 0x6a, 0xf5, 0x8f, 0x42, 0x76, 0x5a,
	0xd6, 0x31, 0x09, 0x7b, 0xcc, 0x05, 0x6e, 0x35, 0x42, 0x95, 0x69, 0x39, 0xbb, 0x57, 0x11, 0xdc,
	0x02, 0xea, 0x45, 0x0b, 0x94, 0x2c, 0xe2, 0x4d, 0x7e, 0xf2, 0x6e, 0x8c, 0x03, 0xb3, 0x70, 0xb6,
	0x30, 0x03, 0x75, 0x92, 0xef, 0x71, 0x04, 0x97, 0x82, 0x25, 0xa2, 0x19, 0x42, 0x2d, 0xa3, 0x99,
	0x28, 0x55, 0xa4, 0x71, 0x14, 0xce, 0xdd, 0x1e, 0x72, 0x81, 0x5b, 0x8d, 0x2f, 0xca, 0x34, 0x56,
	0xd8, 0x8c, 0x60, 0x08, 0x2c, 0x11, 0x2d, 0x50, 0x1a, 0xf1, 0x9d, 0x7c, 0x26, 0xf8, 0xee, 0x34,
	0x70, 0x27, 0x9d, 0xc4, 0xa9, 0xe9, 0x68, 0x0f, 0x07, 0xda, 0xc3, 0x93, 0xc5, 0x0b, 0x76, 0xfb,
	0x56, 0x55, 0x60, 0x86, 0x42, 0xc3, 0xd6, 0x70, 0x9c, 0x1d, 0xbe, 0x80, 0xe0, 0xdd, 0xe2, 0x1d,
	0xf8, 0x81, 0x68, 0xdf, 0xde, 0xd1, 0xe1, 0x53, 0x35, 0xea, 0x0c, 0x8f, 0xfa, 0xdc, 0x74, 0x3c,
	0xbd, 0xa1, 0x99, 0x7f, 0x0e, 0xcc, 0x68, 0xf3, 0xaf, 0x09, 0xb4, 0x85, 0x56, 0x77, 0x74, 0xe6,
	0x67, 0xa9, 0x4e, 0xd8, 0x6d, 0xda, 0x82, 0x2c, 0x53, 0x07, 0x9e, 0xf0, 0x07, 0xb5, 0xad, 0xb0,
	0xed, 0x6f, 0xca, 0x03, 0x97, 0x62, 0x1f, 0x7d, 0x5d, 0xbe, 0x7c, 0x40, 0x9a, 0x2d, 0x9f, 0xda,
	0x23, 0xef, 0xed, 0x79, 0x6a, 0xf9, 0xab, 0x2b, 0xe1, 0xb2, 0x67, 0xeb, 0xb0, 0xba, 0x6e, 0x9c,
	0x8e, 0x5f, 0xf6, 0x54, 0x27, 0xff, 0x02, 0x00, 0xe4, 0xc5, 0xfe, 0xf6, 0xe6, 0xfc, 0xec, 0x09,
	0xbf, 0x99, 0x80, 0x09, 0xdb, 0x9b, 0x15, 0xa3, 0xd5, 0x84, 0x09, 0xab, 0xe0, 0x4b, 0x27, 0x8c,
	0xc9, 0x7b, 0xce, 0x5d, 0x95, 0xf7, 0xee, 0xa9, 0x51, 0x31, 0x9d, 0x41, 0x66, 0x36, 0x34, 0xf3,
	0x65, 0x20, 0x4f, 0x7b, 0x2c, 0xd4, 0xfa, 0x0a, 0x4e, 0x17, 0x6b, 0xfe, 0x29, 0x7e, 0x50, 0x3e,
	0x75, 0x46, 0x3e, 0xdf, 0xd7, 0x98, 0x4b, 0xa6, 0xad, 0x68, 0x7d, 0x25, 0xa0, 0x98, 0x52, 0xd5,
	0x20, 0xd0, 0x06, 0x8e, 0x65, 0x02, 0x7c, 0x7f, 0xe0, 0x46, 0xf0, 0xbb, 0x6e, 0x10, 0x10, 0x6d,
	0x38, 0x40, 0xca, 0xc7, 0xc9, 0x3c, 0xc2, 0x7b, 0xea, 0x07, 0xed, 0x25, 0x2e, 0xbe, 0xa0, 0xd7,
	0xb9, 0xec, 0xd6, 0xf6, 0xe6, 0x40, 0xd7, 0x75, 0x8e, 0xc2, 0x5a, 0xfa, 0x91, 0x8b, 0xff, 0xa1,
	0x12, 0x4b, 0xeb, 0xd3, 0x14, 0x1e, 0xf4, 0xfa, 0xab, 0x9a, 0xa4, 0xe6, 0x35, 0x5e, 0xc5, 0x9d,
	0x2b, 0x73, 0x72, 0xe7, 0xf4, 0xf7, 0x28, 0x4f, 0x95, 0xd5, 0x48, 0xb5, 0x65, 0x35, 0x65, 0x52,
	0xa9, 0xb7, 0xd6, 0x5b, 0x5f, 0x5f, 0x55, 0x5a, 0xb5, 0xb8, 0xbc, 0x72, 0x71, 0x95, 0x24, 0x55,
	0xd4, 0xd7, 0x55, 0x49, 0x52, 0x79, 0x49, 0x85, 0xb7, 0xa2, 0xa4, 0x52, 0xaa, 0xa9, 0x86, 0x75,
	0xb5, 0x15, 0xb0, 0x0c, 0x56, 0x56, 0x56, 0xd6, 0x4a, 0xb0, 0xb6, 0xa6, 0xac, 0xaa, 0xa4, 0x1a,
	0x56, 0x55, 0x97, 0x95, 0xd1, 0x6f, 0x54, 0x08, 0xab, 0xf8, 0xbd, 0x25, 0x52, 0x99, 0xea, 0x24,
	0x6a, 0x0c, 0x80, 0x1d, 0x60, 0xfc, 0xb7, 0x9a, 0x6d, 0x6c, 0xeb, 0xd8, 0xd4, 0x8c, 0x7d, 0xd0,
	0xc0, 0xc6, 0x57, 0x55, 0xd7, 0xaf, 0x35, 0x28, 0xf8, 0x04, 0xaf, 0xb4, 0x78, 0x51, 0xc9, 0xa2,
	0x92, 0x45, 0x5e, 0xe5, 0x17, 0xdd, 0x70, 0x29, 0xee, 0x75, 0x91, 0x57, 0x88, 0x44, 0x0a, 0x3d,
	0xa9, 0xbc, 0x44, 0xb2, 0xbe, 0x44, 0x12, 0x22, 0x91, 0x55, 0x94, 0xa9, 0x53, 0xcc, 0x1f, 0x26,
	0xa1, 0x87, 0xa0, 0x20, 0x44, 0x84, 0x73, 0x2e, 0x70, 0x17, 0x73, 0x0d, 0x33, 0x4d, 0xcd, 0x91,
	0x42, 0xb0, 0x27, 0x44, 0x3b, 0x70, 0x59, 0x3c, 0x37, 0xf9, 0x5a, 0xef, 0xa7, 0x59, 0xe0, 0x0e,
	0x2a, 0x18, 0xcb, 0x7c, 0xa5, 0xf7, 0x01, 0x07, 0x72, 0x30, 0x1b, 0x11, 0x95, 0x57, 0x6c, 0x1b,
	0x04, 0xc7, 0x91, 0x21, 0x4a, 0xab, 0xae, 0x3d, 0xdc, 0xb9, 0xa5, 0xba, 0x15, 0xc1, 0x16, 0x31,
	0x1f, 0xd7, 0x85, 0x8d, 0xed, 0x7c, 0x3d, 0xf6, 0xfa, 0xa5, 0xe8, 0x89, 0x1d, 0xb1, 0x73, 0x57,
	0x49, 0x9a, 0xed, 0x31, 0xfc, 0xdb, 0xe3, 0x2b, 0xf1, 0xaf, 0xf2, 0xe0, 0xa5, 0x05, 0xe3, 0xc7,
	0xde, 0x8d, 0x9d, 0x3b, 0x18, 0x3b, 0xf0, 0x1e, 0x4b, 0xbb, 0x2d, 0x2c, 0xf4, 0xcc, 0xa7, 0x39,
	0x7b, 0xbd, 0x57, 0xf0, 0x09, 0x9b, 0x15, 0x8e, 0x9f, 0xdf, 0x48, 0x20, 0x2d, 0xa8, 0x02, 0xb9,
	0x14, 0x04, 0xfc, 0xad, 0xc0, 0xbd, 0x3e, 0xb0, 0x05, 0xd3, 0xb5, 0x51, 0xf9, 0x27, 0x3f, 0x1b,
	0x64, 0x6f, 0xf6, 0xb7, 0x6d, 0x22, 0x35, 0xc6, 0x8d, 0xf8, 0x0f, 0x9f, 0xab, 0x92, 0xf3, 0x5d,
	0xe5, 0x10, 0x1c, 0xe6, 0x40, 0x50, 0x64, 0x2f, 0x93, 0x54, 0x12, 0x3d, 0x71, 0x29, 0xba, 0x67,
	0xc0, 0x8a, 0x08, 0x9d, 0xe4, 0x4b, 0x45, 0x63, 0x11, 0x98, 0x49, 0xa9, 0x61, 0x5a, 0x3a, 0x4a,
	0x23, 0x86, 0xa7, 0x3b, 0x12, 0x11, 0xfe, 0xd5, 0x05, 0xee, 0x64, 0x81, 0x9e, 0x69, 0xa9, 0x95,
	0x12, 0x43, 0x6a, 0x65, 0x16, 0x95, 0xcd, 0x50, 0xe0, 0x65, 0x15, 0x1e, 0x1e, 0xe1, 0x10, 0x3c,
	0xc4, 0x81, 0x66, 0xd1, 0x06, 0xbf, 0x54, 0xd6, 0x66, 0xf2, 0x25, 0xfb, 0x7d, 0x37, 0xb8, 0xdb,
	0x0a, 0x57, 0x7a, 0x49, 0xc3, 0x1b, 0x26, 0xdd, 0x5a, 0xfa, 0x30, 0x2b, 0x95, 0xf4, 0xe1, 0x77,
	0x38, 0x04, 0xaf, 0x72, 0xe0, 0xab, 0xa2, 0x3d, 0xbe, 0x5a, 0x35, 0xa8, 0x81, 0xe4, 0x09, 0xb2,
	0x87, 0xb4, 0x50, 0xe0, 0x4c, 0xe2, 0x97, 0xf9, 0xe7, 0xd3, 0x15, 0x89, 0x84, 0xe9, 0xc7, 0x1d,
	0xd3, 0x41, 0x81, 0x1d, 0xf8, 0x99, 0x26, 0x2a, 0x3b, 0x38, 0x83, 0xac, 0x78, 0x13, 0x69, 0x60,
	0x6b, 0x36, 0x12, 0x6f, 0x72, 0x58, 0x57, 0xc3, 0x71, 0x93, 0x83, 0x9e, 0x48, 0x52, 0x98, 0xc1,
	0x09, 0xa6, 0x30, 0x4b, 0x0c, 0x29, 0xcc, 0x04, 0x42, 0xaf, 0xe6, 0x30, 0x7f, 0x9a, 0x85, 0xe0,
	0x8f, 0xb3, 0xc0, 0x4a, 0xd1, 0x61, 0xb5, 0xec, 0xb9, 0x2d, 0xa1, 0x98, 0x6f, 0xcd, 0xe2, 0x7f,
	0xe5, 0x9e, 0x8c, 0x32, 0x45, 0x63, 0xfa, 0x52, 0x4b, 0x33, 0x7a, 0xa6, 0x30, 0xcf, 0x98, 0xda,
	0x3e, 0x5d, 0xa1, 0x41, 0x90, 0x84, 0xa6, 0xe6, 0xd2, 0xb2, 0x40, 0x45, 0x89, 0xbf, 0x28, 0xd0,
	0x54, 0x45, 0xc0, 0x5a, 0xe3, 0xf5, 0x96, 0x58, 0x9e, 0x31, 0xa5, 0x28, 0x8d, 0xde, 0x70, 0x49,
	0x45, 0x15, 0x94, 0x6a, 0xeb, 0x2b, 0x4a, 0xca, 0xeb, 0xaa, 0xa4, 0xb2, 0xfa, 0xd2, 0xd2, 0xca,
	0xea, 0xea, 0xd2, 0x8a, 0x0a, 0x2f, 0xf4, 0x4a, 0xd5, 0xde, 0xaa, 0xca, 0xea, 0xfa, 0xf2, 0xea,
	0x8a, 0x92, 0xfa, 0xc5, 0x95, 0xe5, 0x52, 0xe9, 0x62, 0x6f, 0x79, 0x69, 0x79, 0x95, 0xb7, 0xae,
	0xb6, 0xb4, 0xa2, 0x72, 0x71, 0x7d, 0x59, 0x5d, 0x29, 0xac, 0x28, 0xaf, 0x35, 0xa4, 0x4b, 0x3d,
	0x89, 0xf3, 0xa5, 0x53, 0x53, 0x42, 0x79, 0x25, 0x07, 0x7c, 0x41, 0xe5, 0xad, 0xc6, 0x40, 0x5b,
	0xc0, 0x1f, 0x9a, 0x9a, 0x70, 0xd4, 0x2e, 0x35, 0xb1, 0x08, 0x4c, 0xd7, 0x5c, 0x73, 0xa2, 0x08,
	0x48, 0xd8, 0xb4, 0x7b, 0x58, 0x3e, 0x7e, 0x3c, 0x7a, 0x62, 0xc7, 0xd8, 0xe0, 0xf6, 0xae, 0x25,
	0x8d, 0xd3, 0xd4, 0x49, 0x0d, 0xcd, 0x7c, 0x31, 0x70, 0xb5, 0x06, 0x49, 0xba, 0xf4, 0x3e, 0x04,
	0xbf, 0x20, 0xba, 0x1a, 0x96, 0x4b, 0xb3, 0x0d, 0xc7, 0x20, 0x06, 0xde, 0x1d, 0xbd, 0xba, 0xab,
	0x61, 0x79, 0x97, 0xa7, 0xd1, 0xd5, 0x1a, 0xe4, 0x8b, 0x14, 0x0d, 0xaf, 0xe7, 0x48, 0x71, 0xee,
	0x90, 0x24, 0xd6, 0x2e, 0xef, 0x93, 0xcf, 0xbd, 0x43, 0xf2, 0xa1, 0x9e, 0x46, 0x75, 0x1a, 0xff,
	0xed, 0xb8, 0xbb, 0x97, 0xa3, 0xca, 0x68, 0x05, 0x43, 0xd9, 0xd8, 0x10, 0xca, 0xe0, 0xf5, 0x6d,
	0x44, 0xb0, 0x5d, 0x9c, 0x83, 0x01, 0xc3, 0x99, 0xd1, 0xa9, 0xf5, 0xfd, 0xba, 0x96, 0x68, 0xde,
	0x1f, 0x2f, 0xd1, 0xf6, 0x70, 0x9a, 0xc5, 0x80, 0x62, 0x7b, 0x68, 0x34, 0x84, 0x13, 0xf1, 0x18,
	0x7f, 0xc5, 0x21, 0xf8, 0xef, 0x1c, 0x78, 0x55, 0x74, 0xe4, 0x22, 0x4d, 0x47, 0xc5, 0xde, 0xea,
	0x89, 0x1e, 0x7d, 0x3f, 0x39, 0x37, 0x51, 0x67, 0x8d, 0xeb, 0x9c, 0xab, 0x35, 0xa8, 0x5a, 0xc5,
	0xf0, 0x3a, 0xdd, 0x63, 0xa4, 0x2d, 0xa6, 0xb4, 0x85, 0x7f, 0x39, 0xed, 0x08, 0x37, 0x1e, 0x1a,
	0x36, 0x07, 0x36, 0x3b, 0x85, 0x97, 0xfa, 0xde, 0x8a, 0xc1, 0xe1, 0xfc, 0x49, 0x0e, 0xb8, 0xd7,
	0x01, 0xf3, 0x4c, 0x33, 0xa6, 0x01, 0x67, 0xbf, 0xd3, 0x6a, 0x29, 0x93, 0x28, 0x07, 0xa0, 0x27,
	0x12, 0x67, 0xf5, 0xfb, 0x59, 0x08, 0x7e, 0x27, 0x0b, 0xbc, 0x20, 0x3a, 0xd3, 0xc6, 0x9e, 0x2d,
	0x12, 0x57, 0xd8, 0xbb, 0xf9, 0xbf, 0x75, 0x4f, 0xf4, 0xd8, 0xcc, 0xe7, 0x06, 0x2a, 0xb3, 0x0d,
	0x54, 0x44, 0xb8, 0xea, 0x8e, 0x57, 0xba, 0x2a, 0xe4, 0xc9, 0xac, 0x0d, 0xbc, 0x56, 0x90, 0x4b,
	0x56, 0x4d, 0xdd, 0x67, 0xc2, 0x95, 0xfc, 0x4b, 0x11, 0xac, 0x13, 0xf3, 0xb0, 0x9e, 0x25, 0x95,
	0xfc, 0xe5, 0xf4, 0x5f, 0x85, 0x9e, 0xf1, 0x91, 0x77, 0xc6, 0x06, 0x4e, 0x95, 0xf8, 0x3c, 0xe3,
	0xc7, 0xde, 0x25, 0xfb, 0x4b, 0xea, 0xb8, 0xc7, 0xeb, 0xa3, 0xff, 0x6c, 0x04, 0xf8, 0xe5, 0x86,
	0x52, 0xcf, 0x6c, 0xfb, 0x52, 0x4f, 0xc4, 0x21, 0xd8, 0xcb, 0x81, 0x1a, 0xd1, 0x4c, 0x31, 0xaa,
	0x3a, 0x10, 0xbf, 0x39, 0x71, 0xfe, 0x1e, 0x97, 0xe4, 0xa7, 0xce, 0xc4, 0x96, 0xb2, 0xcf, 0x03,
	0x59, 0xf1, 0xb2, 0x4f, 0x0c, 0xce, 0x4d, 0x59, 0xf6, 0xa9, 0x81, 0xee, 0x58, 0xe2, 0xd0, 0x4e,
	0xc5, 0x07, 0x6b, 0x68, 0x33, 0x8c, 0xf9, 0xb4, 0x0e, 0xc1, 0x6a, 0xf1, 0x36, 0x7d, 0x7f, 0x49,
	0xb3, 0xc4, 0x52, 0x91, 0x73, 0xfd, 0xa7, 0x29, 0x82, 0x8d, 0x9b, 0x6d, 0xdf, 0x25, 0x0e, 0xc1,
	0x8f, 0x0d, 0xf5, 0xa0, 0x1a, 0x98, 0x96, 0x15, 0x4f, 0xa8, 0x4f, 0xdb, 0xf9, 0xb6, 0xb4, 0x0b,
	0xae, 0x68, 0xbb, 0x9b, 0x94, 0xe6, 0x52, 0x22, 0x50, 0x97, 0x5e, 0x13, 0xaa, 0xc9, 0x75, 0xfa,
	0x35, 0xa1, 0xa9, 0xc9, 0x78, 0xa5, 0x35, 0x63, 0x70, 0x0f, 0x82, 0xf9, 0xe2, 0x6c, 0xc3, 0xa7,
	0x18, 0x7e, 0x92, 0x6f, 0x05, 0x82, 0xcb, 0xc1, 0x52, 0xd1, 0x04, 0xb8, 0x56, 0xe2, 0x86, 0x1f,
	0x49, 0xb4, 0xe7, 0x4a, 0xb9, 0x2d, 0x78, 0x93, 0xec, 0x64, 0x8e, 0x5e, 0x41, 0x98, 0x99, 0x02,
	0xf2, 0x3a, 0x67, 0x57, 0x42, 0xa8, 0xc0, 0x5b, 0xfd, 0x3b, 0x08, 0xbe, 0x28, 0xe6, 0x5b, 0x79,
	0x95, 0x78, 0x0e, 0x8f, 0x30, 0x3d, 0x07, 0x03, 0xa9, 0xd5, 0xe4, 0x28, 0xfd, 0x28, 0xa3, 0xc0,
	0xf0, 0x3f, 0xdd, 0x08, 0xfe, 0x92, 0x2e, 0x30, 0xd4, 0x59, 0x9d, 0x41, 0xfd, 0x84, 0xdc, 0x7e,
	0xce, 0xcd, 0x7f, 0xcb, 0x3d, 0x09, 0xfc, 0x9e, 0xb4, 0xa1, 0xbe, 0x01, 0x95, 0x37, 0xa9, 0xd6,
	0x0c, 0x75, 0x04, 0x03, 0x9d, 0xa6, 0x5a, 0x9d, 0x4e, 0xec, 0xa7, 0xe1, 0xf7, 0x78, 0x5b, 0x02,
	0xe5, 0xcd, 0xfe, 0xc5, 0x6b, 0x8a, 0x02, 0x81, 0x16, 0x02, 0xa9, 0xdf, 0x5f, 0x12, 0xb0, 0xf3,
	0x41, 0x2c, 0xb5, 0x00, 0x5e, 0xbb, 0x4a, 0x1e, 0xaf, 0xe4, 0xf1, 0x96, 0xf8, 0xbc, 0x92, 0xaf,
	0xbc, 0xdc, 0xb6, 0x92, 0x87, 0xcc, 0x29, 0xf3, 0x95, 0x4a, 0x8a, 0xb6, 0xf8, 0x28, 0x9b, 0xa4,
	0x75, 0x97, 0xb6, 0x86, 0xc2, 0x1d, 0xda, 0xf2, 0x87, 0x26, 0xa6, 0x35, 0x2a, 0x4d, 0x5a, 0xc3,
	0xee, 0xc9, 0x89, 0x7a, 0x09, 0x2f, 0x81, 0xe9, 0x1a, 0xad, 0x49, 0xec, 0xaa, 0x9e, 0xf6, 0x9f,
	0x15, 0xdd, 0xb7, 0x67, 0xf4, 0xca, 0xd1, 0xd1, 0xe1, 0x61, 0x52, 0xed, 0x53, 0xa1, 0xd7, 0x41,
	0x8e, 0xed, 0x7a, 0x0f, 0x97, 0x42, 0xca, 0x3d, 0x87, 0x31, 0x77, 0x8f, 0x0d, 0xbe, 0xa7, 0x4f,
	0x8f, 0xf5, 0x6f, 0x23, 0x66, 0x7c, 0xe0, 0xbc, 0x7c, 0xe5, 0x80, 0xa2, 0xa1, 0xb4, 0xf7, 0xf3,
	0xbf, 0x0b, 0xc0, 0x46, 0x85, 0x4e, 0xf8, 0x68, 0x61, 0xb6, 0xea, 0x90, 0x7c, 0x15, 0xc1, 0x55,
	0x62, 0x1e, 0xae, 0x24, 0x21, 0x0e, 0x49, 0xad, 0xfe, 0xa9, 0x12, 0x9f, 0xfc, 0xe6, 0xd9, 0xf1,
	0x37, 0xc8, 0xe9, 0x3e, 0x8f, 0xd7, 0x27, 0xf7, 0x1c, 0x93, 0xcf, 0xec, 0x92, 0x77, 0x1f, 0x8c,
	0xf5, 0x6f, 0xf3, 0x48, 0x3e, 0xf9, 0xe2, 0x07, 0xb1, 0x93, 0x03, 0x63, 0x03, 0xa7, 0x94, 0x3f,
	0x4b, 0x95, 0x3f, 0xa3, 0xe8, 0xd4, 0xf8, 0xfe, 0xad, 0xb1, 0xfe, 0x6d, 0xa4, 0x2a, 0x65, 0xfa,
	0x92, 0xc6, 0x19, 0xea, 0x37, 0xd5, 0xb3, 0x88, 0x5a, 0x4e, 0x35, 0x27, 0x95, 0x9c, 0xea, 0x5f,
	0x72, 0x08, 0xfe, 0x0f, 0x0e, 0x3c, 0x2d, 0xda, 0x2c, 0xb2, 0x16, 0x27, 0xc8, 0xbd, 0xdb, 0xe5,
	0xbe, 0x0f, 0x68, 0x55, 0x93, 0xa8, 0x1c, 0xf3, 0x55, 0xfe, 0x95, 0xb4, 0xfc, 0x98, 0xb8, 0x70,
	0xc4, 0x1d, 0xdf, 0x38, 0x61, 0x89, 0x8a, 0x48, 0x98, 0x66, 0xfd, 0xab, 0x69, 0xe0, 0x2e, 0x26,
	0x46, 0x99, 0xa6, 0xe2, 0xf7, 0x19, 0x55, 0xfc, 0x22, 0x46, 0xda, 0xc3, 0x8a, 0x42, 0xdc, 0x17,
	0x7a, 0x0a, 0xc1, 0x65, 0x22, 0x8f, 0x57, 0x87, 0xf8, 0x1b, 0x38, 0xc1, 0x5a, 0x91, 0x50, 0xf9,
	0xc7, 0xfa, 0xb7, 0x59, 0x9f, 0x9b, 0xea, 0x92, 0x51, 0xd5, 0x6e, 0x31, 0xd2, 0xad, 0x67, 0xb3,
	0x10, 0x3c, 0x95, 0x05, 0x56, 0x88, 0x76, 0xab, 0x66, 0xcf, 0x88, 0x09, 0x4d, 0xce, 0x7f, 0x77,
	0xf3, 0x7f, 0x34, 0x45, 0xd5, 0xa2, 0x9f, 0xdb, 0xa3, 0x1b, 0x6b, 0x8f, 0x56, 0x45, 0x22, 0xc2,
	0x5f, 0xbb, 0xe3, 0x95, 0xa5, 0x13, 0x77, 0x60, 0xd3, 0x37, 0x45, 0x69, 0x3b, 0xb3, 0x37, 0x32,
	0x78, 0x4d, 0xef, 0x80, 0xba, 0xef, 0x65, 0x04, 0xc3, 0xe0, 0x29, 0xd1, 0x4c, 0x67, 0x69, 0x0e,
	0x5d, 0xa6, 0x97, 0xb2, 0xd7, 0x7d, 0x3f, 0x7f, 0x5f, 0x77, 0x82, 0x12, 0xc6, 0xd3, 0x54, 0x09,
	0x63, 0x46, 0xfa, 0xe4, 0x5a, 0x41, 0xc7, 0x32, 0xd1, 0x02, 0xa7, 0x3d, 0x75, 0x12, 0xaa, 0xa8,
	0x12, 0x7e, 0x51, 0x2a, 0x0a, 0xca, 0x13, 0x11, 0x0e, 0xb8, 0xc0, 0xac, 0x1a, 0x7f, 0x7b, 0x53,
	0xa0, 0xed, 0x26, 0x95, 0x02, 0xdf, 0x33, 0x08, 0x3e, 0x0d, 0x1a, 0x44, 0x33, 0x16, 0x52, 0xbe,
	0xdc, 0x77, 0x30, 0xfa, 0x49, 0x4f, 0x72, 0xbe, 0x86, 0x25, 0xa6, 0x7b, 0xd7, 0x05, 0x6e, 0x35,
	0xbe, 0x31, 0xd3, 0x18, 0x28, 0x82, 0xe0, 0x2b, 0xa0, 0x5e, 0xb4, 0x40, 0xc9, 0x42, 0x7c, 0x0a,
	0x18, 0xe7, 0x90, 0x42, 0x20, 0xc5, 0xc7, 0xe8, 0xdc, 0x70, 0xb3, 0x72, 0xce, 0xb3, 0x08, 0x36,
	0x82, 0xc7, 0x44, 0x0b, 0x1a, 0x52, 0x3e, 0x76, 0x98, 0xd3, 0x64, 0x9d, 0x13, 0x2e, 0x70, 0x9b,
	0xe9, 0x95, 0x99, 0xc6, 0x3b, 0x5f, 0x43, 0xb0, 0x1b, 0x3c, 0x2a, 0x5a, 0xc1, 0x64, 0xa1, 0x3e,
	0x05, 0xcc, 0x13, 0x9d, 0x09, 0xee, 0xc3, 0x19, 0xaf, 0x27, 0x36, 0xb5, 0x85, 0x5b, 0xf1, 0xf7,
	0x9f, 0x6b, 0x0d, 0xaf, 0xbb, 0x41, 0xdb, 0x96, 0x5a, 0x2e, 0xd6, 0x6d, 0x9b, 0x8b, 0xe5, 0xbb,
	0xc0, 0x8c, 0x0d, 0x81, 0xb0, 0x5f, 0x71, 0xe0, 0xb4, 0xd2, 0xb1, 0xfb, 0x8d, 0xfe, 0xe7, 0x13,
	0x64, 0x98, 0x82, 0xbb, 0x7a, 0x31, 0x82, 0x65, 0xa2, 0x14, 0x1b, 0xd9, 0x16, 0x3d, 0x7b, 0x52,
	0xbe, 0xdc, 0x67, 0x20, 0xe3, 0x9b, 0x6f, 0x60, 0x27, 0xb7, 0xd0, 0x33, 0x7e, 0x78, 0x9b, 0x3c,
	0x74, 0x9a, 0xec, 0x93, 0xbc, 0xf9, 0xe1, 0xd8, 0x6b, 0xfb, 0x1b, 0xe3, 0x1f, 0xf3, 0xfd, 0x51,
	0x1e, 0x82, 0xdf, 0xcb, 0x03, 0x9b, 0xc4, 0x44, 0x24, 0x92, 0xca, 0x98, 0x59, 0xe1, 0x05, 0xfa,
	0xe7, 0x59, 0x5f, 0x5a, 0xc8, 0xe4, 0x61, 0xfd, 0xeb, 0xd2, 0x9f, 0xe4, 0xf2, 0x7f, 0x98, 0xcb,
	0x34, 0xaf, 0xfa, 0x1c, 0xe3, 0x11, 0xa7, 0x54, 0xf6, 0x47, 0x54, 0xc8, 0x43, 0x6a, 0x27, 0x24,
	0x7a, 0xa7, 0x43, 0xf0, 0xc2, 0xea, 0xc5, 0xb5, 0x15, 0x25, 0x55, 0xd5, 0x55, 0xa5, 0x55, 0xde,
	0x9a, 0x4a, 0x6f, 0x75, 0x59, 0x79, 0x15, 0xac, 0xaf, 0x29, 0x87, 0x55, 0xde, 0x1a, 0x49, 0xaa,
	0x5b, 0x5c, 0xe7, 0xad, 0xad, 0xad, 0x92, 0x60, 0x15, 0xac, 0x2a, 0xaf, 0xa8, 0x5d, 0x2c, 0x55,
	0x94, 0xd6, 0xd6, 0x97, 0x96, 0x94, 0x78, 0xeb, 0x2b, 0x17, 0xd7, 0xc0, 0xba, 0x8a, 0x5a, 0x6f,
	0x72, 0x75, 0xa9, 0x54, 0x59, 0xaa, 0xc7, 0xbe, 0xa4, 0x34, 0xb0, 0xf1, 0xd5, 0xf8, 0xde, 0xa1,
	0xb1, 0x0e, 0x35, 0xb9, 0xa7, 0xd4, 0xc2, 0x53, 0xf5, 0x39, 0x03, 0x8e, 0xd2, 0xc4, 0x70, 0x94,
	0x26, 0xb3, 0xf6, 0x96, 0x82, 0xb6, 0x34, 0xe9, 0x5a, 0x5b, 0xea, 0xa1, 0x32, 0x36, 0x8a, 0xa5,
	0x13, 0x43, 0xb1, 0x34, 0xe5, 0x65, 0x4c, 0x0e, 0xc3, 0x42, 0x1d, 0x6c, 0xfd, 0x5f, 0xe5, 0xfa,
	0xbf, 0x2a, 0x54, 0x54, 0x56, 0x45, 0x0a, 0x69, 0x8e, 0x2e, 0x2b, 0x2f, 0xad, 0x2c, 0x9d, 0x10,
	0x47, 0x97, 0x4d, 0x8c, 0x14, 0x65, 0x37, 0x03, 0x47, 0x97, 0x4f, 0x0c, 0xc7, 0xf2, 0x29, 0xc2,
	0xb1, 0x34, 0x2d, 0x1c, 0x6d, 0x58, 0xba, 0x62, 0x62, 0x38, 0x56, 0x7c, 0x96, 0x2c, 0xbd, 0x2a,
	0x22, 0xfc, 0x3c, 0x1b, 0x78, 0x9c, 0xad, 0x48, 0xa6, 0x25, 0xb2, 0x9e, 0x37, 0xe4, 0xb1, 0x16,
	0xb3, 0x36, 0xf3, 0xec, 0x51, 0x71, 0xdc, 0xdc, 0xfb, 0x05, 0x47, 0x65, 0xa3, 0xa2, 0x1c, 0x98,
	0xb5, 0x41, 0x79, 0xcf, 0x6a, 0xf3, 0x26, 0xdf, 0x15, 0x0e, 0xc1, 0x4b, 0x9c, 0x98, 0x6f, 0xb7,
	0x7d, 0x27, 0x1d, 0xe5, 0x74, 0x03, 0x8b, 0xed, 0xaf, 0xf3, 0x76, 0x5f, 0xa1, 0x27, 0xb6, 0xff,
	0xc2, 0xe8, 0x70, 0x6f, 0xf4, 0x9d, 0x41, 0xf9, 0x54, 0x3f, 0x3d, 0xe5, 0xd3, 0xcb, 0xbb, 0xc7,
	0x8f, 0x6e, 0x1d, 0x3b, 0xfd, 0x5a, 0x74, 0x70, 0xbf, 0x3c, 0x78, 0x49, 0x99, 0xb0, 0xf7, 0xb4,
	0x7c, 0xf1, 0x03, 0x9c, 0xcf, 0xc5, 0x73, 0x70, 0xfa, 0xad, 0xd0, 0x23, 0x5f, 0xd8, 0x3a, 0xfe,
	0xc6, 0x59, 0x79, 0xc7, 0x70, 0xac, 0xf7, 0xbc, 0x7c, 0xea, 0xc2, 0xd8, 0x47, 0xef, 0xc9, 0x7d,
	0x83, 0xb1, 0xfd, 0x67, 0xa3, 0xe7, 0x4e, 0x35, 0xd4, 0xca, 0x17, 0x07, 0xc6, 0x77, 0xf4, 0x8d,
	0xef, 0xd8, 0x33, 0x36, 0x78, 0xa0, 0xf1, 0x96, 0x0d, 0x71, 0xf2, 0x34, 0x34, 0xfb, 0xfe, 0x91,
	0x43, 0xf0, 0x67, 0x1c, 0xe8, 0x14, 0x13, 0xf2, 0x81, 0xc5, 0x9d, 0xc0, 0x8e, 0x5f, 0x62, 0x77,
	0xc2, 0xce, 0x2f, 0x0c, 0xf3, 0x9d, 0xe9, 0xee, 0xd0, 0x98, 0x96, 0x26, 0x95, 0x7d, 0xc9, 0x6f,
	0xba, 0xc1, 0x6c, 0x0b, 0xaa, 0x19, 0xe0, 0x50, 0xbe, 0x60, 0x75, 0x28, 0xef, 0x64, 0x3b, 0x94,
	0xd5, 0x73, 0x11, 0xf4, 0x88, 0x73, 0x9c, 0xbd, 0x48, 0xda, 0x63, 0xfc, 0x84, 0x43, 0xf0, 0x03,
	0x0e, 0xac, 0x14, 0x99, 0x88, 0x4b, 0x9e, 0x04, 0x6e, 0x62, 0x22, 0x97, 0xf0, 0x79, 0x7e, 0xe5,
	0x14, 0x38, 0x84, 0x8a, 0x7a, 0x1a, 0xc9, 0x06, 0x77, 0x30, 0x40, 0xce, 0x34, 0x9d, 0xf4, 0x84,
	0x41, 0x27, 0x15, 0x26, 0xd0, 0x49, 0x9f, 0x2b, 0x22, 0xa6, 0x22, 0xfa, 0x73, 0x0e, 0xc1, 0x3f,
	0xe1, 0xc0, 0x0a, 0x91, 0xbd, 0xe2, 0x16, 0x2e, 0x35, 0x6b, 0x9f, 0xcc, 0xd3, 0x34, 0x1f, 0xb9,
	0x48, 0x0b, 0x10, 0x93, 0xa2, 0xb9, 0x51, 0x65, 0x10, 0x8f, 0x59, 0x39, 0x07, 0xf3, 0xb2, 0x80,
	0xe0, 0x7d, 0xe2, 0x3d, 0xd6, 0xfc, 0x07, 0x7d, 0x88, 0xc2, 0xb4, 0x3a, 0xad, 0x08, 0xb6, 0x80,
	0xdf, 0x11, 0x59, 0xf8, 0x48, 0x73, 0xed, 0xaa, 0x23, 0x12, 0xa8, 0x10, 0x33, 0x74, 0x24, 0x3f,
	0xf2, 0x17, 0xd3, 0xc0, 0x6c, 0xeb, 0x67, 0x32, 0x4d, 0xe6, 0x97, 0x19, 0x64, 0xfe, 0x41, 0xc6,
	0x7e, 0x5a, 0x2a, 0x22, 0xff, 0x77, 0xb4, 0xc8, 0x77, 0x81, 0x3c, 0x9a, 0x32, 0x2a, 0xb6, 0xb9,
	0xd2, 0xed, 0x1a, 0x12, 0xd4, 0x7b, 0x71, 0x39, 0xa7, 0x7d, 0x69, 0xc6, 0xfd, 0xcc, 0xdd, 0x39,
	0x7a, 0x4a, 0x63, 0x2e, 0xb5, 0xce, 0xfc, 0x57, 0x68, 0x1b, 0xe4, 0x72, 0xb4, 0x41, 0x0f, 0x20,
	0x38, 0x57, 0xbc, 0x9f, 0x69, 0x83, 0x62, 0xfd, 0xdb, 0x98, 0x66, 0xe8, 0x97, 0x6e, 0x04, 0x7f,
	0xe1, 0x06, 0xcf, 0x8a, 0xcc, 0xe5, 0x65, 0xb1, 0x51, 0x2a, 0x32, 0x7e, 0xd8, 0xcd, 0x1f, 0x4c,
	0xf7, 0xa8, 0x03, 0x4d, 0x6e, 0xb6, 0xd4, 0x67, 0xd0, 0xbe, 0x1b, 0x63, 0x1b, 0x0d, 0x83, 0x9b,
	0xa9, 0xc5, 0x1d, 0x11, 0x61, 0x3c, 0x0b, 0xdc, 0x43, 0x6f, 0xb8, 0x52, 0x4b, 0xff, 0x99, 0x95,
	0x78, 0xd0, 0x45, 0x1b, 0xee, 0x1b, 0x5a, 0xb4, 0x91, 0xf5, 0xd9, 0x15, 0x6d, 0x64, 0xa7, 0x52,
	0xb4, 0x41, 0x2e, 0x07, 0xf1, 0x8b, 0x4e, 0x6b, 0x27, 0x2d, 0x74, 0xae, 0xdc, 0x48, 0x60, 0x03,
	0x70, 0x11, 0xc7, 0x63, 0xfc, 0xd2, 0xee, 0x54, 0x2a, 0x32, 0x9c, 0x5a, 0xe8, 0xef, 0x9e, 0x46,
	0xce, 0xbb, 0x30, 0xe1, 0xcd, 0x34, 0x33, 0xf2, 0x8c, 0xc1, 0x8c, 0x94, 0xda, 0x97, 0x65, 0x98,
	0xd1, 0x70, 0x34, 0x27, 0xe1, 0x09, 0xd6, 0x55, 0x94, 0x19, 0xea, 0x2a, 0x98, 0x96, 0x87, 0x51,
	0x5c, 0x81, 0xb2, 0x10, 0xec, 0xcd, 0x02, 0x4d, 0xa2, 0x23, 0xfd, 0xed, 0x19, 0x26, 0x15, 0x6d,
	0x7f, 0xda, 0xcd, 0x7f, 0x23, 0xed, 0xfa, 0x3e, 0xa7, 0x5a, 0x8b, 0xcf, 0x35, 0xff, 0xe4, 0x96,
	0x51, 0xfc, 0xbb, 0x1b, 0xcc, 0xc6, 0x3b, 0xd8, 0x93, 0xe6, 0x05, 0xa7, 0xaf, 0xf3, 0x6b, 0xec,
	0x3c, 0x62, 0xc7, 0x1d, 0x41, 0xa3, 0x2b, 0xac, 0xd7, 0x3a, 0x64, 0xa5, 0x56, 0xeb, 0xf0, 0x73,
	0x0e, 0xc1, 0x7f, 0xe0, 0xc0, 0x0f, 0x38, 0x91, 0x49, 0x0f, 0xe9, 0x20, 0xe7, 0x5c, 0xf4, 0x40,
	0xe7, 0x59, 0x14, 0xbb, 0xd3, 0xfb, 0x9e, 0xdc, 0xf7, 0x0d, 0xb9, 0xef, 0x5b, 0xd1, 0x77, 0x06,
	0xf1, 0x83, 0x18, 0xa7, 0xe8, 0xd1, 0xf7, 0xc7, 0x86, 0x7f, 0x4f, 0x71, 0xc1, 0x8e, 0x0f, 0xc7,
	0x4e, 0x6e, 0xc5, 0x6f, 0xf8, 0xf4, 0xf2, 0x6e, 0xeb, 0xcb, 0xc9, 0xa9, 0x9e, 0x2b, 0xd7, 0x62,
	0xfb, 0xcf, 0xe2, 0x90, 0x0b, 0xbf, 0x33, 0xd6, 0xbf, 0xad, 0x33, 0xb0, 0x29, 0x14, 0x48, 0xc5,
	0x73, 0x9f, 0xcd, 0xf3, 0xdd, 0xd6, 0xa3, 0x01, 0x23, 0x2e, 0x70, 0x07, 0x03, 0xd7, 0x4c, 0xdb,
	0xed, 0xdc, 0xcf, 0x21, 0xb8, 0x97, 0x03, 0x5f, 0x11, 0xd9, 0xc0, 0x4a, 0x0b, 0x9d, 0xeb, 0x2d,
	0x92, 0x53, 0x58, 0xa9, 0x6f, 0x82, 0x8e, 0xb8, 0xc0, 0x6c, 0xbc, 0x79, 0xff, 0x1b, 0x22, 0x39,
	0xbe, 0x97, 0x10, 0x5c, 0x0b, 0x56, 0x8b, 0x4c, 0xac, 0xa4, 0xb9, 0x76, 0xf5, 0x18, 0xe9, 0x45,
	0x91, 0x1f, 0xbb, 0xc0, 0x1d, 0x8c, 0xef, 0x64, 0x1a, 0xef, 0xf5, 0x72, 0x08, 0xee, 0xe4, 0xc0,
	0x4a, 0x91, 0x0d, 0x2c, 0x8b, 0x2a, 0x53, 0xcb, 0x75, 0x57, 0x14, 0xba, 0xe1, 0x6d, 0xff, 0xdf,
	0x14, 0xb6, 0x5b, 0x8f, 0xe0, 0x3a, 0xf0, 0x55, 0x91, 0x8d, 0x96, 0x34, 0xd7, 0xae, 0x98, 0x23,
	0x3d, 0xbe, 0xfb, 0xc4, 0x05, 0xee, 0x64, 0x7d, 0xe8, 0x73, 0xc6, 0x4b, 0xc0, 0x78, 0xdf, 0xd2,
	0xcf, 0x91, 0x91, 0xc3, 0xa4, 0x9f, 0x15, 0xcf, 0x95, 0x18, 0xee, 0xc2, 0xc0, 0xad, 0x46, 0x14,
	0xa3, 0xde, 0xf7, 0xb6, 0x3c, 0xf4, 0x06, 0x3e, 0xc8, 0x6a, 0xea, 0xd4, 0x69, 0x28, 0x31, 0xca,
	0x4a, 0xa5, 0x44, 0x73, 0x05, 0xc8, 0x0d, 0x85, 0x3b, 0xfd, 0xe1, 0xc0, 0xda, 0x2d, 0xca, 0xb3,
	0xd9, 0xf1, 0x0b, 0x04, 0x66, 0x92, 0xef, 0xa9, 0x87, 0xc5, 0x1b, 0x6a, 0xa5, 0x7b, 0xf4, 0xd8,
	0x10, 0x6f, 0xac, 0xd0, 0xc3, 0x5d, 0x4b, 0x1a, 0x81, 0xf6, 0x1a, 0x6a, 0xb3, 0x21, 0xc7, 0xfe,
	0x24, 0x21, 0xce, 0x1d, 0x83, 0x67, 0x44, 0x0b, 0xc9, 0xa5, 0x7b, 0xe2, 0x57, 0x3f, 0x52, 0x18,
	0x27, 0xb8, 0x3b, 0xc2, 0x50, 0xe6, 0xe4, 0xe7, 0x57, 0x77, 0xeb, 0x5d, 0x25, 0xe9, 0x97, 0x98,
	0x0e, 0xc1, 0x26, 0x7f, 0x86, 0xdb, 0xe2, 0x59, 0xf4, 0x67, 0x81, 0xdb, 0x4c, 0x90, 0x67, 0x5a,
	0x64, 0xd7, 0x60, 0x88, 0xec, 0x16, 0xb0, 0x36, 0x05, 0x28, 0xd8, 0x1d, 0xc3, 0xb9, 0x56, 0x2a,
	0x9c, 0x5b, 0x05, 0x40, 0xdc, 0xdb, 0x27, 0x52, 0xf1, 0x25, 0x04, 0x1f, 0x52, 0xcf, 0x1d, 0xd2,
	0xc4, 0x6e, 0xa8, 0x95, 0x1e, 0xb0, 0xbd, 0x09, 0xd4, 0x30, 0xaf, 0x71, 0x06, 0x79, 0x63, 0x43,
	0xb3, 0xef, 0xdb, 0x1c, 0x82, 0x57, 0x38, 0xf0, 0x98, 0x68, 0x25, 0xaf, 0x0d, 0x67, 0x24, 0x2c,
	0xff, 0xea, 0xe0, 0x37, 0xa4, 0x1b, 0xa8, 0xd1, 0x71, 0x8d, 0x27, 0xb9, 0xc0, 0x26, 0x12, 0x11,
	0x90, 0x8b, 0x9c, 0xb7, 0xa3, 0x14, 0x49, 0x6a, 0x9b, 0x7b, 0xe9, 0x2b, 0x0f, 0x9f, 0x61, 0x79,
	0xac, 0xb6, 0xca, 0x48, 0xf9, 0xae, 0x25, 0x34, 0xed, 0x5f, 0x44, 0xf0, 0x79, 0xb0, 0x5c, 0x34,
	0xc3, 0xae, 0x1f, 0x49, 0xa0, 0x1e, 0x4d, 0x54, 0x0d, 0x4d, 0x01, 0x41, 0xec, 0xd2, 0x75, 0xed,
	0x66, 0xc1, 0x8c, 0x15, 0x98, 0x8d, 0xec, 0xce, 0x05, 0x04, 0xde, 0xea, 0x65, 0x08, 0x36, 0x88,
	0xf9, 0x56, 0x2a, 0x92, 0x54, 0x77, 0x91, 0xc3, 0x41, 0x14, 0xeb, 0x74, 0x72, 0xe6, 0xf0, 0x4a,
	0x16, 0x82, 0x97, 0xb2, 0xc0, 0x32, 0xd1, 0x42, 0x1a, 0x7b, 0xa2, 0x27, 0xe4, 0xf7, 0x31, 0x37,
	0x2f, 0xa7, 0x9d, 0x9a, 0x50, 0x39, 0xbd, 0xc4, 0x74, 0x32, 0xc2, 0x93, 0x74, 0x4c, 0x6f, 0xa7,
	0x75, 0x6f, 0x44, 0x77, 0x83, 0x96, 0xb5, 0xab, 0x1d, 0xee, 0xdc, 0xb0, 0x34, 0x30, 0xb7, 0x36,
	0x12, 0xb7, 0xf4, 0x3a, 0x48, 0x75, 0xcf, 0xed, 0xc6, 0xf6, 0x2e, 0xf0, 0x44, 0x84, 0x7f, 0xcb,
	0x31, 0x1e, 0xff, 0x22, 0x0c, 0x14, 0xba, 0x91, 0x1a, 0x67, 0x32, 0x8f, 0x2a, 0x8e, 0x6d, 0x7d,
	0x33, 0xf5, 0xac, 0x37, 0x71, 0x10, 0xac, 0x59, 0xef, 0x77, 0x38, 0xc6, 0x59, 0xc5, 0x2d, 0x08,
	0x6e, 0x36, 0xa5, 0xbd, 0x57, 0xe9, 0xdf, 0xa2, 0x7f, 0xf6, 0xd8, 0xe7, 0xc0, 0x71, 0x02, 0x9c,
	0xf0, 0xb8, 0x96, 0x00, 0xc7, 0xfe, 0xaa, 0xf2, 0x67, 0x99, 0xfa, 0xe7, 0x91, 0x77, 0xa3, 0x23,
	0xfd, 0x76, 0xf9, 0xf0, 0x53, 0x1c, 0x00, 0x1d, 0x9d, 0xcd, 0x81, 0x4e, 0x0c, 0x1a, 0xbe, 0x1f,
	0x11, 0x1f, 0xb9, 0x10, 0xf3, 0xa2, 0xbd, 0x48, 0x1e, 0xee, 0x23, 0xc0, 0xad, 0xd5, 0x81, 0xa3,
	0x7f, 0xf6, 0x94, 0x2c, 0xc0, 0xc7, 0x64, 0x16, 0xfa, 0x88, 0x15, 0x1c, 0xee, 0x93, 0x7b, 0x0e,
	0xc9, 0x7d, 0x17, 0x47, 0x47, 0x7a, 0xe5, 0x53, 0x67, 0xe4, 0x9e, 0xf3, 0xf2, 0xf9, 0xbe, 0x05,
	0x78, 0x4c, 0x31, 0x98, 0x3d, 0xe7, 0xa3, 0x87, 0xce, 0x2c, 0xf4, 0x78, 0x7d, 0x38, 0x97, 0x10,
	0x3d, 0xf4, 0xc9, 0xf8, 0xa1, 0x8f, 0x46, 0x47, 0x7a, 0xf5, 0xb1, 0x78, 0x07, 0xf0, 0x19, 0x2a,
	0x60, 0x86, 0xb4, 0xfd, 0xb4, 0x54, 0xd2, 0xf6, 0x7f, 0xcf, 0x21, 0xf8, 0x53, 0x0e, 0xf8, 0x45,
	0x3b, 0xd6, 0x94, 0xe6, 0xd1, 0x19, 0x58, 0x83, 0x97, 0xa7, 0x2e, 0x62, 0xc2, 0xe6, 0x11, 0x5a,
	0xda, 0xfe, 0x15, 0xbe, 0xab, 0x7b, 0x42, 0x47, 0x2f, 0x27, 0x70, 0xf2, 0xf2, 0x5b, 0xd3, 0x40,
	0x3e, 0x1b, 0xbf, 0x4c, 0xb3, 0x6b, 0xcb, 0x0d, 0x76, 0xad, 0xd8, 0x3e, 0xc5, 0x4f, 0xa3, 0xe0,
	0xe8, 0x0f, 0x4e, 0x51, 0x9b, 0x3a, 0xcd, 0xd2, 0x32, 0x52, 0xfb, 0x97, 0xb3, 0x10, 0x1c, 0xca,
	0x02, 0x5f, 0x16, 0x6d, 0x69, 0x9e, 0x88, 0xa9, 0x12, 0x9a, 0xcd, 0x1f, 0xb9, 0xf9, 0x1f, 0xa6,
	0x6a, 0x36, 0x89, 0x91, 0x24, 0x05, 0x46, 0xbf, 0x99, 0xb6, 0xf3, 0x66, 0x37, 0x93, 0xab, 0x3c,
	0x11, 0xe1, 0x67, 0x6e, 0xed, 0xb8, 0x1d, 0xe5, 0x92, 0x7f, 0xc9, 0x64, 0x20, 0xd5, 0xfe, 0xdf,
	0x1e, 0xab, 0xc7, 0x96, 0x51, 0x4e, 0xba, 0x22, 0xcd, 0xd4, 0x95, 0x1e, 0x5f, 0x44, 0xb0, 0x4a,
	0xe4, 0xe9, 0x58, 0x9c, 0xd8, 0xcf, 0xfb, 0xe3, 0x66, 0x03, 0x6f, 0x09, 0x58, 0xa6, 0xe8, 0xd9,
	0x83, 0x2f, 0x19, 0xce, 0x4e, 0x8a, 0x08, 0xce, 0xd7, 0xf7, 0x13, 0xee, 0x31, 0xbf, 0x85, 0xb5,
	0xb1, 0xb0, 0x87, 0x43, 0xf0, 0x2d, 0x0e, 0x3c, 0x2d, 0x5a, 0x48, 0xac, 0x9d, 0x14, 0x4c, 0x37,
	0x72, 0x28, 0xe3, 0xa5, 0x6e, 0xa7, 0x73, 0x94, 0xac, 0xcb, 0x23, 0x22, 0xc2, 0x59, 0x17, 0xb8,
	0xcd, 0x04, 0x49, 0xa6, 0x25, 0xbf, 0xde, 0xe4, 0x10, 0x7c, 0x8d, 0x03, 0x4f, 0x88, 0x56, 0x40,
	0xed, 0x69, 0x36, 0x05, 0xe7, 0x9c, 0x4e, 0xe8, 0xa7, 0x08, 0x6f, 0x76, 0xb9, 0xf0, 0xad, 0x44,
	0x70, 0x05, 0x78, 0x5c, 0xb4, 0xa0, 0xa3, 0x1d, 0x37, 0x4c, 0x2e, 0x99, 0x64, 0x8d, 0x5b, 0xd5,
	0xd3, 0x72, 0xc6, 0x77, 0x66, 0xec, 0x69, 0x39, 0x33, 0x98, 0x2c, 0xdc, 0xa7, 0x80, 0x8b, 0x8e,
	0xba, 0xc0, 0x6d, 0xcb, 0x37, 0xad, 0x69, 0x6b, 0x0d, 0xad, 0xbb, 0xe9, 0xd9, 0xe8, 0x69, 0x04,
	0x9f, 0x04, 0xf5, 0xa2, 0x15, 0x1f, 0x89, 0x4f, 0x97, 0x83, 0x8e, 0xba, 0x00, 0x6f, 0x7e, 0x5d,
	0x46, 0x5e, 0x1c, 0x5e, 0x2d, 0x32, 0xe0, 0x34, 0xe2, 0x3d, 0x05, 0xdc, 0xf3, 0x33, 0x37, 0xe0,
	0x1b, 0x3b, 0xda, 0xda, 0xd6, 0xf8, 0x9b, 0xd6, 0x27, 0xcb, 0x3e, 0x38, 0xb6, 0x9a, 0x22, 0xf6,
	0x59, 0xcf, 0x60, 0x1f, 0x35, 0xf9, 0x33, 0xdb, 0xfa, 0x75, 0xf5, 0x72, 0xc1, 0x8b, 0x1f, 0xc4,
	0x46, 0xfa, 0xf4, 0x68, 0x50, 0x1b, 0x88, 0x17, 0x2d, 0xef, 0xdc, 0x29, 0x0f, 0xbc, 0x81, 0x9f,
	0x8a, 0xf6, 0xbe, 0x65, 0x34, 0xe7, 0x88, 0x03, 0x33, 0xdb, 0x03, 0x2f, 0x53, 0x15, 0x14, 0xc4,
	0xb2, 0xb7, 0x21, 0xd8, 0x2a, 0xde, 0x15, 0x3d, 0x7a, 0x3c, 0x7a, 0xf4, 0x08, 0x7e, 0x56, 0xee,
	0x39, 0xaf, 0x7f, 0x74, 0x99, 0x79, 0x20, 0xfe, 0xdd, 0x42, 0x8f, 0x7c, 0xfa, 0xf5, 0xe8, 0xbb,
	0x47, 0x47, 0x87, 0x86, 0x63, 0xdf, 0x1c, 0xc6, 0x51, 0xa2, 0x3e, 0x0f, 0x43, 0x39, 0x7a, 0x69,
	0x97, 0xfc, 0xd6, 0x1e, 0xe5, 0x19, 0x35, 0xb4, 0xed, 0x5a, 0xd2, 0x98, 0xd7, 0x1e, 0x78, 0xb9,
	0x51, 0x17, 0x82, 0xe7, 0x11, 0x7c, 0x16, 0x3c, 0x21, 0x32, 0x96, 0x45, 0xca, 0x27, 0x78, 0xa8,
	0x1d, 0xb5, 0x52, 0x97, 0x85, 0x1f, 0xba, 0xc1, 0xed, 0x96, 0xb7, 0xde, 0x54, 0xb7, 0x12, 0x32,
	0xa0, 0x77, 0x8c, 0x95, 0xd6, 0x50, 0xb1, 0xd2, 0x4a, 0x46, 0xee, 0x5c, 0x3d, 0x91, 0x3b, 0xd3,
	0x94, 0x38, 0xd7, 0x2e, 0x6c, 0xc6, 0xcb, 0x46, 0x25, 0xce, 0xd9, 0x4a, 0x6b, 0x2b, 0x87, 0x60,
	0x04, 0x34, 0x88, 0x2c, 0xd2, 0xb2, 0x56, 0x6c, 0x0a, 0xa4, 0xf8, 0x87, 0x59, 0x86, 0x93, 0x12,
	0x37, 0xdd, 0x16, 0x1a, 0x63, 0xa3, 0x37, 0x2b, 0xe5, 0xca, 0x9c, 0xcf, 0x6a, 0x37, 0xed, 0x47,
	0x1c, 0x82, 0x7f, 0xc9, 0x81, 0x97, 0x44, 0xf6, 0x12, 0x48, 0x0f, 0x38, 0x6c, 0xa9, 0xb1, 0x77,
	0x99, 0xc9, 0xa6, 0x9a, 0xfd, 0x66, 0xf3, 0x5a, 0x3e, 0x60, 0xbf, 0xc7, 0xc6, 0x38, 0xb3, 0x90,
	0xf6, 0x4e, 0xdb, 0xf7, 0xb3, 0xb4, 0x7b, 0xac, 0x8c, 0x58, 0x65, 0x9a, 0xd2, 0x78, 0xd2, 0xa0,
	0x34, 0x8a, 0x6c, 0xcf, 0xe0, 0x24, 0xab, 0x37, 0xe8, 0x12, 0xca, 0x75, 0xe0, 0x56, 0x73, 0x9d,
	0xdd, 0x24, 0xed, 0xbc, 0xcd, 0xdc, 0x40, 0xc1, 0xd4, 0xd0, 0xec, 0xfb, 0x2b, 0x0e, 0xc1, 0xff,
	0xc9, 0x81, 0x2f, 0x8b, 0x36, 0x34, 0xb7, 0x61, 0xa5, 0x54, 0x76, 0xe6, 0x37, 0xf3, 0xe1, 0x89,
	0x9d, 0x85, 0x49, 0x67, 0x53, 0xce, 0x13, 0x11, 0x3e, 0x70, 0xd1, 0xc7, 0x3a, 0xd2, 0xde, 0x9a,
	0x93, 0x4c, 0x4a, 0x89, 0xd6, 0x0f, 0x76, 0xea, 0xa8, 0x8e, 0xb1, 0x7e, 0x49, 0xb8, 0xa5, 0xe6,
	0xc5, 0xd9, 0x88, 0x60, 0x3b, 0x68, 0x11, 0x99, 0x58, 0xe8, 0x55, 0xad, 0x36, 0xa1, 0x76, 0x82,
	0x62, 0x12, 0x0b, 0x7c, 0x5a, 0xeb, 0xd0, 0xe9, 0xe4, 0x3e, 0xa5, 0xcc, 0x16, 0x3e, 0xc7, 0x03,
	0x70, 0x4c, 0xf8, 0x93, 0x3f, 0x00, 0xb7, 0x83, 0x03, 0xb7, 0x18, 0xa8, 0x43, 0xce, 0xc3, 0xcc,
	0x36, 0x54, 0x25, 0x4f, 0xcd, 0x2e, 0x61, 0x1e, 0xcd, 0x01, 0xfc, 0x2a, 0xeb, 0xe9, 0x98, 0xbb,
	0x4c, 0xb9, 0x53, 0xe7, 0xe3, 0x31, 0xf8, 0xdd, 0x76, 0xc7, 0x63, 0x3e, 0xce, 0x42, 0xf0, 0x42,
	0x16, 0xf8, 0x8a, 0xc8, 0x5e, 0x71, 0x7b, 0x0e, 0x4b, 0x45, 0xfa, 0xff, 0xc2, 0xcd, 0xff, 0xa9,
	0x7b, 0x52, 0xe4, 0x7f, 0x62, 0x1a, 0xc1, 0x21, 0xdf, 0xaa, 0xd7, 0x51, 0x27, 0x9b, 0x6f, 0xd5,
	0x12, 0xb4, 0x29, 0xe4, 0x5b, 0xed, 0x92, 0xaa, 0xd4, 0xe1, 0xd5, 0x34, 0xcf, 0xfd, 0xdd, 0xe0,
	0xfe, 0xe9, 0x9e, 0x88, 0xf0, 0x4e, 0x0e, 0xe3, 0xc0, 0x43, 0xfa, 0x3b, 0x91, 0xa9, 0x9d, 0x31,
	0x74, 0x3e, 0x45, 0x33, 0xa5, 0xfb, 0x89, 0x59, 0x99, 0xbb, 0x9f, 0x98, 0x9d, 0xe1, 0xfb, 0x89,
	0x29, 0xf5, 0x6e, 0x1d, 0xe2, 0x10, 0xfc, 0x88, 0x03, 0xeb, 0x44, 0x47, 0x2e, 0x93, 0x8a, 0x93,
	0xd9, 0x54, 0x4c, 0xea, 0x34, 0xd0, 0x52, 0xbe, 0xbe, 0x7b, 0x72, 0x36, 0x09, 0x2f, 0x4c, 0x23,
	0x77, 0x77, 0xb0, 0x81, 0xce, 0x34, 0x33, 0xfa, 0xac, 0xc1, 0x8c, 0x96, 0x25, 0x38, 0x0c, 0x94,
	0xf4, 0x76, 0xe1, 0xa6, 0x09, 0x6e, 0x17, 0x96, 0x1b, 0xb6, 0x0b, 0xd9, 0x76, 0x97, 0xb1, 0x67,
	0xf8, 0x51, 0x16, 0x82, 0xe7, 0xb3, 0xc0, 0x4b, 0xa2, 0xf3, 0x12, 0x24, 0x62, 0x9c, 0x54, 0xac,
	0xdb, 0xb7, 0xdd, 0xfc, 0xd5, 0x29, 0x39, 0x15, 0xa4, 0x6f, 0x2d, 0x4e, 0xa9, 0xc1, 0x5b, 0xd3,
	0xfa, 0x4a, 0x89, 0x77, 0x92, 0x6e, 0xe5, 0x37, 0xed, 0x12, 0xde, 0x1c, 0xe6, 0x6c, 0x55, 0x24,
	0x22, 0xfc, 0xda, 0x6d, 0x38, 0x34, 0x32, 0x89, 0x19, 0xed, 0xcf, 0x2e, 0x74, 0xc8, 0xc0, 0x5d,
	0xc3, 0x43, 0x1c, 0x82, 0xfb, 0x38, 0xb0, 0x56, 0x64, 0x13, 0x5b, 0x3b, 0xf4, 0x32, 0x69, 0xf1,
	0xcc, 0x02, 0xfe, 0x01, 0xd6, 0x5e, 0x22, 0x63, 0xff, 0xf0, 0x8a, 0x0b, 0xdc, 0xc9, 0x82, 0x29,
	0xd3, 0x72, 0xf6, 0x07, 0x38, 0x04, 0xdf, 0xe6, 0xc0, 0x2a, 0xd1, 0x06, 0x5a, 0x7b, 0x12, 0xb2,
	0x55, 0x5a, 0xb3, 0x63, 0x2a, 0xb0, 0x39, 0xe9, 0x54, 0xe0, 0xef, 0x1b, 0x4f, 0xbe, 0xfc, 0x46,
	0x08, 0x90, 0xaf, 0x0d, 0xc1, 0x56, 0xe0, 0x17, 0xd9, 0x88, 0x69, 0x87, 0x15, 0x92, 0xcd, 0xae,
	0x25, 0x0c, 0xbb, 0x2f, 0xba, 0xc0, 0x9d, 0xac, 0x2f, 0x65, 0x1a, 0x0b, 0xf6, 0x71, 0x08, 0xee,
	0xe2, 0xc0, 0x73, 0xa2, 0x0d, 0xb4, 0x2c, 0xc2, 0x4c, 0xf9, 0xa1, 0xb5, 0x3b, 0xc9, 0x26, 0xd6,
	0x6f, 0x10, 0xf7, 0xb5, 0x20, 0xd8, 0x04, 0x5e, 0x14, 0x6d, 0x30, 0x93, 0xee, 0x4d, 0x99, 0xf1,
	0x66, 0x19, 0xa0, 0xd2, 0xf9, 0xee, 0x43, 0x17, 0xb8, 0x8b, 0xf9, 0x8d, 0x4c, 0x63, 0xbc, 0x9d,
	0x1c, 0x82, 0xdb, 0x39, 0xd0, 0x28, 0xda, 0x81, 0x6b, 0xa4, 0xc9, 0xd4, 0xf2, 0xdc, 0xbf, 0xba,
	0xc0, 0x5d, 0xda, 0xce, 0x4b, 0x4a, 0x4c, 0x97, 0xc4, 0x36, 0x66, 0x3a, 0x4c, 0xb7, 0xd9, 0x96,
	0xe9, 0x26, 0x77, 0x1b, 0xd3, 0xcc, 0xa5, 0xed, 0x08, 0xae, 0x07, 0x4d, 0xa2, 0x1d, 0x2d, 0xa4,
	0xb9, 0x76, 0x7b, 0x87, 0x69, 0x6a, 0xc9, 0x11, 0x17, 0xc8, 0x67, 0x7f, 0x2b, 0xd3, 0xd8, 0xf5,
	0x6d, 0x0e, 0xc1, 0x3d, 0x1c, 0x78, 0x41, 0xb4, 0x85, 0x97, 0x45, 0x9c, 0xa9, 0xe5, 0xda, 0x3f,
	0xce, 0x02, 0x33, 0x1a, 0x03, 0x6d, 0x1d, 0xfe, 0xe6, 0x1b, 0x93, 0x04, 0x7f, 0x98, 0xb1, 0xad,
	0x3e, 0x07, 0xc1, 0x7b, 0xc4, 0xbb, 0xe2, 0xee, 0x22, 0x85, 0xbc, 0xb9, 0xee, 0xed, 0x69, 0x06,
	0x53, 0x67, 0x51, 0x22, 0x65, 0x7e, 0x89, 0x46, 0x34, 0x07, 0xa7, 0x78, 0x2f, 0x07, 0xa6, 0x77,
	0x92, 0xf5, 0x50, 0xfd, 0xd8, 0xe9, 0xd5, 0x61, 0x04, 0x37, 0x8a, 0x22, 0x6e, 0x30, 0x36, 0x3a,
	0x34, 0x4c, 0x03, 0x14, 0xeb, 0xdf, 0x86, 0x97, 0xa8, 0x53, 0x25, 0x1a, 0xce, 0x18, 0x49, 0x35,
	0x78, 0x0a, 0x01, 0x2a, 0xda, 0x73, 0x50, 0xfd, 0x06, 0xf9, 0x53, 0xdf, 0xbf, 0x55, 0x84, 0x68,
	0x6b, 0xff, 0xd8, 0xb5, 0x1d, 0x7a, 0xaa, 0x49, 0x1e, 0xd8, 0x1d, 0xed, 0xd9, 0x8b, 0x5f, 0xd5,
	0xa8, 0x43, 0xe1, 0xfb, 0x98, 0x43, 0xf0, 0x02, 0x07, 0x1e, 0x16, 0xe3, 0x4b, 0x23, 0xcd, 0xa1,
	0xa1, 0xc0, 0x89, 0x5c, 0x3c, 0x68, 0xb7, 0xf1, 0x2e, 0x05, 0xf9, 0x76, 0xf3, 0xd9, 0x25, 0xad,
	0x25, 0x44, 0x57, 0x57, 0x57, 0x57, 0x91, 0x3f, 0xd4, 0xdc, 0x52, 0x14, 0x6a, 0xf6, 0xb7, 0xd0,
	0xb1, 0x96, 0x60, 0x13, 0x5d, 0x56, 0x54, 0x7a, 0xd7, 0xb6, 0x55, 0x54, 0x38, 0x3d, 0xa9, 0x56,
	0x49, 0x01, 0x0d, 0xe2, 0x8c, 0xbd, 0xc9, 0x80, 0x82, 0x50, 0x9a, 0xe7, 0x4c, 0xd4, 0x29, 0xd8,
	0x21, 0x47, 0x39, 0xc6, 0x1e, 0x44, 0x30, 0x18, 0x6c, 0x68, 0x0f, 0x85, 0x15, 0xbf, 0x69, 0xca,
	0xb3, 0xa4, 0xa7, 0x39, 0x30, 0x83, 0xf4, 0x73, 0x55, 0xf3, 0xa4, 0xee, 0x05, 0xb9, 0xd2, 0x6d,
	0x1a, 0xa9, 0xf1, 0xc5, 0xbc, 0x4f, 0xf8, 0x83, 0xd5, 0x9b, 0x11, 0x0c, 0x89, 0x1b, 0x71, 0x69,
	0x49, 0xac, 0x7f, 0x1b, 0xbe, 0x3d, 0x18, 0x5f, 0x78, 0x8c, 0x6f, 0x10, 0x1e, 0xdf, 0x3a, 0x32,
	0x76, 0xf5, 0xed, 0x68, 0xcf, 0xc1, 0xf1, 0x23, 0xdb, 0xe5, 0xbd, 0x3d, 0x6a, 0x23, 0x88, 0xd8,
	0xc8, 0x47, 0xf2, 0xf0, 0xe9, 0xe8, 0xfe, 0xc1, 0xe8, 0xee, 0xd7, 0xe4, 0x53, 0xfd, 0xa3, 0x43,
	0xdf, 0xc2, 0x73, 0x15, 0x51, 0x1c, 0xec, 0xd3, 0xff, 0x1c, 0xbd, 0xb4, 0x6b, 0xfc, 0xd0, 0x47,
	0xa3, 0x43, 0xc3, 0xfa, 0x3b, 0xd4, 0x7d, 0x88, 0x0f, 0x63, 0x1f, 0x8e, 0x34, 0x4e, 0xc7, 0xb0,
	0x3d, 0xd5, 0xc9, 0x9f, 0xe5, 0x00, 0x88, 0x37, 0x9e, 0x25, 0x6d, 0x28, 0xd3, 0x87, 0x74, 0x74,
	0xa8, 0x77, 0xc2, 0x90, 0x8e, 0x0e, 0xf5, 0xc6, 0x21, 0x25, 0x54, 0x84, 0xed, 0xcd, 0xfc, 0x16,
	0xc6, 0xe1, 0x92, 0x2f, 0x23, 0xf8, 0x9c, 0x98, 0x47, 0xae, 0x9c, 0xc5, 0xf9, 0xd6, 0x2f, 0x39,
	0xf4, 0x54, 0x3a, 0x7a, 0x36, 0x36, 0x7c, 0x4d, 0xee, 0x1b, 0x1c, 0x3b, 0x73, 0x7a, 0xec, 0xea,
	0x55, 0x8f, 0xe4, 0x8b, 0x9d, 0x1e, 0x89, 0x0d, 0x5f, 0x1b, 0x1d, 0xda, 0xa3, 0xff, 0x48, 0xd2,
	0xa8, 0xbf, 0x35, 0xf1, 0x2b, 0xb0, 0xc8, 0xe5, 0x9d, 0x2b, 0x45, 0x27, 0x2e, 0x34, 0x5e, 0x3f,
	0x44, 0xdf, 0x78, 0x9d, 0xe8, 0x1e, 0x2c, 0xb5, 0x56, 0x97, 0xce, 0x90, 0x26, 0x95, 0x20, 0xdd,
	0x67, 0xda, 0x3b, 0x30, 0x82, 0x73, 0xd3, 0x36, 0x4b, 0x32, 0xa3, 0xf1, 0x59, 0x34, 0x4b, 0xa2,
	0x60, 0x60, 0x65, 0x47, 0x0f, 0xbb, 0x11, 0x3c, 0xe0, 0x06, 0xcf, 0x8b, 0x8e, 0xf4, 0xb7, 0xe7,
	0x87, 0x84, 0x1a, 0x72, 0xc8, 0xc5, 0x7f, 0xec, 0x4a, 0xaf, 0x1f, 0x9e, 0xf3, 0x6d, 0x54, 0xad,
	0x04, 0xc0, 0xd5, 0x7a, 0x52, 0x34, 0xbe, 0x01, 0x97, 0x74, 0xbe, 0x52, 0xef, 0x61, 0xed, 0x11,
	0x9a, 0x9b, 0x70, 0xd2, 0xd3, 0x7a, 0x2d, 0xb7, 0xde, 0xa1, 0x5b, 0xe8, 0x8e, 0xd0, 0xd7, 0x74,
	0x2b, 0x60, 0x16, 0x4f, 0x55, 0x06, 0xd2, 0x13, 0x11, 0xf6, 0x67, 0xeb, 0x57, 0x7e, 0xfb, 0x9b,
	0xd6, 0xf9, 0xd7, 0xb4, 0x05, 0x3e, 0x37, 0x16, 0x37, 0xb7, 0xb1, 0x48, 0xab, 0xff, 0x1d, 0x39,
	0x58, 0xe1, 0x17, 0x9d, 0x99, 0x41, 0x9a, 0xaf, 0x6d, 0xcc, 0x13, 0x9b, 0x61, 0x10, 0x53, 0xf5,
	0xba, 0xbb, 0x44, 0xca, 0x7b, 0x1e, 0x2f, 0x74, 0x27, 0x56, 0xd6, 0x27, 0x73, 0xc0, 0x1c, 0x27,
	0x48, 0x32, 0x4d, 0x5d, 0xaf, 0x34, 0xa8, 0xeb, 0x72, 0x86, 0xba, 0xb6, 0x45, 0x24, 0x03, 0x15,
	0xf6, 0x37, 0xdc, 0x08, 0x1e, 0x77, 0x83, 0x26, 0x31, 0xc1, 0x1a, 0x24, 0xc1, 0x0e, 0x09, 0x75,
	0xf7, 0x45, 0x17, 0xff, 0x91, 0x6b, 0x4a, 0xf6, 0xb1, 0x7e, 0xb3, 0x75, 0x77, 0x44, 0xb8, 0x38,
	0x8d, 0x78, 0xf9, 0x4f, 0xf8, 0xc3, 0x4d, 0xeb, 0x02, 0xcd, 0x37, 0x52, 0x71, 0x1f, 0xe5, 0x8c,
	0xf5, 0xa7, 0x58, 0x42, 0xba, 0x11, 0xec, 0x12, 0xf3, 0x48, 0xb8, 0xa3, 0xee, 0xe4, 0x48, 0x2d,
	0xba, 0x4f, 0x8a, 0x2b, 0x21, 0xa2, 0x87, 0x3e, 0xa1, 0x8b, 0x21, 0xc8, 0x7e, 0xcf, 0x15, 0x24,
	0x5f, 0x78, 0x37, 0xd6, 0xbf, 0x0d, 0x06, 0x83, 0xa3, 0x43, 0xbb, 0xe4, 0x2b, 0xfb, 0xe4, 0xb7,
	0xe2, 0x7e, 0xe9, 0xe8, 0xd0, 0xfe, 0xd1, 0xa1, 0xde, 0xf8, 0xe4, 0xdd, 0x97, 0x94, 0x20, 0xaa,
	0x7f, 0x1b, 0xcd, 0x66, 0xa6, 0x42, 0xd6, 0x6f, 0x73, 0x86, 0x0c, 0x00, 0x0e, 0xde, 0x4f, 0x72,
	0x08, 0x1e, 0xe3, 0x74, 0xf8, 0xd4, 0x70, 0x4c, 0xda, 0xc9, 0x39, 0x00, 0x48, 0xcf, 0x1c, 0x1d,
	0x3a, 0x67, 0xfa, 0x7e, 0xec, 0xd4, 0xf0, 0xe8, 0xd5, 0x5d, 0xb8, 0xcc, 0x43, 0x09, 0xe0, 0x0f,
	0x9d, 0xc0, 0x13, 0xa2, 0xbd, 0x67, 0xe4, 0x9e, 0x4f, 0xf4, 0xbc, 0x96, 0xdc, 0x73, 0x18, 0x97,
	0x5e, 0x11, 0xb4, 0x54, 0xc7, 0x3c, 0x2e, 0x31, 0x46, 0x24, 0xa8, 0x2c, 0xc4, 0x75, 0x8e, 0x91,
	0x86, 0xc0, 0x5b, 0x60, 0x67, 0x38, 0x04, 0xbf, 0xc1, 0x89, 0x3c, 0xb9, 0x6c, 0xfa, 0xe2, 0x45,
	0x79, 0x6f, 0x4f, 0x66, 0xe2, 0x63, 0xce, 0x83, 0xa4, 0x15, 0x4e, 0xfc, 0x19, 0x87, 0xe0, 0x1f,
	0x73, 0x60, 0xbd, 0xe8, 0xc4, 0xee, 0x52, 0x29, 0x89, 0x85, 0x70, 0x06, 0xc5, 0xc4, 0x2a, 0x29,
	0x9b, 0xa9, 0x17, 0xf9, 0x17, 0xcc, 0x79, 0x8d, 0x64, 0x95, 0x46, 0xe2, 0xbe, 0xad, 0x67, 0xb5,
	0x50, 0x84, 0x89, 0xca, 0xcd, 0x17, 0x8a, 0xd8, 0xa0, 0x91, 0x81, 0x96, 0x6d, 0xc0, 0x8d, 0xe0,
	0xb7, 0xdc, 0x60, 0x83, 0xe8, 0x48, 0xff, 0x14, 0x79, 0x69, 0x0a, 0xe3, 0x13, 0xcf, 0x7f, 0xed,
	0x00, 0x25, 0x22, 0x0c, 0x65, 0x11, 0x51, 0xa9, 0x6b, 0x69, 0x09, 0x34, 0x85, 0x6f, 0xac, 0x95,
	0x4b, 0xad, 0xdf, 0x88, 0x8f, 0x61, 0x73, 0x92, 0x3d, 0x6a, 0x9d, 0x96, 0xd3, 0x7e, 0xd4, 0x85,
	0xe0, 0x3b, 0x2e, 0xf0, 0x26, 0x27, 0x3a, 0x92, 0x48, 0xaa, 0x20, 0x5e, 0xda, 0xc5, 0x0f, 0x62,
	0xfb, 0x8f, 0x47, 0x0f, 0xf4, 0x98, 0x53, 0xcd, 0x29, 0x28, 0x47, 0xbd, 0x2b, 0x06, 0x85, 0xaa,
	0xa6, 0x32, 0xf7, 0x70, 0xfc, 0x4e, 0x2e, 0x9d, 0x26, 0x19, 0x69, 0xb5, 0xf4, 0x4d, 0xac, 0x65,
	0x3f, 0xca, 0x21, 0xa1, 0x2d, 0x9b, 0x2e, 0x37, 0x5f, 0x45, 0x9c, 0x1d, 0x1e, 0x8e, 0x7a, 0xb6,
	0x7b, 0x82, 0x7a, 0xf6, 0x21, 0x83, 0x9e, 0x2d, 0x60, 0xe8, 0x59, 0x87, 0xba, 0xb8, 0x0b, 0x6e,
	0x04, 0xcf, 0xb9, 0xc1, 0x46, 0xd1, 0x79, 0x21, 0x52, 0xe7, 0xd0, 0xcf, 0xc3, 0x8a, 0x29, 0xd3,
	0xb8, 0xdf, 0xce, 0x02, 0x05, 0xea, 0x6a, 0x59, 0x97, 0x38, 0x75, 0x7d, 0xfb, 0x25, 0x93, 0xbe,
	0x35, 0xec, 0x49, 0x53, 0xab, 0x6a, 0xa7, 0x81, 0x17, 0x81, 0xe9, 0x1a, 0xb1, 0x88, 0x08, 0xdd,
	0x8e, 0xe0, 0xad, 0x62, 0x9e, 0xbc, 0x7b, 0x58, 0x3e, 0x7e, 0x3c, 0x7a, 0x62, 0xc7, 0xd8, 0xe0,
	0xf6, 0xae, 0x25, 0x8d, 0xd3, 0xd4, 0x49, 0x0d, 0xcd, 0x7c, 0x31, 0x70, 0xb5, 0x06, 0x89, 0xee,
	0xbd, 0x0f, 0xc1, 0x2f, 0x88, 0xae, 0x86, 0xe5, 0xd2, 0x6c, 0xeb, 0xf7, 0x1a, 0x96, 0x77, 0x79,
	0x1a, 0x5d, 0xad, 0x41, 0xbe, 0x48, 0x51, 0xbc, 0xe1, 0x75, 0xc4, 0xb1, 0xbe, 0x1b, 0xc1, 0x3b,
	0x45, 0x9e, 0x9c, 0x60, 0xb8, 0xbc, 0x4f, 0x3e, 0xf7, 0xce, 0xd8, 0xc5, 0x41, 0xf9, 0xea, 0xb6,
	0x2e, 0x4f, 0xa3, 0x3a, 0x8d, 0xb2, 0x08, 0x39, 0x89, 0x2d, 0x82, 0xef, 0xff, 0x71, 0x08, 0xfe,
	0x33, 0x07, 0xde, 0xe0, 0x44, 0x07, 0x8a, 0xea, 0xce, 0x86, 0x05, 0x48, 0x5d, 0x1c, 0x92, 0x6b,
	0x67, 0xa1, 0x53, 0xea, 0x3a, 0xe7, 0x6a, 0x0d, 0xaa, 0x5a, 0x39, 0xbc, 0x4e, 0x57, 0xd9, 0xd2,
	0x4b, 0xfc, 0x3a, 0xc3, 0x85, 0x7a, 0xf6, 0x8c, 0x67, 0x61, 0xb4, 0x54, 0xaf, 0xb3, 0x12, 0x3e,
	0x05, 0x24, 0x34, 0x65, 0x61, 0x9c, 0x69, 0x8a, 0x77, 0x85, 0x41, 0xf1, 0x4a, 0x0c, 0xc5, 0xcb,
	0xc6, 0xc2, 0x51, 0xed, 0xfe, 0x3a, 0xdb, 0x70, 0xa8, 0x0e, 0xc4, 0x6f, 0x52, 0x24, 0x72, 0xd3,
	0x80, 0x60, 0xbd, 0x78, 0x07, 0xe6, 0x19, 0xdc, 0x9e, 0x3c, 0x76, 0xee, 0xaa, 0xbc, 0x77, 0x4f,
	0x4d, 0x43, 0xad, 0xcd, 0xd1, 0x1d, 0x12, 0x6f, 0x19, 0x99, 0xa2, 0xa6, 0xa1, 0xb6, 0x71, 0x06,
	0x79, 0x79, 0x43, 0x33, 0x5f, 0x06, 0xf2, 0xe8, 0x2b, 0x16, 0x55, 0xaa, 0x69, 0x2a, 0x9e, 0xdc,
	0x55, 0x77, 0xea, 0x8c, 0x7c, 0xbe, 0xaf, 0x31, 0x97, 0x4c, 0x5b, 0xd1, 0xfa, 0x4a, 0x80, 0x6f,
	0x61, 0xec, 0x97, 0x3f, 0x8a, 0x60, 0xad, 0xe5, 0xb0, 0xb0, 0x94, 0x0c, 0x60, 0xb6, 0x1d, 0x37,
	0xf9, 0xb0, 0xb5, 0x79, 0xec, 0x73, 0x08, 0x3e, 0xa3, 0x91, 0xc1, 0x7c, 0xa9, 0xd7, 0x43, 0xc9,
	0x93, 0x01, 0x1f, 0x6d, 0xd5, 0xef, 0x25, 0x69, 0xa8, 0xa5, 0x1a, 0xcf, 0xee, 0xb6, 0x0f, 0xa4,
	0xd7, 0x20, 0xb8, 0x5a, 0x9c, 0x8d, 0x03, 0x68, 0x13, 0xaa, 0x8f, 0xa6, 0xf3, 0x71, 0xc6, 0x8b,
	0x2c, 0x21, 0xf0, 0xd7, 0xac, 0xc7, 0x7f, 0xb1, 0x2e, 0x59, 0x89, 0xe0, 0x0a, 0x71, 0x26, 0x7e,
	0x87, 0x86, 0x86, 0x04, 0xd3, 0x06, 0x43, 0xa7, 0x84, 0xe9, 0xe4, 0x70, 0x05, 0xc8, 0xd3, 0xe8,
	0xa0, 0xd6, 0xe9, 0x4e, 0xa3, 0xd4, 0xaa, 0xe9, 0xbc, 0x72, 0x2e, 0x99, 0xf8, 0xa4, 0x7f, 0x43,
	0x40, 0xd1, 0x94, 0x6a, 0x15, 0xee, 0x74, 0x4a, 0x53, 0x92, 0xf9, 0xac, 0xa2, 0xdb, 0x7f, 0x70,
	0x21, 0x38, 0xe6, 0x02, 0x6d, 0xa2, 0x93, 0x22, 0x48, 0x51, 0xf7, 0x25, 0xb4, 0xfa, 0xbf, 0xe4,
	0xf8, 0x7f, 0xe1, 0x6e, 0x60, 0x07, 0xd6, 0x74, 0x7b, 0x52, 0xd1, 0xf7, 0xaa, 0x7a, 0x84, 0xd2,
	0x92, 0xba, 0xda, 0x9a, 0x7a, 0xa9, 0xbc, 0xc2, 0x5b, 0x5f, 0x0d, 0x61, 0x59, 0x79, 0x4d, 0xb5,
	0x04, 0x25, 0xa9, 0x5a, 0xaa, 0xab, 0x28, 0xa9, 0xa9, 0xa8, 0xf6, 0xd6, 0x2c, 0xae, 0xab, 0xad,
	0x2c, 0xf7, 0x56, 0xc2, 0xfa, 0x92, 0x92, 0xda, 0xca, 0xba, 0x8a, 0xaa, 0x6a, 0x58, 0xe2, 0xad,
	0x56, 0xe6, 0x96, 0x7a, 0xbd, 0x52, 0x45, 0x6d, 0x8d, 0x10, 0x89, 0x08, 0x3f, 0xc8, 0xd1, 0xba,
	0x04, 0xaf, 0x20, 0x69, 0xb0, 0xa9, 0x0e, 0x8e, 0xe6, 0x1b, 0x0e, 0xbe, 0x13, 0xfe, 0x61, 0x95,
	0x6f, 0x1b, 0x37, 0x79, 0xb2, 0x6e, 0x9a, 0x4d, 0x9e, 0xec, 0x0c, 0xde, 0xe4, 0x49, 0xe2, 0xa4,
	0xfe, 0xb7, 0x5d, 0x08, 0x5e, 0x71, 0x81, 0x7a, 0xd1, 0xca, 0x17, 0x52, 0x3e, 0x39, 0xad, 0x4d,
	0xd5, 0xdc, 0x27, 0xe8, 0x7a, 0x2d, 0xfd, 0x33, 0xc7, 0x7f, 0xca, 0x69, 0xe7, 0xf0, 0x05, 0xfc,
	0x0c, 0xe5, 0xa6, 0xae, 0x56, 0x2f, 0x33, 0x32, 0x5e, 0x50, 0xbc, 0xde, 0xab, 0x70, 0xf7, 0x66,
	0x75, 0xd6, 0x7a, 0x49, 0xf9, 0xf7, 0xda, 0xf0, 0xab, 0x9b, 0xd5, 0xdb, 0xbb, 0xd7, 0x97, 0x2a,
	0x7f, 0xb6, 0x05, 0x5e, 0xdd, 0x5c, 0x2a, 0x44, 0x22, 0xab, 0x1c, 0x6f, 0xee, 0xc6, 0xaf, 0x69,
	0x0f, 0xbc, 0x4a, 0xbf, 0xa9, 0xcd, 0xf8, 0xa6, 0xb5, 0xe4, 0x4d, 0xc6, 0xeb, 0xbb, 0x53, 0x79,
	0x72, 0x15, 0xab, 0x23, 0xc0, 0xb1, 0x2c, 0xc0, 0x9b, 0xa9, 0x97, 0x69, 0xee, 0xcb, 0x63, 0x06,
	0xf7, 0x65, 0x21, 0xab, 0x1b, 0x00, 0x0d, 0xbc, 0xa3, 0xd7, 0xb2, 0x9e, 0x72, 0x5a, 0x56, 0x1b,
	0x33, 0xfc, 0xec, 0x26, 0x00, 0x5a, 0x93, 0x89, 0x44, 0x4d, 0x00, 0xc8, 0x3c, 0x3a, 0x49, 0xef,
	0xfb, 0x7d, 0x0e, 0xc1, 0xcb, 0x1c, 0x58, 0x2a, 0x32, 0x48, 0xcc, 0xe2, 0xd0, 0x84, 0xda, 0x3f,
	0xc8, 0xb7, 0xa7, 0xab, 0xfb, 0x29, 0x4c, 0x95, 0xd1, 0x35, 0x15, 0x2d, 0x6b, 0x16, 0x7b, 0x9b,
	0xfd, 0x89, 0xda, 0x6f, 0xff, 0x2c, 0x8b, 0x74, 0x9a, 0x4e, 0x5f, 0xe9, 0xee, 0xe0, 0x4c, 0x5a,
	0x37, 0x88, 0xe0, 0x06, 0xb3, 0xd6, 0x95, 0x5e, 0x60, 0x64, 0xf5, 0xcf, 0x6f, 0x97, 0x8f, 0x0f,
	0x8f, 0x0e, 0xf7, 0x1a, 0xb2, 0x4b, 0x38, 0x63, 0x4f, 0x3d, 0x1c, 0xeb, 0xdf, 0xd6, 0x50, 0x2b,
	0xa3, 0xdd, 0xd6, 0xf3, 0x35, 0xd8, 0xf4, 0xc6, 0x15, 0x7a, 0x88, 0xb5, 0xa5, 0xd3, 0x88, 0xe0,
	0x53, 0xa6, 0x04, 0x96, 0xb6, 0xe6, 0xe5, 0x29, 0xc1, 0xd4, 0x50, 0xab, 0x7f, 0x8f, 0xde, 0xa9,
	0xe9, 0xe5, 0x0c, 0xc7, 0x85, 0x5e, 0x41, 0xf0, 0x65, 0xd3, 0x99, 0x76, 0xfa, 0xd0, 0xd0, 0x94,
	0x92, 0x41, 0x85, 0x43, 0x3b, 0x2c, 0x54, 0x2b, 0x5a, 0x16, 0xd6, 0xd4, 0x27, 0x5b, 0x7d, 0x85,
	0x73, 0x4c, 0x26, 0x3d, 0xce, 0x37, 0xb0, 0x54, 0x66, 0x5a, 0xdc, 0x26, 0x7c, 0x37, 0x1b, 0xdc,
	0x66, 0x82, 0x29, 0xd3, 0x74, 0x51, 0xa7, 0x41, 0x17, 0xdd, 0xaa, 0x7d, 0x41, 0x03, 0x18, 0x17,
	0x85, 0xf3, 0x56, 0x02, 0x4a, 0xa5, 0x89, 0x9b, 0x15, 0x10, 0x2b, 0x75, 0x3a, 0x36, 0xb2, 0xdd,
	0xd0, 0xd8, 0xfc, 0x7d, 0x37, 0x82, 0x67, 0xdd, 0xe0, 0x09, 0xd1, 0x4a, 0x1c, 0xfb, 0x15, 0x4b,
	0xa8, 0x4b, 0x7e, 0xe8, 0xe2, 0x7f, 0xe0, 0xba, 0x91, 0xda, 0x24, 0xad, 0x44, 0x92, 0x76, 0xa4,
	0x8c, 0xe2, 0x2d, 0xe2, 0x5a, 0x0a, 0x3e, 0x92, 0x35, 0xd2, 0x8f, 0x4b, 0x7a, 0xec, 0xce, 0x4b,
	0xd2, 0x69, 0x24, 0xf3, 0x01, 0xc8, 0xf8, 0x43, 0x93, 0x74, 0x88, 0x5f, 0xf8, 0x4b, 0xad, 0x37,
	0x8a, 0xb6, 0x50, 0xcb, 0x5a, 0x43, 0x69, 0xdc, 0x49, 0xbe, 0xca, 0xa4, 0x35, 0xeb, 0x11, 0xac,
	0xd1, 0x12, 0x31, 0xba, 0xd6, 0x2c, 0x4e, 0xac, 0x2e, 0xc8, 0x54, 0xb3, 0x2e, 0xd4, 0xf2, 0xf1,
	0xee, 0x54, 0xf2, 0xf1, 0xdd, 0x08, 0x76, 0x81, 0xa7, 0x44, 0x26, 0x7a, 0x2c, 0x56, 0x4c, 0x6e,
	0x27, 0xf2, 0xb7, 0xf9, 0xb9, 0xdd, 0x49, 0x64, 0xbb, 0x2f, 0xe6, 0x90, 0xf6, 0x29, 0xc6, 0x0f,
	0xdf, 0x7c, 0xed, 0x53, 0xcc, 0xf0, 0x3b, 0x3a, 0x2c, 0x1b, 0x27, 0x98, 0xdd, 0xf6, 0x1a, 0xb2,
	0xdb, 0x56, 0x85, 0xc5, 0xc8, 0x69, 0xff, 0x99, 0x1b, 0xc1, 0x3f, 0x76, 0x83, 0xa7, 0x45, 0x36,
	0xb9, 0xed, 0x17, 0x3a, 0xa1, 0xce, 0xf9, 0x17, 0x17, 0xff, 0x4f, 0x53, 0x92, 0xb3, 0xfe, 0x5c,
	0x1f, 0x39, 0xd6, 0xd1, 0xb8, 0xc0, 0x6d, 0xb5, 0x81, 0xb6, 0xc0, 0x44, 0x42, 0xe7, 0x29, 0x56,
	0x47, 0x5f, 0x64, 0xb9, 0x66, 0x8c, 0xbd, 0x45, 0xe2, 0x69, 0x19, 0x7d, 0x2c, 0xdf, 0x73, 0x08,
	0x3e, 0x03, 0x96, 0x89, 0x56, 0x24, 0x15, 0x2f, 0xfb, 0xc4, 0xf8, 0xe1, 0x53, 0x8e, 0x71, 0xe0,
	0xed, 0x18, 0xb1, 0x42, 0x0f, 0x05, 0x81, 0xd6, 0xb2, 0xc9, 0x05, 0x78, 0xf3, 0x4b, 0x33, 0xb2,
	0x63, 0xed, 0x52, 0x91, 0x01, 0x27, 0x0b, 0xfb, 0x84, 0x32, 0x5a, 0xcc, 0x17, 0xa5, 0x22, 0xa1,
	0x11, 0xe1, 0x42, 0xb6, 0x96, 0x98, 0x59, 0xde, 0xd9, 0xd1, 0x04, 0xc3, 0xe1, 0x4e, 0x85, 0xbb,
	0x2a, 0xa8, 0x7d, 0x0d, 0x8e, 0x5a, 0xcd, 0xb1, 0x6b, 0x47, 0x62, 0x67, 0x77, 0xc5, 0x7a, 0x07,
	0xe5, 0xaf, 0xbf, 0x21, 0x9f, 0xdb, 0x1b, 0xbb, 0xf2, 0xb6, 0xba, 0x9a, 0xfa, 0xfe, 0xc6, 0x83,
	0xea, 0xfe, 0x86, 0xcb, 0xe6, 0x89, 0xd1, 0xa1, 0x91, 0xe8, 0xd1, 0x61, 0x7d, 0x6f, 0xe3, 0x01,
	0x9d, 0x85, 0x31, 0x99, 0x66, 0x21, 0x98, 0x27, 0x4e, 0xb7, 0x32, 0xef, 0x03, 0x3a, 0xf3, 0x66,
	0x51, 0xf3, 0x98, 0xd5, 0xba, 0x39, 0x38, 0xb8, 0x26, 0xb9, 0x91, 0x07, 0x59, 0xc1, 0x26, 0x85,
	0x26, 0xc9, 0x99, 0xd4, 0xb5, 0x87, 0x3b, 0xb7, 0x54, 0xfb, 0x11, 0xfc, 0x1d, 0x91, 0xa7, 0x73,
	0x7c, 0xf8, 0x5d, 0xd2, 0x52, 0x9c, 0x40, 0x79, 0x7c, 0x25, 0xce, 0x80, 0xc8, 0x83, 0x97, 0x16,
	0x28, 0xf2, 0x81, 0xd7, 0xe3, 0xd4, 0x1e, 0x79, 0x6f, 0xcf, 0x53, 0xcb, 0x5f, 0x5d, 0x09, 0x97,
	0x3d, 0x5b, 0x17, 0x3d, 0x71, 0x59, 0xbe, 0xdc, 0xb7, 0xd0, 0x1a, 0xe4, 0x0b, 0x9b, 0xbd, 0x42,
	0x24, 0xd2, 0x48, 0xa0, 0xe3, 0xcb, 0xc8, 0xa6, 0x0e, 0xce, 0x8e, 0x78, 0x10, 0xbc, 0x57, 0xbb,
	0x38, 0x9e, 0xde, 0xd4, 0xc1, 0xb6, 0xbb, 0x6b, 0x2b, 0x47, 0xf6, 0x76, 0xb4, 0x9c, 0xca, 0x34,
	0xdb, 0x9c, 0x4a, 0x41, 0x15, 0xc8, 0xa5, 0x50, 0xe2, 0x6f, 0x05, 0xee, 0xf5, 0x81, 0x2d, 0x78,
	0x01, 0x1b, 0x95, 0x7f, 0xf2, 0xb3, 0x41, 0xf6, 0x66, 0x7f, 0xdb, 0x26, 0xcc, 0xd0, 0x33, 0x1a,
	0xf1, 0x1f, 0x3e, 0x57, 0x25, 0xe7, 0xfb, 0x26, 0x87, 0xe0, 0x7b, 0x1c, 0x58, 0x29, 0x5a, 0xb9,
	0x41, 0x0f, 0x76, 0x71, 0xa4, 0x32, 0xf2, 0xb6, 0x3c, 0xd0, 0xaf, 0x89, 0xa1, 0x79, 0x53, 0x87,
	0xe9, 0x25, 0x84, 0xd7, 0xa9, 0x91, 0x86, 0x71, 0x63, 0x51, 0xdf, 0xdc, 0xf1, 0xb0, 0x76, 0x77,
	0x3c, 0xd4, 0xf6, 0x8e, 0x25, 0xed, 0xa1, 0xc8, 0xb5, 0x19, 0xca, 0x4c, 0x95, 0x6b, 0x2b, 0x9c,
	0x2c, 0x72, 0x4e, 0xbe, 0x5c, 0x7f, 0xd3, 0x4d, 0xfc, 0xd8, 0xa5, 0x1d, 0xa1, 0xf0, 0x4d, 0x2f,
	0xda, 0x65, 0x86, 0x6d, 0xd0, 0x24, 0x25, 0xc6, 0xf7, 0x1e, 0x87, 0xe0, 0x49, 0x0e, 0x04, 0x44,
	0x26, 0x25, 0xb4, 0x6b, 0x32, 0x30, 0xe8, 0xf4, 0x6a, 0x18, 0xa3, 0xe6, 0x64, 0x59, 0xbc, 0x92,
	0xaf, 0x48, 0x95, 0xc5, 0x03, 0xe1, 0x26, 0xc1, 0x13, 0x11, 0x7e, 0x9c, 0x4d, 0x7c, 0x63, 0x23,
	0x84, 0x37, 0x49, 0xf4, 0xac, 0x01, 0x8c, 0xa3, 0xe7, 0x3c, 0x9a, 0x84, 0x52, 0x95, 0x43, 0xdc,
	0x8c, 0xe9, 0x3e, 0x3a, 0xb4, 0x53, 0xcf, 0x80, 0xd0, 0x8f, 0x92, 0xe8, 0xf9, 0xf7, 0xdd, 0x08,
	0x5e, 0x76, 0x83, 0xe7, 0x44, 0x36, 0x81, 0x12, 0xad, 0x61, 0x42, 0xb9, 0xfa, 0x3f, 0x2e, 0xfe,
	0x7f, 0xa7, 0xed, 0xd3, 0x26, 0xb3, 0xd6, 0x5a, 0x47, 0xa1, 0xa9, 0x74, 0x6b, 0xad, 0x2a, 0x53,
	0x33, 0x3f, 0xc4, 0xa9, 0xfd, 0x4c, 0x23, 0xea, 0x9f, 0xba, 0xb4, 0xeb, 0x81, 0xa8, 0xc5, 0xd3,
	0xa2, 0xea, 0x1b, 0xa2, 0x8d, 0xd2, 0x8a, 0x96, 0xcf, 0x72, 0x08, 0x9e, 0xe2, 0xc0, 0x73, 0xa2,
	0x2d, 0xf0, 0xf6, 0xcc, 0x67, 0x8c, 0x9c, 0x19, 0x85, 0x0f, 0x6b, 0x03, 0x52, 0x03, 0xff, 0x68,
	0xd2, 0xea, 0xc2, 0x3e, 0xb8, 0x56, 0x63, 0xeb, 0x1f, 0xe4, 0x80, 0xbb, 0x6d, 0x80, 0xcc, 0x34,
	0x1d, 0xf2, 0xb4, 0x41, 0x87, 0x94, 0xb0, 0xce, 0x0d, 0x32, 0x70, 0xf8, 0x2c, 0x62, 0x6c, 0x5d,
	0xad, 0x31, 0x62, 0xec, 0xbf, 0x73, 0x23, 0xf8, 0x37, 0x6e, 0xf0, 0xa2, 0x68, 0x4f, 0xf6, 0x44,
	0xcc, 0x91, 0x50, 0x33, 0xfd, 0xda, 0xc5, 0xff, 0xe7, 0xe4, 0x17, 0xe5, 0xbe, 0xf8, 0xb9, 0xd6,
	0x4a, 0x36, 0xee, 0xee, 0x73, 0x93, 0x1b, 0x05, 0x61, 0x30, 0x68, 0x56, 0x5b, 0x0f, 0x98, 0xa2,
	0xef, 0xc4, 0xfe, 0x8d, 0xcb, 0xd1, 0xbf, 0x49, 0x4b, 0x43, 0xfd, 0x23, 0x87, 0xe0, 0xcf, 0x38,
	0xf0, 0xa2, 0x68, 0x07, 0xa6, 0x7e, 0xfe, 0x89, 0xe2, 0xbe, 0x58, 0xff, 0x36, 0xc2, 0x92, 0x49,
	0x65, 0xf7, 0x76, 0x72, 0xfc, 0x0e, 0xae, 0x9b, 0x66, 0x88, 0x16, 0xad, 0x7f, 0x42, 0xd3, 0xe2,
	0x00, 0x61, 0x88, 0xaa, 0xe6, 0xa6, 0xf2, 0x49, 0x61, 0x88, 0x04, 0x7a, 0xee, 0x7a, 0x0e, 0xb1,
	0x24, 0x16, 0x54, 0x6f, 0xbe, 0x8b, 0xe6, 0x18, 0x28, 0x64, 0x9a, 0x96, 0xfb, 0x7b, 0x37, 0x82,
	0x3f, 0x75, 0x83, 0x55, 0xa2, 0x2d, 0xd1, 0x93, 0x60, 0xb0, 0x84, 0x7a, 0xee, 0x57, 0x2e, 0xfe,
	0x3f, 0x26, 0x3d, 0xab, 0xf8, 0xb9, 0x9a, 0x4b, 0x5a, 0xcd, 0xfd, 0x45, 0xb6, 0x76, 0x47, 0xd8,
	0x4d, 0x1f, 0x25, 0xfa, 0x0c, 0x51, 0xa2, 0xda, 0xf7, 0x9b, 0x5c, 0x21, 0x96, 0x38, 0xbb, 0xf2,
	0x7e, 0x3c, 0x79, 0x94, 0xc3, 0x4a, 0x1e, 0x59, 0x48, 0x64, 0x48, 0x1e, 0xad, 0x45, 0xb0, 0x59,
	0xcc, 0x27, 0x4d, 0x06, 0x6f, 0x44, 0x0a, 0x69, 0xbe, 0x21, 0x19, 0x84, 0xab, 0x9b, 0xe8, 0x16,
	0x93, 0x93, 0x91, 0x12, 0xfa, 0x84, 0x43, 0xf0, 0x03, 0x0e, 0x34, 0x89, 0xbc, 0x05, 0x79, 0x8f,
	0x34, 0x0f, 0x7f, 0x6d, 0xb2, 0x82, 0xe7, 0x49, 0xcd, 0x0f, 0x0d, 0xba, 0x80, 0x05, 0xe4, 0x4c,
	0xcb, 0x0f, 0xed, 0xe2, 0x10, 0xdc, 0xc1, 0x81, 0x67, 0x44, 0x06, 0xa4, 0x89, 0x88, 0x3b, 0xf9,
	0xd9, 0xa2, 0xb3, 0x6e, 0x6d, 0x8f, 0xe1, 0xbf, 0xb2, 0x12, 0xf0, 0xe1, 0x23, 0xb8, 0x0a, 0xc7,
	0x5b, 0x88, 0xe1, 0x91, 0xe6, 0xe1, 0x74, 0xfc, 0x64, 0x71, 0x7c, 0x05, 0x5f, 0x96, 0x12, 0xc7,
	0xe3, 0x6c, 0x51, 0x44, 0x18, 0xd0, 0x37, 0x35, 0x32, 0x97, 0xb9, 0x49, 0x4f, 0xc2, 0x15, 0xa2,
	0x95, 0xa9, 0x12, 0x91, 0x71, 0xf2, 0x79, 0xfb, 0x3f, 0xdd, 0xa4, 0x2e, 0x05, 0x6e, 0x6a, 0x6e,
	0x0d, 0xa7, 0xb7, 0x9d, 0x5f, 0x09, 0x72, 0x43, 0x1d, 0x9b, 0x3a, 0x9b, 0x02, 0xb8, 0xc5, 0x91,
	0x4b, 0x6d, 0x71, 0x74, 0x17, 0x82, 0xb3, 0x45, 0x1e, 0x27, 0xb3, 0xc6, 0x3e, 0xde, 0x16, 0x1d,
	0xde, 0x8b, 0x1b, 0x1d, 0x35, 0x02, 0x3c, 0x57, 0x6d, 0x50, 0x54, 0x01, 0xa6, 0x75, 0x04, 0xf1,
	0x53, 0x6e, 0xf5, 0xa9, 0x7b, 0x11, 0x2c, 0xd0, 0x4a, 0x88, 0xf0, 0x53, 0xb8, 0x0d, 0x1a, 0x79,
	0x36, 0xa7, 0x23, 0xa8, 0x3e, 0x27, 0x81, 0x19, 0xe4, 0x8b, 0x3a, 0xc7, 0x63, 0x10, 0xf1, 0x33,
	0xf2, 0xe0, 0xa5, 0xb1, 0x0b, 0x18, 0xc4, 0xe9, 0x78, 0x9e, 0xda, 0x8b, 0x2e, 0x7e, 0x03, 0x00,
	0x66, 0xff, 0x3b, 0x11, 0xbc, 0x5d, 0xbb, 0x01, 0x60, 0x74, 0x78, 0x58, 0xaf, 0x7c, 0x8d, 0x77,
	0xf2, 0x4f, 0xeb, 0xc4, 0x33, 0xc9, 0x8d, 0xbc, 0x28, 0x5a, 0x09, 0x6b, 0x6a, 0x93, 0x33, 0x70,
	0x72, 0x4c, 0xf9, 0x7f, 0xe6, 0x5d, 0xd6, 0x34, 0x49, 0xaf, 0x73, 0x1a, 0x99, 0xb4, 0xc8, 0xa3,
	0x8e, 0xaf, 0xe9, 0x16, 0xa8, 0x19, 0x64, 0x75, 0xc9, 0x2c, 0x43, 0xdb, 0x79, 0xa7, 0xba, 0x83,
	0x3d, 0x59, 0x80, 0x37, 0x03, 0x79, 0x53, 0x95, 0x48, 0x5a, 0x81, 0x77, 0x8c, 0x13, 0xda, 0x27,
	0x18, 0x27, 0x2c, 0x32, 0xc4, 0x09, 0xb7, 0xe8, 0xe7, 0xe9, 0x14, 0x00, 0x58, 0x41, 0xc2, 0x39,
	0x0e, 0xc1, 0x6f, 0x72, 0xe0, 0x49, 0x91, 0x41, 0x65, 0x7b, 0x5e, 0x48, 0x28, 0xe5, 0xcf, 0xf1,
	0xcf, 0xa6, 0xd7, 0x30, 0xc9, 0x21, 0x24, 0x50, 0xdd, 0xdd, 0x39, 0x00, 0x2c, 0x0d, 0xf8, 0xdb,
	0xc2, 0xeb, 0x5e, 0x51, 0xb4, 0xc0, 0xad, 0xc0, 0x1d, 0x0a, 0x6c, 0xd4, 0xdc, 0xa1, 0x50, 0x60,
	0xa3, 0xb0, 0x87, 0x03, 0xb9, 0xfa, 0x84, 0x50, 0xd0, 0x3a, 0x83, 0x9f, 0xeb, 0xc8, 0x0f, 0x64,
	0xfd, 0xf3, 0x4d, 0xeb, 0x1f, 0x5f, 0xec, 0x22, 0xc3, 0x62, 0xdf, 0xad, 0xb7, 0xf0, 0xef, 0x68,
	0xde, 0xd4, 0x16, 0x20, 0x5f, 0x6e, 0x68, 0x6f, 0xe9, 0xc0, 0xeb, 0x29, 0xfd, 0x7b, 0x18, 0xe4,
	0xd4, 0xa8, 0xfc, 0xc0, 0xff, 0x35, 0x07, 0x66, 0xe0, 0xed, 0x24, 0x18, 0x0c, 0xf2, 0x05, 0xac,
	0xcd, 0x4d, 0x18, 0x0c, 0x36, 0x06, 0x36, 0x16, 0xdc, 0x63, 0x3b, 0x16, 0x0a, 0x0a, 0xfb, 0x38,
	0x04, 0x5b, 0x40, 0x2e, 0x0c, 0x06, 0xdb, 0x5a, 0x9b, 0xfc, 0xe1, 0xd6, 0x8e, 0x76, 0x7e, 0x56,
	0xfc, 0x2a, 0x2b, 0x55, 0x21, 0x17, 0xd4, 0x9b, 0x7e, 0x28, 0xf4, 0x8c, 0x0e, 0x6d, 0x1d, 0xeb,
	0x79, 0x7f, 0x74, 0x68, 0x38, 0x36, 0x70, 0x32, 0xb6, 0x77, 0xbb, 0xfc, 0xf6, 0x3b, 0x58, 0xab,
	0x14, 0x7a, 0xc6, 0xae, 0x1d, 0x19, 0x3b, 0xb9, 0x1b, 0xeb, 0xcc, 0x58, 0xff, 0xb6, 0xf1, 0xd3,
	0x07, 0xa3, 0xef, 0x9f, 0x8c, 0xf6, 0xbe, 0x27, 0xbf, 0xf9, 0xde, 0xeb, 0x3f, 0x18, 0xdd, 0xe7,
	0x9a, 0x27, 0xdc, 0x57, 0xec, 0x0f, 0xb6, 0x16, 0x6f, 0x96, 0x8a, 0x31, 0x54, 0xc5, 0x6b, 0x5a,
	0x5f, 0x29, 0xee, 0xc6, 0x5a, 0x20, 0x52, 0xec, 0x0f, 0x06, 0x7d, 0x9c, 0xc8, 0xff, 0x2f, 0x0e,
	0x4c, 0xd7, 0xc2, 0x4c, 0xfe, 0x6e, 0x76, 0xc0, 0xac, 0xa0, 0x56, 0x60, 0x37, 0x44, 0x30, 0x6b,
	0x35, 0x62, 0xc6, 0xd3, 0x01, 0x2a, 0xb6, 0x30, 0x05, 0xf5, 0x74, 0xb7, 0x09, 0x3c, 0x42, 0xd7,
	0xed, 0x15, 0x7a, 0xe4, 0xbe, 0xc1, 0xe8, 0x89, 0x4b, 0xd1, 0x3d, 0x03, 0x7a, 0xbd, 0x43, 0xcf,
	0x41, 0xe2, 0xd5, 0x53, 0x25, 0x99, 0x2a, 0x72, 0xf7, 0xf3, 0x89, 0x90, 0xe3, 0xbf, 0xc7, 0x81,
	0x3c, 0x0d, 0x4c, 0x45, 0x32, 0xf8, 0x7b, 0xd9, 0x28, 0x10, 0x05, 0x5a, 0x30, 0xc7, 0x69, 0x38,
	0x14, 0x14, 0x36, 0x23, 0x58, 0xeb, 0x80, 0x24, 0x0e, 0xbb, 0x0b, 0xee, 0xa7, 0x91, 0xd4, 0x17,
	0x87, 0x9e, 0xa2, 0xc2, 0xbf, 0x50, 0x98, 0x67, 0x82, 0xbf, 0xad, 0x35, 0x14, 0x66, 0xae, 0xd0,
	0x45, 0x0e, 0xcc, 0xc0, 0xbe, 0x2a, 0x83, 0xfd, 0xf4, 0x01, 0x06, 0xfb, 0x51, 0x63, 0xa1, 0xa0,
	0xb0, 0x11, 0xc1, 0x87, 0xcc, 0xe0, 0x53, 0x71, 0x13, 0x59, 0x23, 0x12, 0x4b, 0xd1, 0x6b, 0x84,
	0x47, 0x54, 0xa8, 0x8b, 0x0a, 0x16, 0x24, 0xa0, 0x7a, 0x71, 0x37, 0xf6, 0xb6, 0x22, 0x0a, 0xe4,
	0xdf, 0xe5, 0xc0, 0x0c, 0xec, 0x88, 0x30, 0x20, 0xd7, 0x07, 0x18, 0x90, 0x53, 0x63, 0xa1, 0xa0,
	0x10, 0x41, 0xf0, 0x31, 0x23, 0xe4, 0x79, 0xa4, 0x42, 0x03, 0x0b, 0x4d, 0x11, 0xfe, 0x8b, 0x86,
	0xf9, 0xd3, 0xcb, 0xbb, 0xed, 0x04, 0x47, 0x45, 0x44, 0x14, 0x93, 0x46, 0x84, 0xbf, 0xc6, 0x81,
	0x3c, 0x2c, 0xc9, 0x44, 0x1f, 0xdc, 0xcb, 0x92, 0x72, 0x3c, 0xc6, 0xe0, 0x23, 0xe3, 0x70, 0x28,
	0x28, 0x04, 0x11, 0x2c, 0xd5, 0x75, 0x4b, 0x5c, 0x03, 0x60, 0x2f, 0xb9, 0x20, 0x7f, 0x74, 0x68,
	0x58, 0xe3, 0x16, 0xc3, 0x88, 0x0a, 0x77, 0x99, 0x50, 0x9c, 0x2c, 0xdc, 0x64, 0x82, 0xb2, 0x0e,
	0xdf, 0xe1, 0x40, 0xae, 0xca, 0xce, 0xe4, 0xa3, 0x5f, 0x60, 0x70, 0x7a, 0x1c, 0xfe, 0x7b, 0x1d,
	0x46, 0xb1, 0x18, 0x7c, 0x51, 0x07, 0x9f, 0x48, 0x00, 0x86, 0x90, 0xb0, 0xd0, 0x1c, 0x5a, 0x02,
	0xf0, 0x08, 0x2d, 0xe6, 0x2a, 0x1e, 0x5e, 0x3e, 0x55, 0x3c, 0x14, 0x2d, 0x3c, 0x8b, 0x82, 0x45,
	0x95, 0x68, 0x8f, 0x2d, 0xa8, 0x9a, 0x50, 0xdf, 0x9f, 0x60, 0x46, 0x28, 0x28, 0xbc, 0xc6, 0x21,
	0xf8, 0x08, 0x1b, 0x23, 0x96, 0x4c, 0xeb, 0xbb, 0xa6, 0xf4, 0x14, 0x15, 0xa9, 0x2a, 0xa1, 0x2c,
	0x19, 0x99, 0x66, 0xad, 0xd0, 0x8f, 0x39, 0x90, 0x87, 0xc5, 0x95, 0xcd, 0x63, 0xf4, 0x18, 0x83,
	0xc7, 0x8c, 0xc3, 0xa1, 0xa0, 0xa0, 0x44, 0xb9, 0x75, 0x14, 0x4e, 0x54, 0x1c, 0x46, 0x56, 0x69,
	0xbe, 0x55, 0xd0, 0x75, 0x9c, 0x2c, 0xcb, 0xf5, 0x70, 0x41, 0x65, 0x8a, 0xcb, 0x55, 0xdc, 0x8d,
	0x0f, 0x07, 0xab, 0x7a, 0x40, 0xd1, 0xc4, 0x58, 0xa4, 0xd9, 0xd8, 0xd1, 0x63, 0x0c, 0xec, 0x8c,
	0xc3, 0x98, 0x05, 0xe3, 0x12, 0x44, 0x74, 0x01, 0x11, 0x9f, 0x7b, 0xac, 0xba, 0x40, 0x47, 0x4b,
	0x45, 0xc5, 0x27, 0xa6, 0x8d, 0x0a, 0xff, 0xa7, 0x1c, 0xb8, 0x9d, 0x16, 0xe7, 0x1a, 0x5c, 0xc3,
	0xc8, 0xcf, 0xb3, 0x97, 0x78, 0x32, 0x45, 0xc1, 0xea, 0xb7, 0x93, 0x98, 0x15, 0x0a, 0x0a, 0xad,
	0x08, 0x3e, 0x08, 0xa6, 0x69, 0xaf, 0xce, 0x23, 0x35, 0x2b, 0xea, 0x19, 0xdd, 0x02, 0x1e, 0xff,
	0x45, 0x9f, 0x0e, 0x56, 0x91, 0x2a, 0x17, 0x4a, 0x52, 0x41, 0x4a, 0x79, 0xb3, 0xb2, 0x2e, 0x1f,
	0xba, 0xc0, 0x9d, 0x94, 0x44, 0x90, 0x6f, 0xaa, 0x92, 0x35, 0xdf, 0x56, 0x6e, 0xa8, 0x59, 0x0a,
	0x56, 0x0b, 0x92, 0x9b, 0x18, 0x0a, 0x0a, 0xdf, 0xe3, 0x10, 0x7c, 0x8d, 0x8b, 0xa3, 0x36, 0xc7,
	0x20, 0x69, 0x03, 0xef, 0x8e, 0x5e, 0xd9, 0x47, 0x8e, 0x22, 0x63, 0xa9, 0x5b, 0xe9, 0x3c, 0x5e,
	0xe8, 0x89, 0x1e, 0xfa, 0x3a, 0x2d, 0x98, 0xf8, 0x24, 0x2b, 0x3e, 0xde, 0x2a, 0xef, 0xed, 0xb5,
	0x7b, 0x0e, 0x73, 0x81, 0x50, 0x9e, 0xb2, 0xa8, 0x6a, 0x54, 0x3b, 0xea, 0x22, 0x91, 0x8d, 0x91,
	0x09, 0xe6, 0x26, 0x22, 0x84, 0x42, 0xad, 0x79, 0x89, 0x27, 0x85, 0x82, 0xc2, 0x30, 0x87, 0xe0,
	0x06, 0x9a, 0x50, 0xaa, 0x53, 0x34, 0x76, 0x66, 0x9b, 0xde, 0xb1, 0x8b, 0xe6, 0x80, 0x82, 0x6a,
	0x32, 0xae, 0xe6, 0x3a, 0xc9, 0x71, 0x41, 0x55, 0x76, 0x89, 0x7b, 0xf2, 0xe6, 0x27, 0xf2, 0xe0,
	0x25, 0x45, 0x16, 0x34, 0x41, 0xc0, 0x34, 0x22, 0x32, 0x12, 0xe7, 0xa2, 0x5a, 0xe1, 0x11, 0x13,
	0x51, 0x5a, 0x5a, 0xdb, 0x9b, 0x57, 0xaf, 0xd9, 0xb2, 0x1a, 0x27, 0x3f, 0x93, 0x23, 0xcf, 0x7e,
	0x17, 0xd9, 0x14, 0x27, 0xe7, 0x79, 0x8d, 0x54, 0x12, 0x99, 0x2d, 0x10, 0xad, 0x13, 0x15, 0x62,
	0x3d, 0x98, 0xf4, 0xdc, 0x50, 0x50, 0x38, 0xc6, 0x21, 0xd8, 0x68, 0x61, 0x2e, 0x9c, 0x0d, 0xa6,
	0x5b, 0x6c, 0x13, 0x9a, 0xcd, 0xa7, 0xc7, 0x4d, 0x6d, 0x45, 0x2c, 0xe2, 0x55, 0x2d, 0x3c, 0x6c,
	0x43, 0x98, 0xd6, 0xf6, 0x64, 0xb9, 0xe6, 0x5f, 0x29, 0x2f, 0x42, 0xe1, 0x53, 0x3b, 0x2f, 0x42,
	0x19, 0x73, 0xf0, 0x22, 0xf0, 0x70, 0x28, 0x28, 0xbc, 0xc7, 0x21, 0xb8, 0x4e, 0x51, 0x82, 0xf8,
	0x65, 0xba, 0xb3, 0x80, 0xd7, 0x76, 0xc1, 0xe8, 0xb5, 0x81, 0xe8, 0xfe, 0x4b, 0x18, 0x93, 0x85,
	0x05, 0x8f, 0x98, 0x86, 0x3f, 0xbd, 0xbc, 0x5b, 0xde, 0xf3, 0xa1, 0x3c, 0x78, 0x89, 0xad, 0xfe,
	0x71, 0x60, 0xa1, 0xbe, 0x81, 0xf2, 0x99, 0x52, 0xf3, 0x3d, 0x14, 0xb0, 0x14, 0xbc, 0x63, 0x71,
	0xdf, 0x43, 0x85, 0x94, 0xed, 0x7b, 0x68, 0x58, 0xdf, 0xeb, 0x30, 0x1a, 0x0a, 0x0a, 0xfd, 0x1c,
	0x82, 0xcf, 0xe8, 0x48, 0xdf, 0x43, 0xcb, 0x82, 0xe2, 0x64, 0xf7, 0xbd, 0x23, 0xef, 0x3c, 0x4b,
	0x16, 0xb8, 0x88, 0xf6, 0xcd, 0xf5, 0x29, 0xb4, 0xa6, 0xa0, 0xa7, 0x63, 0x2b, 0xc7, 0x3f, 0x94,
	0x22, 0x82, 0xc5, 0xdd, 0xfa, 0x31, 0xef, 0x08, 0xff, 0x6f, 0x1c, 0xb8, 0x9d, 0x6e, 0x64, 0x8c,
	0xbf, 0x12, 0xe2, 0xe7, 0xd9, 0x37, 0x69, 0x26, 0x53, 0x18, 0xd6, 0x81, 0x39, 0x8b, 0x84, 0x5a,
	0x4f, 0xeb, 0x14, 0x30, 0xaa, 0x50, 0x35, 0xda, 0xc7, 0xcb, 0x86, 0xa3, 0xfd, 0x82, 0xf9, 0x4c,
	0x22, 0x58, 0x27, 0xa6, 0xeb, 0xbe, 0x50, 0x8b, 0xac, 0xbb, 0x2f, 0x2c, 0xe6, 0xa6, 0xc7, 0x1c,
	0xdc, 0x17, 0x7d, 0x9d, 0x0f, 0x71, 0x08, 0x3e, 0xa9, 0x63, 0x79, 0x3f, 0xed, 0xaa, 0xe0, 0xdf,
	0xcc, 0xab, 0x9d, 0x78, 0x8a, 0x8a, 0xe2, 0x92, 0x82, 0x89, 0xac, 0xb0, 0x82, 0xa9, 0xac, 0x88,
	0xb1, 0x7a, 0xd1, 0x90, 0x8d, 0x18, 0x53, 0x63, 0x2c, 0x31, 0x36, 0x0c, 0x87, 0x82, 0xc2, 0x01,
	0xcd, 0x51, 0x53, 0x5f, 0x96, 0x1f, 0x45, 0xa7, 0xc6, 0xf7, 0x6f, 0xd5, 0x1c, 0xb5, 0xb8, 0x00,
	0x16, 0xdc, 0x8f, 0x47, 0x68, 0xa7, 0x3a, 0xd6, 0xbf, 0xcd, 0x22, 0xa3, 0x8f, 0x0a, 0xd5, 0x26,
	0x04, 0x9b, 0xd4, 0x2f, 0xa6, 0x8c, 0xe7, 0x88, 0x0b, 0xdc, 0xa2, 0x2a, 0xd9, 0xce, 0x0d, 0x1a,
	0xaf, 0x99, 0x30, 0xa1, 0x07, 0x15, 0x4c, 0xef, 0x73, 0x1c, 0x0f, 0x05, 0x85, 0x31, 0x0e, 0xc1,
	0x83, 0x9c, 0x8e, 0x2b, 0x1f, 0x3b, 0x39, 0x30, 0x36, 0x70, 0x8a, 0xc6, 0xb5, 0xa0, 0xcb, 0xfa,
	0xdb, 0xa7, 0x97, 0x77, 0xe3, 0x1f, 0x47, 0x2f, 0xed, 0x92, 0xf7, 0xf6, 0xc6, 0x3e, 0x1c, 0x89,
	0x8d, 0x1c, 0x1f, 0xbd, 0xdc, 0x8f, 0x95, 0x94, 0xd5, 0xc8, 0xc7, 0xfa, 0xb7, 0xc5, 0xf6, 0x1f,
	0x8f, 0xf6, 0xec, 0x25, 0x0d, 0x2b, 0xaf, 0x5c, 0x8b, 0xed, 0x3f, 0x1b, 0x3d, 0x7b, 0x32, 0x7a,
	0xec, 0x9a, 0xdc, 0x73, 0x58, 0x7f, 0x10, 0xff, 0xa2, 0x68, 0x84, 0xa1, 0x0f, 0xa2, 0xc7, 0xf7,
	0xa9, 0xc4, 0x5b, 0x2a, 0xd4, 0x98, 0x89, 0x87, 0x91, 0x48, 0x99, 0x7a, 0x47, 0xdc, 0xe0, 0x0b,
	0xd4, 0xed, 0xe5, 0x18, 0xe3, 0xe7, 0x5a, 0xc3, 0xeb, 0x34, 0xf3, 0x64, 0x7f, 0x39, 0xbb, 0x65,
	0xae, 0x42, 0xdb, 0x45, 0xa9, 0x4c, 0x0f, 0x05, 0x85, 0x23, 0x2e, 0xb5, 0x33, 0x66, 0x2e, 0x35,
	0x85, 0xaf, 0x26, 0x9e, 0x24, 0xee, 0x31, 0xc0, 0x34, 0x14, 0x85, 0x1e, 0xfd, 0xce, 0x92, 0x42,
	0xcf, 0xf8, 0xe1, 0x6d, 0xf2, 0xd0, 0x69, 0xe2, 0x39, 0xa9, 0x2d, 0x44, 0x16, 0x16, 0xbc, 0x6c,
	0xfd, 0x51, 0x21, 0xa1, 0xfa, 0x84, 0xdc, 0x3b, 0x42, 0x7f, 0x21, 0xae, 0x72, 0xd3, 0x35, 0x3a,
	0xd4, 0xad, 0x33, 0x36, 0xbc, 0x6d, 0xbf, 0x2c, 0x86, 0x4e, 0x2a, 0x2f, 0xb7, 0x86, 0xd7, 0xad,
	0xa6, 0x4c, 0xf1, 0x88, 0x4b, 0x3b, 0x7a, 0x41, 0xd3, 0x47, 0x48, 0x40, 0x63, 0x65, 0x1d, 0xe6,
	0x26, 0x9c, 0x13, 0x0a, 0x0a, 0x3f, 0xe1, 0x10, 0x7c, 0xc7, 0x44, 0xfc, 0x45, 0x29, 0x11, 0x7f,
	0x61, 0xc1, 0x0b, 0x53, 0x4b, 0x4a, 0xab, 0xfb, 0x9b, 0x1c, 0x29, 0x15, 0xea, 0x0d, 0xba, 0xc8,
	0xd9, 0x76, 0x1a, 0xbf, 0xfb, 0xed, 0xee, 0x3b, 0x8f, 0xd3, 0x4e, 0x48, 0x34, 0x25, 0x14, 0x14,
	0x7e, 0x80, 0xef, 0x49, 0x31, 0x90, 0xae, 0x90, 0xd8, 0x30, 0x23, 0x29, 0x68, 0xd5, 0x4e, 0x61,
	0x57, 0x50, 0x43, 0xcf, 0x66, 0x1a, 0x7f, 0xea, 0xdd, 0x36, 0x2f, 0x51, 0x49, 0xd4, 0xc0, 0x3f,
	0x9a, 0x16, 0x89, 0x8a, 0xbb, 0x4d, 0x5d, 0x7c, 0x22, 0xfc, 0x59, 0xbd, 0x10, 0x97, 0xba, 0xff,
	0x55, 0xf3, 0x0e, 0x16, 0x26, 0xb8, 0xe2, 0x96, 0x72, 0x11, 0xc4, 0x64, 0xa7, 0x86, 0x82, 0xc2,
	0x47, 0x1c, 0x82, 0x6d, 0x46, 0x42, 0x2e, 0x74, 0x76, 0x16, 0x68, 0x2a, 0x4a, 0x49, 0xfa, 0x0d,
	0x66, 0xa2, 0x3d, 0x22, 0xf8, 0x52, 0x73, 0x21, 0xcc, 0xcc, 0x75, 0xc6, 0xa5, 0x15, 0xc5, 0x38,
	0x88, 0xa6, 0x65, 0x02, 0x43, 0x34, 0x19, 0x73, 0x42, 0x41, 0xe1, 0x0f, 0x39, 0x04, 0x43, 0x46,
	0xaa, 0x78, 0x69, 0xcf, 0x81, 0x1a, 0x70, 0xe0, 0xb1, 0xd4, 0x1f, 0x51, 0x89, 0xb3, 0xac, 0x60,
	0xb2, 0x38, 0x4a, 0x35, 0x31, 0x8a, 0x12, 0x8b, 0xdf, 0x78, 0x68, 0xa3, 0xc4, 0xcc, 0x13, 0x58,
	0x4a, 0xcc, 0x3a, 0x27, 0x14, 0x14, 0x2e, 0x73, 0x08, 0x7e, 0xd5, 0x48, 0xa9, 0xb9, 0x76, 0xce,
	0x09, 0x4d, 0x9b, 0xc2, 0x84, 0x7e, 0x8a, 0x99, 0x2c, 0x2b, 0x84, 0x27, 0x53, 0x75, 0x59, 0x12,
	0x53, 0xe7, 0x9f, 0x5d, 0x80, 0x27, 0x1e, 0x88, 0x01, 0x05, 0xa6, 0x8f, 0x62, 0xa2, 0xcf, 0xbc,
	0xc4, 0x93, 0x42, 0x41, 0x61, 0xaf, 0x4b, 0x2d, 0xd2, 0x31, 0x50, 0xe8, 0x5e, 0xab, 0xfb, 0x42,
	0xd3, 0xe6, 0x0d, 0xee, 0xb3, 0x72, 0x6f, 0xcc, 0x34, 0x7f, 0x46, 0x78, 0x2a, 0x65, 0x4f, 0x27,
	0x31, 0xd1, 0x5f, 0x57, 0x7c, 0x46, 0xd5, 0x24, 0x92, 0x28, 0x9d, 0x67, 0x06, 0xb1, 0xf1, 0x16,
	0x87, 0x16, 0x9f, 0xd1, 0x38, 0x1e, 0x0a, 0x0a, 0x83, 0x1c, 0x82, 0x1b, 0xc1, 0x34, 0xed, 0x7d,
	0x77, 0xc4, 0xb7, 0xc7, 0xa8, 0x66, 0x6a, 0x05, 0x4f, 0x99, 0x52, 0xe5, 0xf4, 0xe0, 0xa7, 0x97,
	0x77, 0xab, 0x17, 0xb3, 0x61, 0xc7, 0x85, 0x3e, 0xd0, 0xaa, 0x12, 0x0a, 0x37, 0x8c, 0x54, 0xdb,
	0x94, 0xbf, 0x16, 0xdd, 0x7a, 0x06, 0xf7, 0x34, 0x4f, 0x39, 0xa7, 0x46, 0x5a, 0x84, 0x29, 0x44,
	0x18, 0xd5, 0x76, 0x9d, 0x34, 0x98, 0xef, 0xb5, 0xcf, 0x62, 0xd8, 0xed, 0x3a, 0xd1, 0x14, 0xd8,
	0xcf, 0x21, 0xb8, 0x2c, 0x4e, 0x81, 0x7c, 0x43, 0x2a, 0x9a, 0x26, 0xc2, 0x7c, 0x6b, 0xda, 0x5d,
	0x55, 0x48, 0xe6, 0x9b, 0x77, 0xb1, 0xa2, 0xe6, 0x1f, 0x4e, 0x15, 0xb9, 0xe2, 0xee, 0x78, 0x23,
	0xb4, 0x08, 0xff, 0x33, 0x0e, 0xdc, 0x82, 0x75, 0xac, 0xcd, 0x5a, 0x1b, 0x06, 0x19, 0x6b, 0x6d,
	0x1a, 0x27, 0x41, 0x9f, 0x01, 0x53, 0x9b, 0xab, 0x83, 0x8d, 0xa9, 0xeb, 0x44, 0x98, 0x56, 0x17,
	0x4c, 0x0c, 0x53, 0x65, 0x4d, 0xff, 0x83, 0x03, 0xb7, 0x60, 0x35, 0x69, 0xc7, 0xd8, 0xf4, 0x20,
	0x8b, 0xb1, 0x8d, 0xe3, 0xa1, 0xa0, 0x70, 0x86, 0x43, 0xf0, 0xd9, 0x38, 0xb2, 0x3c, 0x56, 0x9b,
	0x86, 0x05, 0xad, 0xb0, 0xaa, 0x52, 0x13, 0x63, 0x8f, 0x0e, 0xed, 0x91, 0xb7, 0xef, 0x91, 0x5f,
	0x23, 0x8c, 0x40, 0xc5, 0x81, 0x0d, 0x42, 0x6d, 0xaa, 0x4a, 0xd5, 0x0e, 0xf9, 0x71, 0x0e, 0xcc,
	0x24, 0x37, 0x9c, 0x6a, 0xd0, 0x9a, 0xb0, 0x33, 0x8e, 0x2a, 0xe8, 0x7b, 0x9c, 0x27, 0x90, 0x3c,
	0xc6, 0x12, 0x6a, 0xb1, 0x09, 0x06, 0xf4, 0x92, 0x62, 0x2a, 0xdc, 0xc3, 0x18, 0xd1, 0xae, 0x1c,
	0x50, 0x51, 0x7d, 0x4c, 0xa8, 0x33, 0xa1, 0x1a, 0xc4, 0x9f, 0x4b, 0x03, 0xd7, 0xbf, 0xe1, 0xc0,
	0x2c, 0xed, 0x7a, 0x4c, 0x0d, 0x34, 0x13, 0x2e, 0xa6, 0x61, 0xc6, 0x1e, 0x93, 0x65, 0x46, 0x28,
	0x28, 0xbc, 0xc9, 0x21, 0xe8, 0xa5, 0x96, 0xdb, 0x7a, 0xd3, 0x66, 0x01, 0xe3, 0x37, 0x15, 0xbf,
	0xc7, 0x85, 0x7a, 0x13, 0x7e, 0xda, 0x55, 0x8d, 0x69, 0x20, 0xf8, 0x2f, 0x9c, 0x76, 0x3a, 0x15,
	0xfb, 0x8d, 0x04, 0xa0, 0x10, 0xef, 0x90, 0x7e, 0xd2, 0xe6, 0x28, 0xa8, 0x3e, 0x90, 0xcc, 0xb4,
	0x50, 0x50, 0xd8, 0xcd, 0x21, 0xd8, 0x60, 0xd1, 0x5a, 0xa4, 0x1e, 0x85, 0x66, 0xf2, 0x79, 0x76,
	0x23, 0x96, 0x3d, 0xa8, 0x94, 0x53, 0xf6, 0x94, 0x52, 0x3e, 0xab, 0x1f, 0x5c, 0xa6, 0x2f, 0x3d,
	0xe5, 0xed, 0xc3, 0x39, 0x6a, 0x75, 0xe7, 0x25, 0x9e, 0x14, 0x0a, 0x0a, 0xdf, 0xc7, 0x9b, 0x1b,
	0x79, 0x86, 0xf7, 0x7b, 0x98, 0xe6, 0x8a, 0x76, 0x09, 0xa6, 0xc4, 0x72, 0x3d, 0x24, 0x54, 0xa4,
	0xe8, 0x68, 0x52, 0xa4, 0xea, 0x73, 0x91, 0xaa, 0x3d, 0x03, 0x26, 0xb6, 0xc1, 0x1b, 0x45, 0xa8,
	0xb9, 0x09, 0xe7, 0x84, 0x82, 0xc2, 0x79, 0x0e, 0xc1, 0xaf, 0x98, 0xc8, 0x34, 0xd7, 0xce, 0xa6,
	0xd1, 0x94, 0x4a, 0xc9, 0xbc, 0x3d, 0xce, 0x37, 0xa4, 0x47, 0x01, 0xcd, 0xb1, 0xa1, 0x4d, 0xdd,
	0x01, 0xbd, 0xaa, 0xd9, 0x89, 0x79, 0x58, 0x17, 0xe0, 0x5b, 0x98, 0x87, 0x7d, 0x4b, 0xbe, 0xf0,
	0x21, 0x93, 0x28, 0x36, 0xe6, 0xcf, 0x48, 0x94, 0x14, 0x2c, 0xe1, 0x93, 0x05, 0x93, 0x47, 0x14,
	0x85, 0x53, 0xde, 0x53, 0x84, 0xca, 0x72, 0xe7, 0x3a, 0x6f, 0x1f, 0x5e, 0x38, 0x08, 0x15, 0xf3,
	0xea, 0x76, 0xe1, 0xbb, 0x1c, 0x82, 0x01, 0x13, 0x5d, 0xee, 0xb5, 0x5a, 0x4a, 0x9a, 0x22, 0x13,
	0x31, 0x9a, 0xcf, 0x0a, 0xcb, 0xd3, 0x8b, 0x44, 0x9c, 0xe9, 0xb4, 0xdf, 0x05, 0x6e, 0x67, 0x5c,
	0x11, 0x6e, 0xde, 0x17, 0x60, 0x5f, 0xac, 0x6e, 0xde, 0x17, 0xb0, 0xb9, 0x6b, 0x5c, 0x75, 0x94,
	0x97, 0x9b, 0x59, 0xc8, 0xce, 0xa8, 0xd2, 0x04, 0x4b, 0x68, 0x5f, 0x57, 0x0a, 0x4f, 0xa7, 0x6c,
	0x5f, 0x93, 0x21, 0xcb, 0x5b, 0x2e, 0x30, 0x9b, 0x75, 0x15, 0xb5, 0xd9, 0x14, 0xd9, 0x5c, 0xe5,
	0x6d, 0x36, 0x45, 0x76, 0xb7, 0x5a, 0x0b, 0x27, 0x39, 0x04, 0xa1, 0x99, 0x89, 0xac, 0xb6, 0x96,
	0xa6, 0x89, 0x9d, 0x29, 0x7e, 0x4e, 0x68, 0x4c, 0xdd, 0x14, 0x27, 0x43, 0x8b, 0xc3, 0xda, 0x9e,
	0x29, 0x9d, 0xce, 0xd1, 0x6d, 0x73, 0xa2, 0xbc, 0x0f, 0x6d, 0xa0, 0x1f, 0x4c, 0x7a, 0x6e, 0x28,
	0x28, 0x7c, 0x9d, 0x43, 0xf0, 0x05, 0xb6, 0x32, 0xb6, 0x1a, 0x64, 0x9a, 0x40, 0xc9, 0x5b, 0xed,
	0x25, 0xc2, 0x43, 0xe9, 0x64, 0x84, 0x28, 0x83, 0xf4, 0x7d, 0x0e, 0xe4, 0xe0, 0x7b, 0x91, 0xf9,
	0xbb, 0x4c, 0x4b, 0xae, 0xdd, 0x4f, 0x5d, 0x90, 0xcf, 0x1e, 0x08, 0x05, 0x85, 0x1e, 0x0e, 0xc1,
	0xc7, 0x75, 0x47, 0xc4, 0x84, 0x6b, 0x3e, 0x9e, 0x68, 0xbd, 0x87, 0xb9, 0xc0, 0x76, 0x24, 0xe5,
	0x9d, 0x50, 0x7c, 0xbf, 0xb6, 0x82, 0xc8, 0xdb, 0xa6, 0x34, 0x20, 0x7d, 0xdb, 0x85, 0x53, 0x1a,
	0xd0, 0x74, 0x6d, 0x8b, 0x53, 0x1a, 0xd0, 0x7c, 0x81, 0x86, 0xba, 0x2b, 0xfe, 0x84, 0x5a, 0x3b,
	0xa7, 0xfd, 0x6e, 0xf2, 0xc5, 0xa8, 0x33, 0x53, 0xa6, 0x55, 0x35, 0x5c, 0xbc, 0x6b, 0x5a, 0x55,
	0x6b, 0x2a, 0x5e, 0x59, 0xd5, 0xd5, 0xeb, 0x30, 0x14, 0x0e, 0xd4, 0x50, 0xff, 0x4b, 0x20, 0x51,
	0x68, 0x72, 0xc5, 0x45, 0x2e, 0x95, 0x60, 0xde, 0x25, 0xc8, 0x3f, 0x98, 0xfc, 0x85, 0x89, 0x1b,
	0x0b, 0x0a, 0x53, 0xb9, 0x5d, 0x51, 0xb5, 0x2d, 0x1b, 0x8d, 0x94, 0x11, 0x0d, 0x7e, 0x08, 0x76,
	0xaf, 0xb6, 0xbf, 0xc9, 0xbc, 0xc4, 0xb0, 0xa0, 0x22, 0xf9, 0xb9, 0x16, 0xea, 0x59, 0x83, 0x33,
	0x95, 0x7a, 0x9d, 0x1a, 0xac, 0x29, 0xd0, 0x6f, 0x44, 0xe3, 0x29, 0xc6, 0x8d, 0x55, 0x4c, 0x9e,
	0x62, 0x5f, 0x92, 0xc6, 0xe4, 0x29, 0x9b, 0x4b, 0xb0, 0x84, 0x3f, 0xe0, 0x10, 0x7c, 0xd9, 0x48,
	0xb9, 0x22, 0xeb, 0x3d, 0x72, 0x0e, 0xb7, 0x63, 0x15, 0x54, 0xa5, 0x34, 0x3d, 0x59, 0xee, 0xdb,
	0x80, 0xe1, 0x4d, 0x81, 0x7a, 0x97, 0x34, 0xb5, 0xcb, 0xba, 0x80, 0x86, 0xa9, 0x76, 0x6d, 0xae,
	0x52, 0x62, 0xaa, 0x5d, 0xbb, 0x5b, 0x6d, 0x84, 0xef, 0x58, 0x59, 0xaf, 0x24, 0xd5, 0x8b, 0x6e,
	0x0a, 0x52, 0x7e, 0xc2, 0x66, 0x8b, 0x53, 0x25, 0x5d, 0x80, 0x80, 0x9a, 0x02, 0xed, 0xce, 0xb8,
	0xe2, 0xa7, 0xf4, 0x4d, 0x1d, 0xfc, 0xf9, 0x05, 0x49, 0xde, 0x95, 0xb1, 0xb1, 0x60, 0x61, 0xd2,
	0xb7, 0x6a, 0x08, 0x9f, 0x70, 0x08, 0xae, 0x77, 0x12, 0x58, 0x1a, 0x63, 0xf5, 0x1e, 0x04, 0xfa,
	0xa2, 0x00, 0x8d, 0x5e, 0xc9, 0xcc, 0xa5, 0xb3, 0x47, 0x42, 0xf2, 0xd9, 0x23, 0x9a, 0x42, 0xb4,
	0x01, 0xfb, 0x09, 0x07, 0x66, 0x1a, 0x3b, 0x59, 0xf3, 0xf7, 0x39, 0x77, 0xe3, 0xb6, 0x24, 0x50,
	0xac, 0x8d, 0xb0, 0x85, 0xed, 0x1c, 0x82, 0x8f, 0x82, 0xe9, 0xfa, 0x2b, 0x79, 0x6b, 0x63, 0xec,
	0x82, 0xf9, 0xa3, 0x43, 0xc3, 0x06, 0x84, 0xb5, 0x60, 0x33, 0x1e, 0x24, 0xa8, 0x13, 0x55, 0x54,
	0x2b, 0x04, 0x6f, 0xd2, 0xa8, 0x6a, 0x2d, 0xff, 0x14, 0xf4, 0xfe, 0x8e, 0x03, 0xb7, 0x18, 0x3a,
	0x5e, 0xf2, 0x73, 0x1c, 0xba, 0x77, 0x32, 0x92, 0x63, 0x96, 0xf6, 0xbc, 0x42, 0x1f, 0x87, 0xe0,
	0x0a, 0x0a, 0xb7, 0x7c, 0xbb, 0x76, 0xbd, 0x05, 0x45, 0xcc, 0xca, 0x5c, 0xbb, 0xce, 0xc0, 0x2a,
	0x9e, 0xa5, 0x7c, 0xea, 0x78, 0xf2, 0xbf, 0xe0, 0x4c, 0x3d, 0x96, 0xd5, 0x22, 0x49, 0x21, 0x61,
	0x9b, 0x52, 0x76, 0x54, 0x6c, 0xee, 0x0d, 0xaa, 0x26, 0x79, 0x97, 0x3b, 0x23, 0x4c, 0xc4, 0x9e,
	0xc1, 0xf2, 0xa3, 0x43, 0xbb, 0x4c, 0x38, 0x53, 0x02, 0x6f, 0xcd, 0x05, 0x24, 0xf0, 0xbf, 0xe8,
	0xa5, 0xfd, 0x2b, 0x0e, 0xcc, 0x34, 0xf6, 0x47, 0x34, 0x73, 0xae, 0xa5, 0x75, 0xa4, 0x99, 0x73,
	0xad, 0xed, 0x15, 0x85, 0xd7, 0x39, 0x04, 0x2b, 0x8d, 0x9c, 0x6b, 0x6e, 0xb7, 0x58, 0x90, 0x6f,
	0x28, 0xe3, 0x35, 0xb3, 0x2a, 0x14, 0x1f, 0x49, 0x79, 0x09, 0x8b, 0xbb, 0xa9, 0x3e, 0x95, 0x11,
	0x5e, 0xd6, 0x85, 0x52, 0x3b, 0x23, 0xc9, 0x16, 0x4a, 0xea, 0x04, 0x25, 0x5b, 0x28, 0xe9, 0xc3,
	0xa0, 0x2a, 0xe3, 0x2e, 0x07, 0xd3, 0xf5, 0x57, 0xce, 0xc1, 0x12, 0x47, 0x9f, 0xb9, 0xc4, 0x77,
	0xda, 0x12, 0xf6, 0x9d, 0x87, 0xc7, 0xad, 0xa7, 0x74, 0xe9, 0x59, 0x29, 0x4b, 0x67, 0xb0, 0xb3,
	0xa3, 0xc9, 0x1f, 0x0e, 0x77, 0x2a, 0x4b, 0xf8, 0x4b, 0x8d, 0x71, 0xe9, 0x5e, 0x39, 0x4c, 0xc6,
	0x35, 0x75, 0x69, 0x63, 0x32, 0xae, 0xb9, 0x0d, 0x98, 0xf0, 0x8e, 0x9a, 0xb9, 0xa0, 0x10, 0x76,
	0x6e, 0x0b, 0x66, 0xd4, 0xc2, 0x7a, 0x23, 0x32, 0x7d, 0x6f, 0xde, 0xfa, 0x44, 0xca, 0x22, 0xab,
	0x21, 0xcf, 0xff, 0x9c, 0x63, 0x34, 0x77, 0x53, 0xc5, 0xf6, 0x81, 0xa4, 0xba, 0x1f, 0x6d, 0x2c,
	0x98, 0x9f, 0x64, 0x97, 0x24, 0x35, 0xbb, 0xbb, 0x22, 0x19, 0x2a, 0x10, 0x21, 0x9e, 0xcf, 0xa4,
	0x82, 0x75, 0xa2, 0xc3, 0x49, 0xa1, 0xd5, 0x6b, 0xb6, 0xac, 0x5e, 0xd7, 0x11, 0x0a, 0x1b, 0x16,
	0xfb, 0x53, 0x2d, 0xbb, 0x6b, 0x6a, 0x19, 0xc2, 0xcc, 0xee, 0x5a, 0xdb, 0xd6, 0x30, 0xb3, 0xbb,
	0x8c, 0xee, 0x23, 0xc2, 0x0e, 0x0e, 0xc1, 0x95, 0x14, 0xbe, 0xf7, 0x27, 0xec, 0x46, 0x62, 0x44,
	0xd9, 0x61, 0xa2, 0x8a, 0xf2, 0x02, 0x61, 0xae, 0x0d, 0xca, 0xca, 0x52, 0xd3, 0x18, 0xff, 0x5f,
	0x0e, 0xcc, 0x34, 0x9e, 0xe3, 0xe7, 0xef, 0x4b, 0xd0, 0x3f, 0xc2, 0x2c, 0xc6, 0xd6, 0x36, 0x00,
	0x6a, 0x51, 0x1e, 0x8d, 0x9f, 0xa1, 0xc1, 0x84, 0x89, 0x9f, 0xa9, 0x04, 0x9c, 0xbe, 0x92, 0x26,
	0x73, 0x64, 0xe1, 0xe7, 0x8a, 0x82, 0xf4, 0x84, 0xf9, 0x27, 0xba, 0x3e, 0xb6, 0xc3, 0xd6, 0x72,
	0xec, 0x9b, 0xad, 0x8f, 0x0d, 0xd8, 0x2a, 0x9e, 0xc4, 0x63, 0x14, 0xb6, 0x3c, 0x7d, 0xb8, 0x0a,
	0xc3, 0x5e, 0x20, 0xd2, 0xfa, 0x98, 0xac, 0x17, 0xda, 0x4d, 0xec, 0x8f, 0x7a, 0x35, 0x8d, 0x8e,
	0x27, 0x96, 0x58, 0x31, 0x0d, 0x89, 0xfd, 0x6f, 0x1c, 0x98, 0x69, 0x3c, 0xcc, 0xca, 0xdf, 0xe7,
	0x7c, 0x26, 0xd7, 0x82, 0x9e, 0xf5, 0x2c, 0xac, 0xd0, 0x81, 0xe0, 0x43, 0x20, 0x5b, 0xfd, 0x4d,
	0xb7, 0xab, 0xea, 0x89, 0x58, 0x1c, 0xe7, 0x92, 0x4a, 0x59, 0xdb, 0x11, 0x15, 0x9d, 0x07, 0x85,
	0x07, 0x12, 0x5b, 0x51, 0xe5, 0x0b, 0xca, 0x2a, 0x2d, 0x01, 0xd3, 0xc8, 0x71, 0x52, 0xde, 0x94,
	0x97, 0x88, 0x1f, 0x80, 0x2d, 0xb8, 0xdb, 0x66, 0x24, 0x14, 0x14, 0x7e, 0xab, 0xba, 0x03, 0xc1,
	0x36, 0xbe, 0x06, 0xf8, 0xc6, 0xf6, 0x1d, 0x1b, 0xff, 0x60, 0x48, 0x3e, 0x3e, 0x1c, 0x3b, 0xb9,
	0x35, 0x7a, 0x74, 0x8f, 0xbc, 0xf3, 0x24, 0xc9, 0x68, 0x5e, 0xfa, 0x50, 0xee, 0x3b, 0x0f, 0x97,
	0x37, 0x44, 0x0f, 0xee, 0x88, 0x9e, 0xfc, 0x46, 0xd1, 0xf8, 0xd6, 0x7e, 0xbd, 0x4e, 0x27, 0xda,
	0xfb, 0x9e, 0xdc, 0xf7, 0x0d, 0x29, 0x5b, 0x5a, 0x54, 0xb2, 0xa8, 0x44, 0xe4, 0x38, 0xe9, 0x56,
	0x7f, 0xfc, 0xe0, 0x5c, 0xf1, 0x4b, 0xa1, 0x8e, 0x76, 0x9f, 0xe5, 0x97, 0x35, 0x39, 0xc1, 0xce,
	0x8e, 0x70, 0x47, 0xe9, 0xff, 0x0f, 0x00, 0x00, 0xff, 0xff, 0x13, 0xfc, 0x3c, 0xd2, 0x80, 0x38,
	0x01, 0x00,
}
