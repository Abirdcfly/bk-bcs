// Code generated by protoc-gen-go.
// source: templateserver.proto
// DO NOT EDIT!

/*
Package templateserver is a generated protocol buffer package.

It is generated from these files:
	templateserver.proto

It has these top-level messages:
	CreateTemplateBindReq
	CreateTemplateBindResp
	QueryTemplateBindReq
	QueryTemplateBindResp
	QueryTemplateBindListReq
	QueryTemplateBindListResp
	DeleteTemplateBindReq
	DeleteTemplateBindResp
	CreateConfigTemplateReq
	CreateConfigTemplateResp
	QueryConfigTemplateReq
	QueryConfigTemplateResp
	QueryConfigTemplateListReq
	QueryConfigTemplateListResp
	UpdateConfigTemplateReq
	UpdateConfigTemplateResp
	DeleteConfigTemplateReq
	DeleteConfigTemplateResp
	RenderConfigTemplateReq
	RenderConfigTemplateResp
	CreateConfigTemplateVersionReq
	CreateConfigTemplateVersionResp
	QueryConfigTemplateVersionReq
	QueryConfigTemplateVersionResp
	QueryConfigTemplateVersionListReq
	QueryConfigTemplateVersionListResp
	UpdateConfigTemplateVersionReq
	UpdateConfigTemplateVersionResp
	DeleteConfigTemplateVersionReq
	DeleteConfigTemplateVersionResp
	CreateVariableGroupReq
	CreateVariableGroupResp
	QueryVariableGroupReq
	QueryVariableGroupResp
	QueryVariableGroupListReq
	QueryVariableGroupListResp
	DeleteVariableGroupReq
	DeleteVariableGroupResp
	CreateVariableReq
	CreateVariableResp
	UpdateVariableReq
	UpdateVariableResp
	QueryVariableReq
	QueryVariableResp
	QueryVariableListReq
	QueryVariableListResp
	DeleteVariableReq
	DeleteVariableResp
	HealthzReq
	HealthzResp
*/
package templateserver

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "bk-bscp/internal/protocol/common"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CreateTemplateBindReq struct {
	BizId      string `protobuf:"bytes,1,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	TemplateId string `protobuf:"bytes,2,opt,name=template_id,json=templateId" json:"template_id,omitempty"`
	AppId      string `protobuf:"bytes,3,opt,name=app_id,json=appId" json:"app_id,omitempty"`
}

func (m *CreateTemplateBindReq) Reset()                    { *m = CreateTemplateBindReq{} }
func (m *CreateTemplateBindReq) String() string            { return proto.CompactTextString(m) }
func (*CreateTemplateBindReq) ProtoMessage()               {}
func (*CreateTemplateBindReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CreateTemplateBindReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *CreateTemplateBindReq) GetTemplateId() string {
	if m != nil {
		return m.TemplateId
	}
	return ""
}

func (m *CreateTemplateBindReq) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

type CreateTemplateBindResp struct {
	Result  bool                             `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Code    common.ErrCode                   `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string                           `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    *CreateTemplateBindResp_RespData `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *CreateTemplateBindResp) Reset()                    { *m = CreateTemplateBindResp{} }
func (m *CreateTemplateBindResp) String() string            { return proto.CompactTextString(m) }
func (*CreateTemplateBindResp) ProtoMessage()               {}
func (*CreateTemplateBindResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CreateTemplateBindResp) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *CreateTemplateBindResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *CreateTemplateBindResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *CreateTemplateBindResp) GetData() *CreateTemplateBindResp_RespData {
	if m != nil {
		return m.Data
	}
	return nil
}

type CreateTemplateBindResp_RespData struct {
	CfgId string `protobuf:"bytes,1,opt,name=cfg_id,json=cfgId" json:"cfg_id,omitempty"`
}

func (m *CreateTemplateBindResp_RespData) Reset()         { *m = CreateTemplateBindResp_RespData{} }
func (m *CreateTemplateBindResp_RespData) String() string { return proto.CompactTextString(m) }
func (*CreateTemplateBindResp_RespData) ProtoMessage()    {}
func (*CreateTemplateBindResp_RespData) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{1, 0}
}

func (m *CreateTemplateBindResp_RespData) GetCfgId() string {
	if m != nil {
		return m.CfgId
	}
	return ""
}

type QueryTemplateBindReq struct {
	BizId      string `protobuf:"bytes,1,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	TemplateId string `protobuf:"bytes,2,opt,name=template_id,json=templateId" json:"template_id,omitempty"`
	AppId      string `protobuf:"bytes,3,opt,name=app_id,json=appId" json:"app_id,omitempty"`
}

func (m *QueryTemplateBindReq) Reset()                    { *m = QueryTemplateBindReq{} }
func (m *QueryTemplateBindReq) String() string            { return proto.CompactTextString(m) }
func (*QueryTemplateBindReq) ProtoMessage()               {}
func (*QueryTemplateBindReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *QueryTemplateBindReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *QueryTemplateBindReq) GetTemplateId() string {
	if m != nil {
		return m.TemplateId
	}
	return ""
}

func (m *QueryTemplateBindReq) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

type QueryTemplateBindResp struct {
	Result  bool                 `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Code    common.ErrCode       `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string               `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    *common.TemplateBind `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *QueryTemplateBindResp) Reset()                    { *m = QueryTemplateBindResp{} }
func (m *QueryTemplateBindResp) String() string            { return proto.CompactTextString(m) }
func (*QueryTemplateBindResp) ProtoMessage()               {}
func (*QueryTemplateBindResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *QueryTemplateBindResp) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *QueryTemplateBindResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *QueryTemplateBindResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *QueryTemplateBindResp) GetData() *common.TemplateBind {
	if m != nil {
		return m.Data
	}
	return nil
}

type QueryTemplateBindListReq struct {
	BizId      string       `protobuf:"bytes,1,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	TemplateId string       `protobuf:"bytes,2,opt,name=template_id,json=templateId" json:"template_id,omitempty"`
	AppId      string       `protobuf:"bytes,3,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	Page       *common.Page `protobuf:"bytes,4,opt,name=page" json:"page,omitempty"`
}

func (m *QueryTemplateBindListReq) Reset()                    { *m = QueryTemplateBindListReq{} }
func (m *QueryTemplateBindListReq) String() string            { return proto.CompactTextString(m) }
func (*QueryTemplateBindListReq) ProtoMessage()               {}
func (*QueryTemplateBindListReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *QueryTemplateBindListReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *QueryTemplateBindListReq) GetTemplateId() string {
	if m != nil {
		return m.TemplateId
	}
	return ""
}

func (m *QueryTemplateBindListReq) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *QueryTemplateBindListReq) GetPage() *common.Page {
	if m != nil {
		return m.Page
	}
	return nil
}

type QueryTemplateBindListResp struct {
	Result  bool                                `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Code    common.ErrCode                      `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string                              `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    *QueryTemplateBindListResp_RespData `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *QueryTemplateBindListResp) Reset()                    { *m = QueryTemplateBindListResp{} }
func (m *QueryTemplateBindListResp) String() string            { return proto.CompactTextString(m) }
func (*QueryTemplateBindListResp) ProtoMessage()               {}
func (*QueryTemplateBindListResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *QueryTemplateBindListResp) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *QueryTemplateBindListResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *QueryTemplateBindListResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *QueryTemplateBindListResp) GetData() *QueryTemplateBindListResp_RespData {
	if m != nil {
		return m.Data
	}
	return nil
}

type QueryTemplateBindListResp_RespData struct {
	TotalCount uint32                 `protobuf:"varint,1,opt,name=total_count,json=totalCount" json:"total_count,omitempty"`
	Info       []*common.TemplateBind `protobuf:"bytes,2,rep,name=info" json:"info,omitempty"`
}

func (m *QueryTemplateBindListResp_RespData) Reset()         { *m = QueryTemplateBindListResp_RespData{} }
func (m *QueryTemplateBindListResp_RespData) String() string { return proto.CompactTextString(m) }
func (*QueryTemplateBindListResp_RespData) ProtoMessage()    {}
func (*QueryTemplateBindListResp_RespData) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{5, 0}
}

func (m *QueryTemplateBindListResp_RespData) GetTotalCount() uint32 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *QueryTemplateBindListResp_RespData) GetInfo() []*common.TemplateBind {
	if m != nil {
		return m.Info
	}
	return nil
}

type DeleteTemplateBindReq struct {
	BizId      string `protobuf:"bytes,1,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	TemplateId string `protobuf:"bytes,2,opt,name=template_id,json=templateId" json:"template_id,omitempty"`
	AppId      string `protobuf:"bytes,3,opt,name=app_id,json=appId" json:"app_id,omitempty"`
}

func (m *DeleteTemplateBindReq) Reset()                    { *m = DeleteTemplateBindReq{} }
func (m *DeleteTemplateBindReq) String() string            { return proto.CompactTextString(m) }
func (*DeleteTemplateBindReq) ProtoMessage()               {}
func (*DeleteTemplateBindReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *DeleteTemplateBindReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *DeleteTemplateBindReq) GetTemplateId() string {
	if m != nil {
		return m.TemplateId
	}
	return ""
}

func (m *DeleteTemplateBindReq) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

type DeleteTemplateBindResp struct {
	Result  bool           `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Code    common.ErrCode `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string         `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *DeleteTemplateBindResp) Reset()                    { *m = DeleteTemplateBindResp{} }
func (m *DeleteTemplateBindResp) String() string            { return proto.CompactTextString(m) }
func (*DeleteTemplateBindResp) ProtoMessage()               {}
func (*DeleteTemplateBindResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *DeleteTemplateBindResp) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *DeleteTemplateBindResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *DeleteTemplateBindResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type CreateConfigTemplateReq struct {
	BizId         string `protobuf:"bytes,1,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	Name          string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	CfgName       string `protobuf:"bytes,3,opt,name=cfg_name,json=cfgName" json:"cfg_name,omitempty"`
	CfgFpath      string `protobuf:"bytes,4,opt,name=cfg_fpath,json=cfgFpath" json:"cfg_fpath,omitempty"`
	User          string `protobuf:"bytes,5,opt,name=user" json:"user,omitempty"`
	UserGroup     string `protobuf:"bytes,6,opt,name=user_group,json=userGroup" json:"user_group,omitempty"`
	FilePrivilege string `protobuf:"bytes,7,opt,name=file_privilege,json=filePrivilege" json:"file_privilege,omitempty"`
	FileFormat    string `protobuf:"bytes,8,opt,name=file_format,json=fileFormat" json:"file_format,omitempty"`
	FileMode      int32  `protobuf:"varint,9,opt,name=file_mode,json=fileMode" json:"file_mode,omitempty"`
	EngineType    int32  `protobuf:"varint,10,opt,name=engine_type,json=engineType" json:"engine_type,omitempty"`
	Memo          string `protobuf:"bytes,11,opt,name=memo" json:"memo,omitempty"`
}

func (m *CreateConfigTemplateReq) Reset()                    { *m = CreateConfigTemplateReq{} }
func (m *CreateConfigTemplateReq) String() string            { return proto.CompactTextString(m) }
func (*CreateConfigTemplateReq) ProtoMessage()               {}
func (*CreateConfigTemplateReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *CreateConfigTemplateReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *CreateConfigTemplateReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateConfigTemplateReq) GetCfgName() string {
	if m != nil {
		return m.CfgName
	}
	return ""
}

func (m *CreateConfigTemplateReq) GetCfgFpath() string {
	if m != nil {
		return m.CfgFpath
	}
	return ""
}

func (m *CreateConfigTemplateReq) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *CreateConfigTemplateReq) GetUserGroup() string {
	if m != nil {
		return m.UserGroup
	}
	return ""
}

func (m *CreateConfigTemplateReq) GetFilePrivilege() string {
	if m != nil {
		return m.FilePrivilege
	}
	return ""
}

func (m *CreateConfigTemplateReq) GetFileFormat() string {
	if m != nil {
		return m.FileFormat
	}
	return ""
}

func (m *CreateConfigTemplateReq) GetFileMode() int32 {
	if m != nil {
		return m.FileMode
	}
	return 0
}

func (m *CreateConfigTemplateReq) GetEngineType() int32 {
	if m != nil {
		return m.EngineType
	}
	return 0
}

func (m *CreateConfigTemplateReq) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

type CreateConfigTemplateResp struct {
	Result  bool                               `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Code    common.ErrCode                     `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string                             `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    *CreateConfigTemplateResp_RespData `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *CreateConfigTemplateResp) Reset()                    { *m = CreateConfigTemplateResp{} }
func (m *CreateConfigTemplateResp) String() string            { return proto.CompactTextString(m) }
func (*CreateConfigTemplateResp) ProtoMessage()               {}
func (*CreateConfigTemplateResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *CreateConfigTemplateResp) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *CreateConfigTemplateResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *CreateConfigTemplateResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *CreateConfigTemplateResp) GetData() *CreateConfigTemplateResp_RespData {
	if m != nil {
		return m.Data
	}
	return nil
}

type CreateConfigTemplateResp_RespData struct {
	TemplateId string `protobuf:"bytes,1,opt,name=template_id,json=templateId" json:"template_id,omitempty"`
}

func (m *CreateConfigTemplateResp_RespData) Reset()         { *m = CreateConfigTemplateResp_RespData{} }
func (m *CreateConfigTemplateResp_RespData) String() string { return proto.CompactTextString(m) }
func (*CreateConfigTemplateResp_RespData) ProtoMessage()    {}
func (*CreateConfigTemplateResp_RespData) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{9, 0}
}

func (m *CreateConfigTemplateResp_RespData) GetTemplateId() string {
	if m != nil {
		return m.TemplateId
	}
	return ""
}

type QueryConfigTemplateReq struct {
	BizId      string `protobuf:"bytes,1,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	TemplateId string `protobuf:"bytes,2,opt,name=template_id,json=templateId" json:"template_id,omitempty"`
}

func (m *QueryConfigTemplateReq) Reset()                    { *m = QueryConfigTemplateReq{} }
func (m *QueryConfigTemplateReq) String() string            { return proto.CompactTextString(m) }
func (*QueryConfigTemplateReq) ProtoMessage()               {}
func (*QueryConfigTemplateReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *QueryConfigTemplateReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *QueryConfigTemplateReq) GetTemplateId() string {
	if m != nil {
		return m.TemplateId
	}
	return ""
}

type QueryConfigTemplateResp struct {
	Result  bool                   `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Code    common.ErrCode         `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string                 `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    *common.ConfigTemplate `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *QueryConfigTemplateResp) Reset()                    { *m = QueryConfigTemplateResp{} }
func (m *QueryConfigTemplateResp) String() string            { return proto.CompactTextString(m) }
func (*QueryConfigTemplateResp) ProtoMessage()               {}
func (*QueryConfigTemplateResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *QueryConfigTemplateResp) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *QueryConfigTemplateResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *QueryConfigTemplateResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *QueryConfigTemplateResp) GetData() *common.ConfigTemplate {
	if m != nil {
		return m.Data
	}
	return nil
}

type QueryConfigTemplateListReq struct {
	BizId string       `protobuf:"bytes,1,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	Page  *common.Page `protobuf:"bytes,2,opt,name=page" json:"page,omitempty"`
}

func (m *QueryConfigTemplateListReq) Reset()                    { *m = QueryConfigTemplateListReq{} }
func (m *QueryConfigTemplateListReq) String() string            { return proto.CompactTextString(m) }
func (*QueryConfigTemplateListReq) ProtoMessage()               {}
func (*QueryConfigTemplateListReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *QueryConfigTemplateListReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *QueryConfigTemplateListReq) GetPage() *common.Page {
	if m != nil {
		return m.Page
	}
	return nil
}

type QueryConfigTemplateListResp struct {
	Result  bool                                  `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Code    common.ErrCode                        `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string                                `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    *QueryConfigTemplateListResp_RespData `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *QueryConfigTemplateListResp) Reset()                    { *m = QueryConfigTemplateListResp{} }
func (m *QueryConfigTemplateListResp) String() string            { return proto.CompactTextString(m) }
func (*QueryConfigTemplateListResp) ProtoMessage()               {}
func (*QueryConfigTemplateListResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *QueryConfigTemplateListResp) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *QueryConfigTemplateListResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *QueryConfigTemplateListResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *QueryConfigTemplateListResp) GetData() *QueryConfigTemplateListResp_RespData {
	if m != nil {
		return m.Data
	}
	return nil
}

type QueryConfigTemplateListResp_RespData struct {
	TotalCount uint32                   `protobuf:"varint,1,opt,name=total_count,json=totalCount" json:"total_count,omitempty"`
	Info       []*common.ConfigTemplate `protobuf:"bytes,2,rep,name=info" json:"info,omitempty"`
}

func (m *QueryConfigTemplateListResp_RespData) Reset()         { *m = QueryConfigTemplateListResp_RespData{} }
func (m *QueryConfigTemplateListResp_RespData) String() string { return proto.CompactTextString(m) }
func (*QueryConfigTemplateListResp_RespData) ProtoMessage()    {}
func (*QueryConfigTemplateListResp_RespData) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{13, 0}
}

func (m *QueryConfigTemplateListResp_RespData) GetTotalCount() uint32 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *QueryConfigTemplateListResp_RespData) GetInfo() []*common.ConfigTemplate {
	if m != nil {
		return m.Info
	}
	return nil
}

type UpdateConfigTemplateReq struct {
	BizId         string `protobuf:"bytes,1,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	TemplateId    string `protobuf:"bytes,2,opt,name=template_id,json=templateId" json:"template_id,omitempty"`
	Name          string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	CfgName       string `protobuf:"bytes,4,opt,name=cfg_name,json=cfgName" json:"cfg_name,omitempty"`
	CfgFpath      string `protobuf:"bytes,5,opt,name=cfg_fpath,json=cfgFpath" json:"cfg_fpath,omitempty"`
	User          string `protobuf:"bytes,6,opt,name=user" json:"user,omitempty"`
	UserGroup     string `protobuf:"bytes,7,opt,name=user_group,json=userGroup" json:"user_group,omitempty"`
	FilePrivilege string `protobuf:"bytes,8,opt,name=file_privilege,json=filePrivilege" json:"file_privilege,omitempty"`
	FileFormat    string `protobuf:"bytes,9,opt,name=file_format,json=fileFormat" json:"file_format,omitempty"`
	FileMode      int32  `protobuf:"varint,10,opt,name=file_mode,json=fileMode" json:"file_mode,omitempty"`
	EngineType    int32  `protobuf:"varint,11,opt,name=engine_type,json=engineType" json:"engine_type,omitempty"`
	Memo          string `protobuf:"bytes,12,opt,name=memo" json:"memo,omitempty"`
}

func (m *UpdateConfigTemplateReq) Reset()                    { *m = UpdateConfigTemplateReq{} }
func (m *UpdateConfigTemplateReq) String() string            { return proto.CompactTextString(m) }
func (*UpdateConfigTemplateReq) ProtoMessage()               {}
func (*UpdateConfigTemplateReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *UpdateConfigTemplateReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *UpdateConfigTemplateReq) GetTemplateId() string {
	if m != nil {
		return m.TemplateId
	}
	return ""
}

func (m *UpdateConfigTemplateReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateConfigTemplateReq) GetCfgName() string {
	if m != nil {
		return m.CfgName
	}
	return ""
}

func (m *UpdateConfigTemplateReq) GetCfgFpath() string {
	if m != nil {
		return m.CfgFpath
	}
	return ""
}

func (m *UpdateConfigTemplateReq) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *UpdateConfigTemplateReq) GetUserGroup() string {
	if m != nil {
		return m.UserGroup
	}
	return ""
}

func (m *UpdateConfigTemplateReq) GetFilePrivilege() string {
	if m != nil {
		return m.FilePrivilege
	}
	return ""
}

func (m *UpdateConfigTemplateReq) GetFileFormat() string {
	if m != nil {
		return m.FileFormat
	}
	return ""
}

func (m *UpdateConfigTemplateReq) GetFileMode() int32 {
	if m != nil {
		return m.FileMode
	}
	return 0
}

func (m *UpdateConfigTemplateReq) GetEngineType() int32 {
	if m != nil {
		return m.EngineType
	}
	return 0
}

func (m *UpdateConfigTemplateReq) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

type UpdateConfigTemplateResp struct {
	Result  bool           `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Code    common.ErrCode `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string         `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *UpdateConfigTemplateResp) Reset()                    { *m = UpdateConfigTemplateResp{} }
func (m *UpdateConfigTemplateResp) String() string            { return proto.CompactTextString(m) }
func (*UpdateConfigTemplateResp) ProtoMessage()               {}
func (*UpdateConfigTemplateResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *UpdateConfigTemplateResp) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *UpdateConfigTemplateResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *UpdateConfigTemplateResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type DeleteConfigTemplateReq struct {
	BizId      string `protobuf:"bytes,1,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	TemplateId string `protobuf:"bytes,2,opt,name=template_id,json=templateId" json:"template_id,omitempty"`
}

func (m *DeleteConfigTemplateReq) Reset()                    { *m = DeleteConfigTemplateReq{} }
func (m *DeleteConfigTemplateReq) String() string            { return proto.CompactTextString(m) }
func (*DeleteConfigTemplateReq) ProtoMessage()               {}
func (*DeleteConfigTemplateReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *DeleteConfigTemplateReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *DeleteConfigTemplateReq) GetTemplateId() string {
	if m != nil {
		return m.TemplateId
	}
	return ""
}

type DeleteConfigTemplateResp struct {
	Result  bool           `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Code    common.ErrCode `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string         `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *DeleteConfigTemplateResp) Reset()                    { *m = DeleteConfigTemplateResp{} }
func (m *DeleteConfigTemplateResp) String() string            { return proto.CompactTextString(m) }
func (*DeleteConfigTemplateResp) ProtoMessage()               {}
func (*DeleteConfigTemplateResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *DeleteConfigTemplateResp) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *DeleteConfigTemplateResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *DeleteConfigTemplateResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type RenderConfigTemplateReq struct {
	BizId      string `protobuf:"bytes,1,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	TemplateId string `protobuf:"bytes,2,opt,name=template_id,json=templateId" json:"template_id,omitempty"`
	VersionId  string `protobuf:"bytes,3,opt,name=version_id,json=versionId" json:"version_id,omitempty"`
	Variables  string `protobuf:"bytes,4,opt,name=variables" json:"variables,omitempty"`
	VarGroupId string `protobuf:"bytes,5,opt,name=var_group_id,json=varGroupId" json:"var_group_id,omitempty"`
}

func (m *RenderConfigTemplateReq) Reset()                    { *m = RenderConfigTemplateReq{} }
func (m *RenderConfigTemplateReq) String() string            { return proto.CompactTextString(m) }
func (*RenderConfigTemplateReq) ProtoMessage()               {}
func (*RenderConfigTemplateReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *RenderConfigTemplateReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *RenderConfigTemplateReq) GetTemplateId() string {
	if m != nil {
		return m.TemplateId
	}
	return ""
}

func (m *RenderConfigTemplateReq) GetVersionId() string {
	if m != nil {
		return m.VersionId
	}
	return ""
}

func (m *RenderConfigTemplateReq) GetVariables() string {
	if m != nil {
		return m.Variables
	}
	return ""
}

func (m *RenderConfigTemplateReq) GetVarGroupId() string {
	if m != nil {
		return m.VarGroupId
	}
	return ""
}

type RenderConfigTemplateResp struct {
	Result  bool                               `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Code    common.ErrCode                     `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string                             `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    *RenderConfigTemplateResp_RespData `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *RenderConfigTemplateResp) Reset()                    { *m = RenderConfigTemplateResp{} }
func (m *RenderConfigTemplateResp) String() string            { return proto.CompactTextString(m) }
func (*RenderConfigTemplateResp) ProtoMessage()               {}
func (*RenderConfigTemplateResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *RenderConfigTemplateResp) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *RenderConfigTemplateResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *RenderConfigTemplateResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *RenderConfigTemplateResp) GetData() *RenderConfigTemplateResp_RespData {
	if m != nil {
		return m.Data
	}
	return nil
}

type RenderConfigTemplateResp_RespData struct {
	ContentId string `protobuf:"bytes,1,opt,name=content_id,json=contentId" json:"content_id,omitempty"`
}

func (m *RenderConfigTemplateResp_RespData) Reset()         { *m = RenderConfigTemplateResp_RespData{} }
func (m *RenderConfigTemplateResp_RespData) String() string { return proto.CompactTextString(m) }
func (*RenderConfigTemplateResp_RespData) ProtoMessage()    {}
func (*RenderConfigTemplateResp_RespData) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{19, 0}
}

func (m *RenderConfigTemplateResp_RespData) GetContentId() string {
	if m != nil {
		return m.ContentId
	}
	return ""
}

type CreateConfigTemplateVersionReq struct {
	BizId       string `protobuf:"bytes,1,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	TemplateId  string `protobuf:"bytes,2,opt,name=template_id,json=templateId" json:"template_id,omitempty"`
	VersionTag  string `protobuf:"bytes,3,opt,name=version_tag,json=versionTag" json:"version_tag,omitempty"`
	ContentId   string `protobuf:"bytes,4,opt,name=content_id,json=contentId" json:"content_id,omitempty"`
	ContentSize uint32 `protobuf:"varint,5,opt,name=content_size,json=contentSize" json:"content_size,omitempty"`
	Memo        string `protobuf:"bytes,6,opt,name=memo" json:"memo,omitempty"`
}

func (m *CreateConfigTemplateVersionReq) Reset()         { *m = CreateConfigTemplateVersionReq{} }
func (m *CreateConfigTemplateVersionReq) String() string { return proto.CompactTextString(m) }
func (*CreateConfigTemplateVersionReq) ProtoMessage()    {}
func (*CreateConfigTemplateVersionReq) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{20}
}

func (m *CreateConfigTemplateVersionReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *CreateConfigTemplateVersionReq) GetTemplateId() string {
	if m != nil {
		return m.TemplateId
	}
	return ""
}

func (m *CreateConfigTemplateVersionReq) GetVersionTag() string {
	if m != nil {
		return m.VersionTag
	}
	return ""
}

func (m *CreateConfigTemplateVersionReq) GetContentId() string {
	if m != nil {
		return m.ContentId
	}
	return ""
}

func (m *CreateConfigTemplateVersionReq) GetContentSize() uint32 {
	if m != nil {
		return m.ContentSize
	}
	return 0
}

func (m *CreateConfigTemplateVersionReq) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

type CreateConfigTemplateVersionResp struct {
	Result  bool                                      `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Code    common.ErrCode                            `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string                                    `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    *CreateConfigTemplateVersionResp_RespData `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *CreateConfigTemplateVersionResp) Reset()         { *m = CreateConfigTemplateVersionResp{} }
func (m *CreateConfigTemplateVersionResp) String() string { return proto.CompactTextString(m) }
func (*CreateConfigTemplateVersionResp) ProtoMessage()    {}
func (*CreateConfigTemplateVersionResp) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{21}
}

func (m *CreateConfigTemplateVersionResp) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *CreateConfigTemplateVersionResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *CreateConfigTemplateVersionResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *CreateConfigTemplateVersionResp) GetData() *CreateConfigTemplateVersionResp_RespData {
	if m != nil {
		return m.Data
	}
	return nil
}

type CreateConfigTemplateVersionResp_RespData struct {
	VersionId string `protobuf:"bytes,1,opt,name=version_id,json=versionId" json:"version_id,omitempty"`
}

func (m *CreateConfigTemplateVersionResp_RespData) Reset() {
	*m = CreateConfigTemplateVersionResp_RespData{}
}
func (m *CreateConfigTemplateVersionResp_RespData) String() string { return proto.CompactTextString(m) }
func (*CreateConfigTemplateVersionResp_RespData) ProtoMessage()    {}
func (*CreateConfigTemplateVersionResp_RespData) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{21, 0}
}

func (m *CreateConfigTemplateVersionResp_RespData) GetVersionId() string {
	if m != nil {
		return m.VersionId
	}
	return ""
}

type QueryConfigTemplateVersionReq struct {
	BizId      string `protobuf:"bytes,1,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	TemplateId string `protobuf:"bytes,2,opt,name=template_id,json=templateId" json:"template_id,omitempty"`
	VersionId  string `protobuf:"bytes,3,opt,name=version_id,json=versionId" json:"version_id,omitempty"`
}

func (m *QueryConfigTemplateVersionReq) Reset()                    { *m = QueryConfigTemplateVersionReq{} }
func (m *QueryConfigTemplateVersionReq) String() string            { return proto.CompactTextString(m) }
func (*QueryConfigTemplateVersionReq) ProtoMessage()               {}
func (*QueryConfigTemplateVersionReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *QueryConfigTemplateVersionReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *QueryConfigTemplateVersionReq) GetTemplateId() string {
	if m != nil {
		return m.TemplateId
	}
	return ""
}

func (m *QueryConfigTemplateVersionReq) GetVersionId() string {
	if m != nil {
		return m.VersionId
	}
	return ""
}

type QueryConfigTemplateVersionResp struct {
	Result  bool                          `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Code    common.ErrCode                `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string                        `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    *common.ConfigTemplateVersion `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *QueryConfigTemplateVersionResp) Reset()         { *m = QueryConfigTemplateVersionResp{} }
func (m *QueryConfigTemplateVersionResp) String() string { return proto.CompactTextString(m) }
func (*QueryConfigTemplateVersionResp) ProtoMessage()    {}
func (*QueryConfigTemplateVersionResp) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{23}
}

func (m *QueryConfigTemplateVersionResp) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *QueryConfigTemplateVersionResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *QueryConfigTemplateVersionResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *QueryConfigTemplateVersionResp) GetData() *common.ConfigTemplateVersion {
	if m != nil {
		return m.Data
	}
	return nil
}

type QueryConfigTemplateVersionListReq struct {
	BizId      string       `protobuf:"bytes,1,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	TemplateId string       `protobuf:"bytes,2,opt,name=template_id,json=templateId" json:"template_id,omitempty"`
	Page       *common.Page `protobuf:"bytes,3,opt,name=page" json:"page,omitempty"`
}

func (m *QueryConfigTemplateVersionListReq) Reset()         { *m = QueryConfigTemplateVersionListReq{} }
func (m *QueryConfigTemplateVersionListReq) String() string { return proto.CompactTextString(m) }
func (*QueryConfigTemplateVersionListReq) ProtoMessage()    {}
func (*QueryConfigTemplateVersionListReq) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{24}
}

func (m *QueryConfigTemplateVersionListReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *QueryConfigTemplateVersionListReq) GetTemplateId() string {
	if m != nil {
		return m.TemplateId
	}
	return ""
}

func (m *QueryConfigTemplateVersionListReq) GetPage() *common.Page {
	if m != nil {
		return m.Page
	}
	return nil
}

type QueryConfigTemplateVersionListResp struct {
	Result  bool                                         `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Code    common.ErrCode                               `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string                                       `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    *QueryConfigTemplateVersionListResp_RespData `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *QueryConfigTemplateVersionListResp) Reset()         { *m = QueryConfigTemplateVersionListResp{} }
func (m *QueryConfigTemplateVersionListResp) String() string { return proto.CompactTextString(m) }
func (*QueryConfigTemplateVersionListResp) ProtoMessage()    {}
func (*QueryConfigTemplateVersionListResp) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{25}
}

func (m *QueryConfigTemplateVersionListResp) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *QueryConfigTemplateVersionListResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *QueryConfigTemplateVersionListResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *QueryConfigTemplateVersionListResp) GetData() *QueryConfigTemplateVersionListResp_RespData {
	if m != nil {
		return m.Data
	}
	return nil
}

type QueryConfigTemplateVersionListResp_RespData struct {
	TotalCount uint32                          `protobuf:"varint,1,opt,name=total_count,json=totalCount" json:"total_count,omitempty"`
	Info       []*common.ConfigTemplateVersion `protobuf:"bytes,2,rep,name=info" json:"info,omitempty"`
}

func (m *QueryConfigTemplateVersionListResp_RespData) Reset() {
	*m = QueryConfigTemplateVersionListResp_RespData{}
}
func (m *QueryConfigTemplateVersionListResp_RespData) String() string {
	return proto.CompactTextString(m)
}
func (*QueryConfigTemplateVersionListResp_RespData) ProtoMessage() {}
func (*QueryConfigTemplateVersionListResp_RespData) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{25, 0}
}

func (m *QueryConfigTemplateVersionListResp_RespData) GetTotalCount() uint32 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *QueryConfigTemplateVersionListResp_RespData) GetInfo() []*common.ConfigTemplateVersion {
	if m != nil {
		return m.Info
	}
	return nil
}

type UpdateConfigTemplateVersionReq struct {
	BizId       string `protobuf:"bytes,1,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	TemplateId  string `protobuf:"bytes,2,opt,name=template_id,json=templateId" json:"template_id,omitempty"`
	VersionId   string `protobuf:"bytes,3,opt,name=version_id,json=versionId" json:"version_id,omitempty"`
	ContentId   string `protobuf:"bytes,4,opt,name=content_id,json=contentId" json:"content_id,omitempty"`
	ContentSize uint32 `protobuf:"varint,5,opt,name=content_size,json=contentSize" json:"content_size,omitempty"`
	Memo        string `protobuf:"bytes,6,opt,name=memo" json:"memo,omitempty"`
}

func (m *UpdateConfigTemplateVersionReq) Reset()         { *m = UpdateConfigTemplateVersionReq{} }
func (m *UpdateConfigTemplateVersionReq) String() string { return proto.CompactTextString(m) }
func (*UpdateConfigTemplateVersionReq) ProtoMessage()    {}
func (*UpdateConfigTemplateVersionReq) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{26}
}

func (m *UpdateConfigTemplateVersionReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *UpdateConfigTemplateVersionReq) GetTemplateId() string {
	if m != nil {
		return m.TemplateId
	}
	return ""
}

func (m *UpdateConfigTemplateVersionReq) GetVersionId() string {
	if m != nil {
		return m.VersionId
	}
	return ""
}

func (m *UpdateConfigTemplateVersionReq) GetContentId() string {
	if m != nil {
		return m.ContentId
	}
	return ""
}

func (m *UpdateConfigTemplateVersionReq) GetContentSize() uint32 {
	if m != nil {
		return m.ContentSize
	}
	return 0
}

func (m *UpdateConfigTemplateVersionReq) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

type UpdateConfigTemplateVersionResp struct {
	Result  bool           `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Code    common.ErrCode `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string         `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *UpdateConfigTemplateVersionResp) Reset()         { *m = UpdateConfigTemplateVersionResp{} }
func (m *UpdateConfigTemplateVersionResp) String() string { return proto.CompactTextString(m) }
func (*UpdateConfigTemplateVersionResp) ProtoMessage()    {}
func (*UpdateConfigTemplateVersionResp) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{27}
}

func (m *UpdateConfigTemplateVersionResp) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *UpdateConfigTemplateVersionResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *UpdateConfigTemplateVersionResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type DeleteConfigTemplateVersionReq struct {
	BizId      string `protobuf:"bytes,1,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	TemplateId string `protobuf:"bytes,2,opt,name=template_id,json=templateId" json:"template_id,omitempty"`
	VersionId  string `protobuf:"bytes,3,opt,name=version_id,json=versionId" json:"version_id,omitempty"`
}

func (m *DeleteConfigTemplateVersionReq) Reset()         { *m = DeleteConfigTemplateVersionReq{} }
func (m *DeleteConfigTemplateVersionReq) String() string { return proto.CompactTextString(m) }
func (*DeleteConfigTemplateVersionReq) ProtoMessage()    {}
func (*DeleteConfigTemplateVersionReq) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{28}
}

func (m *DeleteConfigTemplateVersionReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *DeleteConfigTemplateVersionReq) GetTemplateId() string {
	if m != nil {
		return m.TemplateId
	}
	return ""
}

func (m *DeleteConfigTemplateVersionReq) GetVersionId() string {
	if m != nil {
		return m.VersionId
	}
	return ""
}

type DeleteConfigTemplateVersionResp struct {
	Result  bool           `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Code    common.ErrCode `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string         `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *DeleteConfigTemplateVersionResp) Reset()         { *m = DeleteConfigTemplateVersionResp{} }
func (m *DeleteConfigTemplateVersionResp) String() string { return proto.CompactTextString(m) }
func (*DeleteConfigTemplateVersionResp) ProtoMessage()    {}
func (*DeleteConfigTemplateVersionResp) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{29}
}

func (m *DeleteConfigTemplateVersionResp) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *DeleteConfigTemplateVersionResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *DeleteConfigTemplateVersionResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type CreateVariableGroupReq struct {
	BizId string `protobuf:"bytes,1,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Memo  string `protobuf:"bytes,3,opt,name=memo" json:"memo,omitempty"`
}

func (m *CreateVariableGroupReq) Reset()                    { *m = CreateVariableGroupReq{} }
func (m *CreateVariableGroupReq) String() string            { return proto.CompactTextString(m) }
func (*CreateVariableGroupReq) ProtoMessage()               {}
func (*CreateVariableGroupReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *CreateVariableGroupReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *CreateVariableGroupReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateVariableGroupReq) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

type CreateVariableGroupResp struct {
	Result  bool                              `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Code    common.ErrCode                    `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string                            `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    *CreateVariableGroupResp_RespData `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *CreateVariableGroupResp) Reset()                    { *m = CreateVariableGroupResp{} }
func (m *CreateVariableGroupResp) String() string            { return proto.CompactTextString(m) }
func (*CreateVariableGroupResp) ProtoMessage()               {}
func (*CreateVariableGroupResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *CreateVariableGroupResp) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *CreateVariableGroupResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *CreateVariableGroupResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *CreateVariableGroupResp) GetData() *CreateVariableGroupResp_RespData {
	if m != nil {
		return m.Data
	}
	return nil
}

type CreateVariableGroupResp_RespData struct {
	VarGroupId string `protobuf:"bytes,1,opt,name=var_group_id,json=varGroupId" json:"var_group_id,omitempty"`
}

func (m *CreateVariableGroupResp_RespData) Reset()         { *m = CreateVariableGroupResp_RespData{} }
func (m *CreateVariableGroupResp_RespData) String() string { return proto.CompactTextString(m) }
func (*CreateVariableGroupResp_RespData) ProtoMessage()    {}
func (*CreateVariableGroupResp_RespData) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{31, 0}
}

func (m *CreateVariableGroupResp_RespData) GetVarGroupId() string {
	if m != nil {
		return m.VarGroupId
	}
	return ""
}

type QueryVariableGroupReq struct {
	BizId      string `protobuf:"bytes,1,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	VarGroupId string `protobuf:"bytes,2,opt,name=var_group_id,json=varGroupId" json:"var_group_id,omitempty"`
	Name       string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
}

func (m *QueryVariableGroupReq) Reset()                    { *m = QueryVariableGroupReq{} }
func (m *QueryVariableGroupReq) String() string            { return proto.CompactTextString(m) }
func (*QueryVariableGroupReq) ProtoMessage()               {}
func (*QueryVariableGroupReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *QueryVariableGroupReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *QueryVariableGroupReq) GetVarGroupId() string {
	if m != nil {
		return m.VarGroupId
	}
	return ""
}

func (m *QueryVariableGroupReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type QueryVariableGroupResp struct {
	Result  bool                  `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Code    common.ErrCode        `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string                `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    *common.VariableGroup `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *QueryVariableGroupResp) Reset()                    { *m = QueryVariableGroupResp{} }
func (m *QueryVariableGroupResp) String() string            { return proto.CompactTextString(m) }
func (*QueryVariableGroupResp) ProtoMessage()               {}
func (*QueryVariableGroupResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *QueryVariableGroupResp) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *QueryVariableGroupResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *QueryVariableGroupResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *QueryVariableGroupResp) GetData() *common.VariableGroup {
	if m != nil {
		return m.Data
	}
	return nil
}

type QueryVariableGroupListReq struct {
	BizId string       `protobuf:"bytes,1,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	Page  *common.Page `protobuf:"bytes,2,opt,name=page" json:"page,omitempty"`
}

func (m *QueryVariableGroupListReq) Reset()                    { *m = QueryVariableGroupListReq{} }
func (m *QueryVariableGroupListReq) String() string            { return proto.CompactTextString(m) }
func (*QueryVariableGroupListReq) ProtoMessage()               {}
func (*QueryVariableGroupListReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

func (m *QueryVariableGroupListReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *QueryVariableGroupListReq) GetPage() *common.Page {
	if m != nil {
		return m.Page
	}
	return nil
}

type QueryVariableGroupListResp struct {
	Result  bool                                 `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Code    common.ErrCode                       `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string                               `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    *QueryVariableGroupListResp_RespData `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *QueryVariableGroupListResp) Reset()                    { *m = QueryVariableGroupListResp{} }
func (m *QueryVariableGroupListResp) String() string            { return proto.CompactTextString(m) }
func (*QueryVariableGroupListResp) ProtoMessage()               {}
func (*QueryVariableGroupListResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

func (m *QueryVariableGroupListResp) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *QueryVariableGroupListResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *QueryVariableGroupListResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *QueryVariableGroupListResp) GetData() *QueryVariableGroupListResp_RespData {
	if m != nil {
		return m.Data
	}
	return nil
}

type QueryVariableGroupListResp_RespData struct {
	TotalCount uint32                  `protobuf:"varint,1,opt,name=total_count,json=totalCount" json:"total_count,omitempty"`
	Info       []*common.VariableGroup `protobuf:"bytes,2,rep,name=info" json:"info,omitempty"`
}

func (m *QueryVariableGroupListResp_RespData) Reset()         { *m = QueryVariableGroupListResp_RespData{} }
func (m *QueryVariableGroupListResp_RespData) String() string { return proto.CompactTextString(m) }
func (*QueryVariableGroupListResp_RespData) ProtoMessage()    {}
func (*QueryVariableGroupListResp_RespData) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{35, 0}
}

func (m *QueryVariableGroupListResp_RespData) GetTotalCount() uint32 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *QueryVariableGroupListResp_RespData) GetInfo() []*common.VariableGroup {
	if m != nil {
		return m.Info
	}
	return nil
}

type DeleteVariableGroupReq struct {
	BizId      string `protobuf:"bytes,1,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	VarGroupId string `protobuf:"bytes,2,opt,name=var_group_id,json=varGroupId" json:"var_group_id,omitempty"`
}

func (m *DeleteVariableGroupReq) Reset()                    { *m = DeleteVariableGroupReq{} }
func (m *DeleteVariableGroupReq) String() string            { return proto.CompactTextString(m) }
func (*DeleteVariableGroupReq) ProtoMessage()               {}
func (*DeleteVariableGroupReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

func (m *DeleteVariableGroupReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *DeleteVariableGroupReq) GetVarGroupId() string {
	if m != nil {
		return m.VarGroupId
	}
	return ""
}

type DeleteVariableGroupResp struct {
	Result  bool           `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Code    common.ErrCode `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string         `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *DeleteVariableGroupResp) Reset()                    { *m = DeleteVariableGroupResp{} }
func (m *DeleteVariableGroupResp) String() string            { return proto.CompactTextString(m) }
func (*DeleteVariableGroupResp) ProtoMessage()               {}
func (*DeleteVariableGroupResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

func (m *DeleteVariableGroupResp) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *DeleteVariableGroupResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *DeleteVariableGroupResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type CreateVariableReq struct {
	BizId      string `protobuf:"bytes,1,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	Name       string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Value      string `protobuf:"bytes,3,opt,name=value" json:"value,omitempty"`
	VarGroupId string `protobuf:"bytes,4,opt,name=var_group_id,json=varGroupId" json:"var_group_id,omitempty"`
}

func (m *CreateVariableReq) Reset()                    { *m = CreateVariableReq{} }
func (m *CreateVariableReq) String() string            { return proto.CompactTextString(m) }
func (*CreateVariableReq) ProtoMessage()               {}
func (*CreateVariableReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

func (m *CreateVariableReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *CreateVariableReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateVariableReq) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *CreateVariableReq) GetVarGroupId() string {
	if m != nil {
		return m.VarGroupId
	}
	return ""
}

type CreateVariableResp struct {
	Result  bool                         `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Code    common.ErrCode               `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string                       `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    *CreateVariableResp_RespData `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *CreateVariableResp) Reset()                    { *m = CreateVariableResp{} }
func (m *CreateVariableResp) String() string            { return proto.CompactTextString(m) }
func (*CreateVariableResp) ProtoMessage()               {}
func (*CreateVariableResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{39} }

func (m *CreateVariableResp) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *CreateVariableResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *CreateVariableResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *CreateVariableResp) GetData() *CreateVariableResp_RespData {
	if m != nil {
		return m.Data
	}
	return nil
}

type CreateVariableResp_RespData struct {
	VarId string `protobuf:"bytes,1,opt,name=var_id,json=varId" json:"var_id,omitempty"`
}

func (m *CreateVariableResp_RespData) Reset()         { *m = CreateVariableResp_RespData{} }
func (m *CreateVariableResp_RespData) String() string { return proto.CompactTextString(m) }
func (*CreateVariableResp_RespData) ProtoMessage()    {}
func (*CreateVariableResp_RespData) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{39, 0}
}

func (m *CreateVariableResp_RespData) GetVarId() string {
	if m != nil {
		return m.VarId
	}
	return ""
}

type UpdateVariableReq struct {
	BizId string `protobuf:"bytes,1,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	VarId string `protobuf:"bytes,2,opt,name=var_id,json=varId" json:"var_id,omitempty"`
	Value string `protobuf:"bytes,3,opt,name=value" json:"value,omitempty"`
}

func (m *UpdateVariableReq) Reset()                    { *m = UpdateVariableReq{} }
func (m *UpdateVariableReq) String() string            { return proto.CompactTextString(m) }
func (*UpdateVariableReq) ProtoMessage()               {}
func (*UpdateVariableReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{40} }

func (m *UpdateVariableReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *UpdateVariableReq) GetVarId() string {
	if m != nil {
		return m.VarId
	}
	return ""
}

func (m *UpdateVariableReq) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type UpdateVariableResp struct {
	Result  bool           `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Code    common.ErrCode `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string         `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *UpdateVariableResp) Reset()                    { *m = UpdateVariableResp{} }
func (m *UpdateVariableResp) String() string            { return proto.CompactTextString(m) }
func (*UpdateVariableResp) ProtoMessage()               {}
func (*UpdateVariableResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{41} }

func (m *UpdateVariableResp) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *UpdateVariableResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *UpdateVariableResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type QueryVariableReq struct {
	BizId      string `protobuf:"bytes,1,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	VarId      string `protobuf:"bytes,2,opt,name=var_id,json=varId" json:"var_id,omitempty"`
	VarGroupId string `protobuf:"bytes,3,opt,name=var_group_id,json=varGroupId" json:"var_group_id,omitempty"`
	Name       string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
}

func (m *QueryVariableReq) Reset()                    { *m = QueryVariableReq{} }
func (m *QueryVariableReq) String() string            { return proto.CompactTextString(m) }
func (*QueryVariableReq) ProtoMessage()               {}
func (*QueryVariableReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{42} }

func (m *QueryVariableReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *QueryVariableReq) GetVarId() string {
	if m != nil {
		return m.VarId
	}
	return ""
}

func (m *QueryVariableReq) GetVarGroupId() string {
	if m != nil {
		return m.VarGroupId
	}
	return ""
}

func (m *QueryVariableReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type QueryVariableResp struct {
	Result  bool             `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Code    common.ErrCode   `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string           `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    *common.Variable `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *QueryVariableResp) Reset()                    { *m = QueryVariableResp{} }
func (m *QueryVariableResp) String() string            { return proto.CompactTextString(m) }
func (*QueryVariableResp) ProtoMessage()               {}
func (*QueryVariableResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{43} }

func (m *QueryVariableResp) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *QueryVariableResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *QueryVariableResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *QueryVariableResp) GetData() *common.Variable {
	if m != nil {
		return m.Data
	}
	return nil
}

type QueryVariableListReq struct {
	BizId      string       `protobuf:"bytes,1,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	VarGroupId string       `protobuf:"bytes,2,opt,name=var_group_id,json=varGroupId" json:"var_group_id,omitempty"`
	Page       *common.Page `protobuf:"bytes,3,opt,name=page" json:"page,omitempty"`
}

func (m *QueryVariableListReq) Reset()                    { *m = QueryVariableListReq{} }
func (m *QueryVariableListReq) String() string            { return proto.CompactTextString(m) }
func (*QueryVariableListReq) ProtoMessage()               {}
func (*QueryVariableListReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{44} }

func (m *QueryVariableListReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *QueryVariableListReq) GetVarGroupId() string {
	if m != nil {
		return m.VarGroupId
	}
	return ""
}

func (m *QueryVariableListReq) GetPage() *common.Page {
	if m != nil {
		return m.Page
	}
	return nil
}

type QueryVariableListResp struct {
	Result  bool                            `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Code    common.ErrCode                  `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string                          `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    *QueryVariableListResp_RespData `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *QueryVariableListResp) Reset()                    { *m = QueryVariableListResp{} }
func (m *QueryVariableListResp) String() string            { return proto.CompactTextString(m) }
func (*QueryVariableListResp) ProtoMessage()               {}
func (*QueryVariableListResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{45} }

func (m *QueryVariableListResp) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *QueryVariableListResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *QueryVariableListResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *QueryVariableListResp) GetData() *QueryVariableListResp_RespData {
	if m != nil {
		return m.Data
	}
	return nil
}

type QueryVariableListResp_RespData struct {
	TotalCount uint32             `protobuf:"varint,1,opt,name=total_count,json=totalCount" json:"total_count,omitempty"`
	Info       []*common.Variable `protobuf:"bytes,2,rep,name=info" json:"info,omitempty"`
}

func (m *QueryVariableListResp_RespData) Reset()         { *m = QueryVariableListResp_RespData{} }
func (m *QueryVariableListResp_RespData) String() string { return proto.CompactTextString(m) }
func (*QueryVariableListResp_RespData) ProtoMessage()    {}
func (*QueryVariableListResp_RespData) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{45, 0}
}

func (m *QueryVariableListResp_RespData) GetTotalCount() uint32 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *QueryVariableListResp_RespData) GetInfo() []*common.Variable {
	if m != nil {
		return m.Info
	}
	return nil
}

type DeleteVariableReq struct {
	BizId string `protobuf:"bytes,1,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	VarId string `protobuf:"bytes,2,opt,name=var_id,json=varId" json:"var_id,omitempty"`
}

func (m *DeleteVariableReq) Reset()                    { *m = DeleteVariableReq{} }
func (m *DeleteVariableReq) String() string            { return proto.CompactTextString(m) }
func (*DeleteVariableReq) ProtoMessage()               {}
func (*DeleteVariableReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{46} }

func (m *DeleteVariableReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *DeleteVariableReq) GetVarId() string {
	if m != nil {
		return m.VarId
	}
	return ""
}

type DeleteVariableResp struct {
	Result  bool           `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Code    common.ErrCode `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string         `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *DeleteVariableResp) Reset()                    { *m = DeleteVariableResp{} }
func (m *DeleteVariableResp) String() string            { return proto.CompactTextString(m) }
func (*DeleteVariableResp) ProtoMessage()               {}
func (*DeleteVariableResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{47} }

func (m *DeleteVariableResp) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *DeleteVariableResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *DeleteVariableResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type HealthzReq struct {
	Seq string `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
}

func (m *HealthzReq) Reset()                    { *m = HealthzReq{} }
func (m *HealthzReq) String() string            { return proto.CompactTextString(m) }
func (*HealthzReq) ProtoMessage()               {}
func (*HealthzReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{48} }

func (m *HealthzReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

type HealthzResp struct {
	Seq     string                    `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode            `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string                    `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    *common.ModuleHealthzInfo `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *HealthzResp) Reset()                    { *m = HealthzResp{} }
func (m *HealthzResp) String() string            { return proto.CompactTextString(m) }
func (*HealthzResp) ProtoMessage()               {}
func (*HealthzResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{49} }

func (m *HealthzResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *HealthzResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *HealthzResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *HealthzResp) GetData() *common.ModuleHealthzInfo {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*CreateTemplateBindReq)(nil), "templateserver.CreateTemplateBindReq")
	proto.RegisterType((*CreateTemplateBindResp)(nil), "templateserver.CreateTemplateBindResp")
	proto.RegisterType((*CreateTemplateBindResp_RespData)(nil), "templateserver.CreateTemplateBindResp.RespData")
	proto.RegisterType((*QueryTemplateBindReq)(nil), "templateserver.QueryTemplateBindReq")
	proto.RegisterType((*QueryTemplateBindResp)(nil), "templateserver.QueryTemplateBindResp")
	proto.RegisterType((*QueryTemplateBindListReq)(nil), "templateserver.QueryTemplateBindListReq")
	proto.RegisterType((*QueryTemplateBindListResp)(nil), "templateserver.QueryTemplateBindListResp")
	proto.RegisterType((*QueryTemplateBindListResp_RespData)(nil), "templateserver.QueryTemplateBindListResp.RespData")
	proto.RegisterType((*DeleteTemplateBindReq)(nil), "templateserver.DeleteTemplateBindReq")
	proto.RegisterType((*DeleteTemplateBindResp)(nil), "templateserver.DeleteTemplateBindResp")
	proto.RegisterType((*CreateConfigTemplateReq)(nil), "templateserver.CreateConfigTemplateReq")
	proto.RegisterType((*CreateConfigTemplateResp)(nil), "templateserver.CreateConfigTemplateResp")
	proto.RegisterType((*CreateConfigTemplateResp_RespData)(nil), "templateserver.CreateConfigTemplateResp.RespData")
	proto.RegisterType((*QueryConfigTemplateReq)(nil), "templateserver.QueryConfigTemplateReq")
	proto.RegisterType((*QueryConfigTemplateResp)(nil), "templateserver.QueryConfigTemplateResp")
	proto.RegisterType((*QueryConfigTemplateListReq)(nil), "templateserver.QueryConfigTemplateListReq")
	proto.RegisterType((*QueryConfigTemplateListResp)(nil), "templateserver.QueryConfigTemplateListResp")
	proto.RegisterType((*QueryConfigTemplateListResp_RespData)(nil), "templateserver.QueryConfigTemplateListResp.RespData")
	proto.RegisterType((*UpdateConfigTemplateReq)(nil), "templateserver.UpdateConfigTemplateReq")
	proto.RegisterType((*UpdateConfigTemplateResp)(nil), "templateserver.UpdateConfigTemplateResp")
	proto.RegisterType((*DeleteConfigTemplateReq)(nil), "templateserver.DeleteConfigTemplateReq")
	proto.RegisterType((*DeleteConfigTemplateResp)(nil), "templateserver.DeleteConfigTemplateResp")
	proto.RegisterType((*RenderConfigTemplateReq)(nil), "templateserver.RenderConfigTemplateReq")
	proto.RegisterType((*RenderConfigTemplateResp)(nil), "templateserver.RenderConfigTemplateResp")
	proto.RegisterType((*RenderConfigTemplateResp_RespData)(nil), "templateserver.RenderConfigTemplateResp.RespData")
	proto.RegisterType((*CreateConfigTemplateVersionReq)(nil), "templateserver.CreateConfigTemplateVersionReq")
	proto.RegisterType((*CreateConfigTemplateVersionResp)(nil), "templateserver.CreateConfigTemplateVersionResp")
	proto.RegisterType((*CreateConfigTemplateVersionResp_RespData)(nil), "templateserver.CreateConfigTemplateVersionResp.RespData")
	proto.RegisterType((*QueryConfigTemplateVersionReq)(nil), "templateserver.QueryConfigTemplateVersionReq")
	proto.RegisterType((*QueryConfigTemplateVersionResp)(nil), "templateserver.QueryConfigTemplateVersionResp")
	proto.RegisterType((*QueryConfigTemplateVersionListReq)(nil), "templateserver.QueryConfigTemplateVersionListReq")
	proto.RegisterType((*QueryConfigTemplateVersionListResp)(nil), "templateserver.QueryConfigTemplateVersionListResp")
	proto.RegisterType((*QueryConfigTemplateVersionListResp_RespData)(nil), "templateserver.QueryConfigTemplateVersionListResp.RespData")
	proto.RegisterType((*UpdateConfigTemplateVersionReq)(nil), "templateserver.UpdateConfigTemplateVersionReq")
	proto.RegisterType((*UpdateConfigTemplateVersionResp)(nil), "templateserver.UpdateConfigTemplateVersionResp")
	proto.RegisterType((*DeleteConfigTemplateVersionReq)(nil), "templateserver.DeleteConfigTemplateVersionReq")
	proto.RegisterType((*DeleteConfigTemplateVersionResp)(nil), "templateserver.DeleteConfigTemplateVersionResp")
	proto.RegisterType((*CreateVariableGroupReq)(nil), "templateserver.CreateVariableGroupReq")
	proto.RegisterType((*CreateVariableGroupResp)(nil), "templateserver.CreateVariableGroupResp")
	proto.RegisterType((*CreateVariableGroupResp_RespData)(nil), "templateserver.CreateVariableGroupResp.RespData")
	proto.RegisterType((*QueryVariableGroupReq)(nil), "templateserver.QueryVariableGroupReq")
	proto.RegisterType((*QueryVariableGroupResp)(nil), "templateserver.QueryVariableGroupResp")
	proto.RegisterType((*QueryVariableGroupListReq)(nil), "templateserver.QueryVariableGroupListReq")
	proto.RegisterType((*QueryVariableGroupListResp)(nil), "templateserver.QueryVariableGroupListResp")
	proto.RegisterType((*QueryVariableGroupListResp_RespData)(nil), "templateserver.QueryVariableGroupListResp.RespData")
	proto.RegisterType((*DeleteVariableGroupReq)(nil), "templateserver.DeleteVariableGroupReq")
	proto.RegisterType((*DeleteVariableGroupResp)(nil), "templateserver.DeleteVariableGroupResp")
	proto.RegisterType((*CreateVariableReq)(nil), "templateserver.CreateVariableReq")
	proto.RegisterType((*CreateVariableResp)(nil), "templateserver.CreateVariableResp")
	proto.RegisterType((*CreateVariableResp_RespData)(nil), "templateserver.CreateVariableResp.RespData")
	proto.RegisterType((*UpdateVariableReq)(nil), "templateserver.UpdateVariableReq")
	proto.RegisterType((*UpdateVariableResp)(nil), "templateserver.UpdateVariableResp")
	proto.RegisterType((*QueryVariableReq)(nil), "templateserver.QueryVariableReq")
	proto.RegisterType((*QueryVariableResp)(nil), "templateserver.QueryVariableResp")
	proto.RegisterType((*QueryVariableListReq)(nil), "templateserver.QueryVariableListReq")
	proto.RegisterType((*QueryVariableListResp)(nil), "templateserver.QueryVariableListResp")
	proto.RegisterType((*QueryVariableListResp_RespData)(nil), "templateserver.QueryVariableListResp.RespData")
	proto.RegisterType((*DeleteVariableReq)(nil), "templateserver.DeleteVariableReq")
	proto.RegisterType((*DeleteVariableResp)(nil), "templateserver.DeleteVariableResp")
	proto.RegisterType((*HealthzReq)(nil), "templateserver.HealthzReq")
	proto.RegisterType((*HealthzResp)(nil), "templateserver.HealthzResp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Template service

type TemplateClient interface {
	CreateTemplateBind(ctx context.Context, in *CreateTemplateBindReq, opts ...grpc.CallOption) (*CreateTemplateBindResp, error)
	QueryTemplateBind(ctx context.Context, in *QueryTemplateBindReq, opts ...grpc.CallOption) (*QueryTemplateBindResp, error)
	QueryTemplateBindList(ctx context.Context, in *QueryTemplateBindListReq, opts ...grpc.CallOption) (*QueryTemplateBindListResp, error)
	DeleteTemplateBind(ctx context.Context, in *DeleteTemplateBindReq, opts ...grpc.CallOption) (*DeleteTemplateBindResp, error)
	CreateConfigTemplate(ctx context.Context, in *CreateConfigTemplateReq, opts ...grpc.CallOption) (*CreateConfigTemplateResp, error)
	QueryConfigTemplate(ctx context.Context, in *QueryConfigTemplateReq, opts ...grpc.CallOption) (*QueryConfigTemplateResp, error)
	QueryConfigTemplateList(ctx context.Context, in *QueryConfigTemplateListReq, opts ...grpc.CallOption) (*QueryConfigTemplateListResp, error)
	UpdateConfigTemplate(ctx context.Context, in *UpdateConfigTemplateReq, opts ...grpc.CallOption) (*UpdateConfigTemplateResp, error)
	DeleteConfigTemplate(ctx context.Context, in *DeleteConfigTemplateReq, opts ...grpc.CallOption) (*DeleteConfigTemplateResp, error)
	RenderConfigTemplate(ctx context.Context, in *RenderConfigTemplateReq, opts ...grpc.CallOption) (*RenderConfigTemplateResp, error)
	CreateConfigTemplateVersion(ctx context.Context, in *CreateConfigTemplateVersionReq, opts ...grpc.CallOption) (*CreateConfigTemplateVersionResp, error)
	QueryConfigTemplateVersion(ctx context.Context, in *QueryConfigTemplateVersionReq, opts ...grpc.CallOption) (*QueryConfigTemplateVersionResp, error)
	QueryConfigTemplateVersionList(ctx context.Context, in *QueryConfigTemplateVersionListReq, opts ...grpc.CallOption) (*QueryConfigTemplateVersionListResp, error)
	UpdateConfigTemplateVersion(ctx context.Context, in *UpdateConfigTemplateVersionReq, opts ...grpc.CallOption) (*UpdateConfigTemplateVersionResp, error)
	DeleteConfigTemplateVersion(ctx context.Context, in *DeleteConfigTemplateVersionReq, opts ...grpc.CallOption) (*DeleteConfigTemplateVersionResp, error)
	CreateVariableGroup(ctx context.Context, in *CreateVariableGroupReq, opts ...grpc.CallOption) (*CreateVariableGroupResp, error)
	QueryVariableGroup(ctx context.Context, in *QueryVariableGroupReq, opts ...grpc.CallOption) (*QueryVariableGroupResp, error)
	QueryVariableGroupList(ctx context.Context, in *QueryVariableGroupListReq, opts ...grpc.CallOption) (*QueryVariableGroupListResp, error)
	DeleteVariableGroup(ctx context.Context, in *DeleteVariableGroupReq, opts ...grpc.CallOption) (*DeleteVariableGroupResp, error)
	CreateVariable(ctx context.Context, in *CreateVariableReq, opts ...grpc.CallOption) (*CreateVariableResp, error)
	UpdateVariable(ctx context.Context, in *UpdateVariableReq, opts ...grpc.CallOption) (*UpdateVariableResp, error)
	QueryVariable(ctx context.Context, in *QueryVariableReq, opts ...grpc.CallOption) (*QueryVariableResp, error)
	QueryVariableList(ctx context.Context, in *QueryVariableListReq, opts ...grpc.CallOption) (*QueryVariableListResp, error)
	DeleteVariable(ctx context.Context, in *DeleteVariableReq, opts ...grpc.CallOption) (*DeleteVariableResp, error)
	Healthz(ctx context.Context, in *HealthzReq, opts ...grpc.CallOption) (*HealthzResp, error)
}

type templateClient struct {
	cc *grpc.ClientConn
}

func NewTemplateClient(cc *grpc.ClientConn) TemplateClient {
	return &templateClient{cc}
}

func (c *templateClient) CreateTemplateBind(ctx context.Context, in *CreateTemplateBindReq, opts ...grpc.CallOption) (*CreateTemplateBindResp, error) {
	out := new(CreateTemplateBindResp)
	err := grpc.Invoke(ctx, "/templateserver.Template/CreateTemplateBind", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateClient) QueryTemplateBind(ctx context.Context, in *QueryTemplateBindReq, opts ...grpc.CallOption) (*QueryTemplateBindResp, error) {
	out := new(QueryTemplateBindResp)
	err := grpc.Invoke(ctx, "/templateserver.Template/QueryTemplateBind", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateClient) QueryTemplateBindList(ctx context.Context, in *QueryTemplateBindListReq, opts ...grpc.CallOption) (*QueryTemplateBindListResp, error) {
	out := new(QueryTemplateBindListResp)
	err := grpc.Invoke(ctx, "/templateserver.Template/QueryTemplateBindList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateClient) DeleteTemplateBind(ctx context.Context, in *DeleteTemplateBindReq, opts ...grpc.CallOption) (*DeleteTemplateBindResp, error) {
	out := new(DeleteTemplateBindResp)
	err := grpc.Invoke(ctx, "/templateserver.Template/DeleteTemplateBind", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateClient) CreateConfigTemplate(ctx context.Context, in *CreateConfigTemplateReq, opts ...grpc.CallOption) (*CreateConfigTemplateResp, error) {
	out := new(CreateConfigTemplateResp)
	err := grpc.Invoke(ctx, "/templateserver.Template/CreateConfigTemplate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateClient) QueryConfigTemplate(ctx context.Context, in *QueryConfigTemplateReq, opts ...grpc.CallOption) (*QueryConfigTemplateResp, error) {
	out := new(QueryConfigTemplateResp)
	err := grpc.Invoke(ctx, "/templateserver.Template/QueryConfigTemplate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateClient) QueryConfigTemplateList(ctx context.Context, in *QueryConfigTemplateListReq, opts ...grpc.CallOption) (*QueryConfigTemplateListResp, error) {
	out := new(QueryConfigTemplateListResp)
	err := grpc.Invoke(ctx, "/templateserver.Template/QueryConfigTemplateList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateClient) UpdateConfigTemplate(ctx context.Context, in *UpdateConfigTemplateReq, opts ...grpc.CallOption) (*UpdateConfigTemplateResp, error) {
	out := new(UpdateConfigTemplateResp)
	err := grpc.Invoke(ctx, "/templateserver.Template/UpdateConfigTemplate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateClient) DeleteConfigTemplate(ctx context.Context, in *DeleteConfigTemplateReq, opts ...grpc.CallOption) (*DeleteConfigTemplateResp, error) {
	out := new(DeleteConfigTemplateResp)
	err := grpc.Invoke(ctx, "/templateserver.Template/DeleteConfigTemplate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateClient) RenderConfigTemplate(ctx context.Context, in *RenderConfigTemplateReq, opts ...grpc.CallOption) (*RenderConfigTemplateResp, error) {
	out := new(RenderConfigTemplateResp)
	err := grpc.Invoke(ctx, "/templateserver.Template/RenderConfigTemplate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateClient) CreateConfigTemplateVersion(ctx context.Context, in *CreateConfigTemplateVersionReq, opts ...grpc.CallOption) (*CreateConfigTemplateVersionResp, error) {
	out := new(CreateConfigTemplateVersionResp)
	err := grpc.Invoke(ctx, "/templateserver.Template/CreateConfigTemplateVersion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateClient) QueryConfigTemplateVersion(ctx context.Context, in *QueryConfigTemplateVersionReq, opts ...grpc.CallOption) (*QueryConfigTemplateVersionResp, error) {
	out := new(QueryConfigTemplateVersionResp)
	err := grpc.Invoke(ctx, "/templateserver.Template/QueryConfigTemplateVersion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateClient) QueryConfigTemplateVersionList(ctx context.Context, in *QueryConfigTemplateVersionListReq, opts ...grpc.CallOption) (*QueryConfigTemplateVersionListResp, error) {
	out := new(QueryConfigTemplateVersionListResp)
	err := grpc.Invoke(ctx, "/templateserver.Template/QueryConfigTemplateVersionList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateClient) UpdateConfigTemplateVersion(ctx context.Context, in *UpdateConfigTemplateVersionReq, opts ...grpc.CallOption) (*UpdateConfigTemplateVersionResp, error) {
	out := new(UpdateConfigTemplateVersionResp)
	err := grpc.Invoke(ctx, "/templateserver.Template/UpdateConfigTemplateVersion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateClient) DeleteConfigTemplateVersion(ctx context.Context, in *DeleteConfigTemplateVersionReq, opts ...grpc.CallOption) (*DeleteConfigTemplateVersionResp, error) {
	out := new(DeleteConfigTemplateVersionResp)
	err := grpc.Invoke(ctx, "/templateserver.Template/DeleteConfigTemplateVersion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateClient) CreateVariableGroup(ctx context.Context, in *CreateVariableGroupReq, opts ...grpc.CallOption) (*CreateVariableGroupResp, error) {
	out := new(CreateVariableGroupResp)
	err := grpc.Invoke(ctx, "/templateserver.Template/CreateVariableGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateClient) QueryVariableGroup(ctx context.Context, in *QueryVariableGroupReq, opts ...grpc.CallOption) (*QueryVariableGroupResp, error) {
	out := new(QueryVariableGroupResp)
	err := grpc.Invoke(ctx, "/templateserver.Template/QueryVariableGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateClient) QueryVariableGroupList(ctx context.Context, in *QueryVariableGroupListReq, opts ...grpc.CallOption) (*QueryVariableGroupListResp, error) {
	out := new(QueryVariableGroupListResp)
	err := grpc.Invoke(ctx, "/templateserver.Template/QueryVariableGroupList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateClient) DeleteVariableGroup(ctx context.Context, in *DeleteVariableGroupReq, opts ...grpc.CallOption) (*DeleteVariableGroupResp, error) {
	out := new(DeleteVariableGroupResp)
	err := grpc.Invoke(ctx, "/templateserver.Template/DeleteVariableGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateClient) CreateVariable(ctx context.Context, in *CreateVariableReq, opts ...grpc.CallOption) (*CreateVariableResp, error) {
	out := new(CreateVariableResp)
	err := grpc.Invoke(ctx, "/templateserver.Template/CreateVariable", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateClient) UpdateVariable(ctx context.Context, in *UpdateVariableReq, opts ...grpc.CallOption) (*UpdateVariableResp, error) {
	out := new(UpdateVariableResp)
	err := grpc.Invoke(ctx, "/templateserver.Template/UpdateVariable", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateClient) QueryVariable(ctx context.Context, in *QueryVariableReq, opts ...grpc.CallOption) (*QueryVariableResp, error) {
	out := new(QueryVariableResp)
	err := grpc.Invoke(ctx, "/templateserver.Template/QueryVariable", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateClient) QueryVariableList(ctx context.Context, in *QueryVariableListReq, opts ...grpc.CallOption) (*QueryVariableListResp, error) {
	out := new(QueryVariableListResp)
	err := grpc.Invoke(ctx, "/templateserver.Template/QueryVariableList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateClient) DeleteVariable(ctx context.Context, in *DeleteVariableReq, opts ...grpc.CallOption) (*DeleteVariableResp, error) {
	out := new(DeleteVariableResp)
	err := grpc.Invoke(ctx, "/templateserver.Template/DeleteVariable", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateClient) Healthz(ctx context.Context, in *HealthzReq, opts ...grpc.CallOption) (*HealthzResp, error) {
	out := new(HealthzResp)
	err := grpc.Invoke(ctx, "/templateserver.Template/Healthz", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Template service

type TemplateServer interface {
	CreateTemplateBind(context.Context, *CreateTemplateBindReq) (*CreateTemplateBindResp, error)
	QueryTemplateBind(context.Context, *QueryTemplateBindReq) (*QueryTemplateBindResp, error)
	QueryTemplateBindList(context.Context, *QueryTemplateBindListReq) (*QueryTemplateBindListResp, error)
	DeleteTemplateBind(context.Context, *DeleteTemplateBindReq) (*DeleteTemplateBindResp, error)
	CreateConfigTemplate(context.Context, *CreateConfigTemplateReq) (*CreateConfigTemplateResp, error)
	QueryConfigTemplate(context.Context, *QueryConfigTemplateReq) (*QueryConfigTemplateResp, error)
	QueryConfigTemplateList(context.Context, *QueryConfigTemplateListReq) (*QueryConfigTemplateListResp, error)
	UpdateConfigTemplate(context.Context, *UpdateConfigTemplateReq) (*UpdateConfigTemplateResp, error)
	DeleteConfigTemplate(context.Context, *DeleteConfigTemplateReq) (*DeleteConfigTemplateResp, error)
	RenderConfigTemplate(context.Context, *RenderConfigTemplateReq) (*RenderConfigTemplateResp, error)
	CreateConfigTemplateVersion(context.Context, *CreateConfigTemplateVersionReq) (*CreateConfigTemplateVersionResp, error)
	QueryConfigTemplateVersion(context.Context, *QueryConfigTemplateVersionReq) (*QueryConfigTemplateVersionResp, error)
	QueryConfigTemplateVersionList(context.Context, *QueryConfigTemplateVersionListReq) (*QueryConfigTemplateVersionListResp, error)
	UpdateConfigTemplateVersion(context.Context, *UpdateConfigTemplateVersionReq) (*UpdateConfigTemplateVersionResp, error)
	DeleteConfigTemplateVersion(context.Context, *DeleteConfigTemplateVersionReq) (*DeleteConfigTemplateVersionResp, error)
	CreateVariableGroup(context.Context, *CreateVariableGroupReq) (*CreateVariableGroupResp, error)
	QueryVariableGroup(context.Context, *QueryVariableGroupReq) (*QueryVariableGroupResp, error)
	QueryVariableGroupList(context.Context, *QueryVariableGroupListReq) (*QueryVariableGroupListResp, error)
	DeleteVariableGroup(context.Context, *DeleteVariableGroupReq) (*DeleteVariableGroupResp, error)
	CreateVariable(context.Context, *CreateVariableReq) (*CreateVariableResp, error)
	UpdateVariable(context.Context, *UpdateVariableReq) (*UpdateVariableResp, error)
	QueryVariable(context.Context, *QueryVariableReq) (*QueryVariableResp, error)
	QueryVariableList(context.Context, *QueryVariableListReq) (*QueryVariableListResp, error)
	DeleteVariable(context.Context, *DeleteVariableReq) (*DeleteVariableResp, error)
	Healthz(context.Context, *HealthzReq) (*HealthzResp, error)
}

func RegisterTemplateServer(s *grpc.Server, srv TemplateServer) {
	s.RegisterService(&_Template_serviceDesc, srv)
}

func _Template_CreateTemplateBind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTemplateBindReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateServer).CreateTemplateBind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/templateserver.Template/CreateTemplateBind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateServer).CreateTemplateBind(ctx, req.(*CreateTemplateBindReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Template_QueryTemplateBind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTemplateBindReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateServer).QueryTemplateBind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/templateserver.Template/QueryTemplateBind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateServer).QueryTemplateBind(ctx, req.(*QueryTemplateBindReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Template_QueryTemplateBindList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTemplateBindListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateServer).QueryTemplateBindList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/templateserver.Template/QueryTemplateBindList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateServer).QueryTemplateBindList(ctx, req.(*QueryTemplateBindListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Template_DeleteTemplateBind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTemplateBindReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateServer).DeleteTemplateBind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/templateserver.Template/DeleteTemplateBind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateServer).DeleteTemplateBind(ctx, req.(*DeleteTemplateBindReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Template_CreateConfigTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConfigTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateServer).CreateConfigTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/templateserver.Template/CreateConfigTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateServer).CreateConfigTemplate(ctx, req.(*CreateConfigTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Template_QueryConfigTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryConfigTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateServer).QueryConfigTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/templateserver.Template/QueryConfigTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateServer).QueryConfigTemplate(ctx, req.(*QueryConfigTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Template_QueryConfigTemplateList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryConfigTemplateListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateServer).QueryConfigTemplateList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/templateserver.Template/QueryConfigTemplateList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateServer).QueryConfigTemplateList(ctx, req.(*QueryConfigTemplateListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Template_UpdateConfigTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConfigTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateServer).UpdateConfigTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/templateserver.Template/UpdateConfigTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateServer).UpdateConfigTemplate(ctx, req.(*UpdateConfigTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Template_DeleteConfigTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConfigTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateServer).DeleteConfigTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/templateserver.Template/DeleteConfigTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateServer).DeleteConfigTemplate(ctx, req.(*DeleteConfigTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Template_RenderConfigTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenderConfigTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateServer).RenderConfigTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/templateserver.Template/RenderConfigTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateServer).RenderConfigTemplate(ctx, req.(*RenderConfigTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Template_CreateConfigTemplateVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConfigTemplateVersionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateServer).CreateConfigTemplateVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/templateserver.Template/CreateConfigTemplateVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateServer).CreateConfigTemplateVersion(ctx, req.(*CreateConfigTemplateVersionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Template_QueryConfigTemplateVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryConfigTemplateVersionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateServer).QueryConfigTemplateVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/templateserver.Template/QueryConfigTemplateVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateServer).QueryConfigTemplateVersion(ctx, req.(*QueryConfigTemplateVersionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Template_QueryConfigTemplateVersionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryConfigTemplateVersionListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateServer).QueryConfigTemplateVersionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/templateserver.Template/QueryConfigTemplateVersionList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateServer).QueryConfigTemplateVersionList(ctx, req.(*QueryConfigTemplateVersionListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Template_UpdateConfigTemplateVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConfigTemplateVersionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateServer).UpdateConfigTemplateVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/templateserver.Template/UpdateConfigTemplateVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateServer).UpdateConfigTemplateVersion(ctx, req.(*UpdateConfigTemplateVersionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Template_DeleteConfigTemplateVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConfigTemplateVersionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateServer).DeleteConfigTemplateVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/templateserver.Template/DeleteConfigTemplateVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateServer).DeleteConfigTemplateVersion(ctx, req.(*DeleteConfigTemplateVersionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Template_CreateVariableGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVariableGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateServer).CreateVariableGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/templateserver.Template/CreateVariableGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateServer).CreateVariableGroup(ctx, req.(*CreateVariableGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Template_QueryVariableGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVariableGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateServer).QueryVariableGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/templateserver.Template/QueryVariableGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateServer).QueryVariableGroup(ctx, req.(*QueryVariableGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Template_QueryVariableGroupList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVariableGroupListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateServer).QueryVariableGroupList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/templateserver.Template/QueryVariableGroupList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateServer).QueryVariableGroupList(ctx, req.(*QueryVariableGroupListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Template_DeleteVariableGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVariableGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateServer).DeleteVariableGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/templateserver.Template/DeleteVariableGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateServer).DeleteVariableGroup(ctx, req.(*DeleteVariableGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Template_CreateVariable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVariableReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateServer).CreateVariable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/templateserver.Template/CreateVariable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateServer).CreateVariable(ctx, req.(*CreateVariableReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Template_UpdateVariable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVariableReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateServer).UpdateVariable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/templateserver.Template/UpdateVariable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateServer).UpdateVariable(ctx, req.(*UpdateVariableReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Template_QueryVariable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVariableReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateServer).QueryVariable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/templateserver.Template/QueryVariable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateServer).QueryVariable(ctx, req.(*QueryVariableReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Template_QueryVariableList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVariableListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateServer).QueryVariableList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/templateserver.Template/QueryVariableList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateServer).QueryVariableList(ctx, req.(*QueryVariableListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Template_DeleteVariable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVariableReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateServer).DeleteVariable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/templateserver.Template/DeleteVariable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateServer).DeleteVariable(ctx, req.(*DeleteVariableReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Template_Healthz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthzReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateServer).Healthz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/templateserver.Template/Healthz",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateServer).Healthz(ctx, req.(*HealthzReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Template_serviceDesc = grpc.ServiceDesc{
	ServiceName: "templateserver.Template",
	HandlerType: (*TemplateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTemplateBind",
			Handler:    _Template_CreateTemplateBind_Handler,
		},
		{
			MethodName: "QueryTemplateBind",
			Handler:    _Template_QueryTemplateBind_Handler,
		},
		{
			MethodName: "QueryTemplateBindList",
			Handler:    _Template_QueryTemplateBindList_Handler,
		},
		{
			MethodName: "DeleteTemplateBind",
			Handler:    _Template_DeleteTemplateBind_Handler,
		},
		{
			MethodName: "CreateConfigTemplate",
			Handler:    _Template_CreateConfigTemplate_Handler,
		},
		{
			MethodName: "QueryConfigTemplate",
			Handler:    _Template_QueryConfigTemplate_Handler,
		},
		{
			MethodName: "QueryConfigTemplateList",
			Handler:    _Template_QueryConfigTemplateList_Handler,
		},
		{
			MethodName: "UpdateConfigTemplate",
			Handler:    _Template_UpdateConfigTemplate_Handler,
		},
		{
			MethodName: "DeleteConfigTemplate",
			Handler:    _Template_DeleteConfigTemplate_Handler,
		},
		{
			MethodName: "RenderConfigTemplate",
			Handler:    _Template_RenderConfigTemplate_Handler,
		},
		{
			MethodName: "CreateConfigTemplateVersion",
			Handler:    _Template_CreateConfigTemplateVersion_Handler,
		},
		{
			MethodName: "QueryConfigTemplateVersion",
			Handler:    _Template_QueryConfigTemplateVersion_Handler,
		},
		{
			MethodName: "QueryConfigTemplateVersionList",
			Handler:    _Template_QueryConfigTemplateVersionList_Handler,
		},
		{
			MethodName: "UpdateConfigTemplateVersion",
			Handler:    _Template_UpdateConfigTemplateVersion_Handler,
		},
		{
			MethodName: "DeleteConfigTemplateVersion",
			Handler:    _Template_DeleteConfigTemplateVersion_Handler,
		},
		{
			MethodName: "CreateVariableGroup",
			Handler:    _Template_CreateVariableGroup_Handler,
		},
		{
			MethodName: "QueryVariableGroup",
			Handler:    _Template_QueryVariableGroup_Handler,
		},
		{
			MethodName: "QueryVariableGroupList",
			Handler:    _Template_QueryVariableGroupList_Handler,
		},
		{
			MethodName: "DeleteVariableGroup",
			Handler:    _Template_DeleteVariableGroup_Handler,
		},
		{
			MethodName: "CreateVariable",
			Handler:    _Template_CreateVariable_Handler,
		},
		{
			MethodName: "UpdateVariable",
			Handler:    _Template_UpdateVariable_Handler,
		},
		{
			MethodName: "QueryVariable",
			Handler:    _Template_QueryVariable_Handler,
		},
		{
			MethodName: "QueryVariableList",
			Handler:    _Template_QueryVariableList_Handler,
		},
		{
			MethodName: "DeleteVariable",
			Handler:    _Template_DeleteVariable_Handler,
		},
		{
			MethodName: "Healthz",
			Handler:    _Template_Healthz_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "templateserver.proto",
}

func init() { proto.RegisterFile("templateserver.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 4891 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x7d, 0x6b, 0x70, 0x14, 0xd7,
	0x95, 0xff, 0xff, 0x8e, 0x04, 0x96, 0xae, 0x64, 0x19, 0xda, 0x3c, 0x26, 0xc3, 0xdf, 0xca, 0xf8,
	0x06, 0x63, 0x68, 0xf4, 0x6c, 0x24, 0x24, 0x4d, 0xbc, 0x8e, 0x5a, 0x60, 0x8c, 0x1c, 0x1b, 0x83,
	0x4c, 0x6c, 0xc7, 0x8f, 0x22, 0x2d, 0x4d, 0x4b, 0x9e, 0x78, 0x34, 0x33, 0x9a, 0x19, 0xc9, 0x02,
	0xed, 0xb0, 0xc2, 0x11, 0x06, 0x8c, 0x84, 0x70, 0x83, 0xc1, 0x3c, 0x0c, 0x68, 0x83, 0x03, 0x49,
	0x1c, 0x81, 0x4d, 0x0c, 0x42, 0xc2, 0x66, 0xb3, 0x55, 0xd9, 0x0f, 0x5b, 0xc9, 0x96, 0xa3, 0xa4,
	0x6a, 0xab, 0xb6, 0x2a, 0xeb, 0xda, 0x8a, 0x7a, 0x46, 0xda, 0x4a, 0x55, 0x6a, 0x3f, 0xec, 0xa3,
	0x2a, 0x5f, 0xb6, 0x6e, 0x3f, 0x34, 0xfd, 0xb8, 0x3d, 0xdd, 0x33, 0x12, 0x64, 0xf6, 0x8b, 0xad,
	0xe9, 0xbe, 0x7d, 0xef, 0x79, 0xfc, 0xce, 0xb9, 0xe7, 0x9c, 0x3e, 0xb7, 0x81, 0x2b, 0xe2, 0x7c,
	0x77, 0x24, 0xc8, 0xc5, 0xf9, 0x18, 0x1f, 0xed, 0xe3, 0xa3, 0x55, 0x91, 0x68, 0x38, 0x1e, 0xa6,
	0xca, 0xf4, 0x57, 0x3d, 0x95, 0xed, 0x6f, 0x56, 0xb6, 0xc7, 0x3a, 0x22, 0xd5, 0x81, 0x50, 0x9c,
	0x8f, 0x86, 0xb8, 0x60, 0xb5, 0x34, 0xae, 0x23, 0x1c, 0xac, 0xee, 0x08, 0x77, 0x77, 0x87, 0x43,
	0xca, 0xff, 0xe4, 0xc7, 0x3d, 0xff, 0xbf, 0x2b, 0x1c, 0xee, 0x0a, 0xf2, 0xd5, 0x5c, 0x24, 0x50,
	0xcd, 0x85, 0x42, 0xe1, 0x38, 0x17, 0x0f, 0x84, 0x43, 0x31, 0xe5, 0x6e, 0x85, 0xfc, 0x6c, 0x65,
	0x17, 0x1f, 0xaa, 0x8c, 0xbd, 0xc5, 0x75, 0x75, 0xf1, 0xd1, 0xea, 0x70, 0x44, 0x1a, 0x61, 0x1e,
	0x8d, 0x3e, 0x73, 0xc1, 0x95, 0x5b, 0xa2, 0x3c, 0x17, 0xe7, 0x77, 0x2b, 0x34, 0xb5, 0x04, 0x42,
	0xfe, 0x36, 0xbe, 0x87, 0x5a, 0x07, 0x97, 0xb6, 0x07, 0xf6, 0xed, 0x09, 0xf8, 0xdd, 0xc0, 0x0b,
	0xd6, 0x17, 0xb7, 0x3c, 0x24, 0xb0, 0xa5, 0x74, 0xd1, 0xcc, 0xc4, 0x59, 0xf1, 0xdd, 0xb1, 0xd6,
	0xad, 0xfd, 0xcd, 0x6d, 0x4b, 0xda, 0x03, 0xfb, 0x5a, 0xfd, 0x54, 0x0d, 0x2c, 0x51, 0xd9, 0xc1,
	0x83, 0x5d, 0x9a, 0xc1, 0xc9, 0xab, 0x63, 0xc9, 0x0f, 0xef, 0x4a, 0x83, 0xa1, 0x3a, 0xa6, 0xd5,
	0x8f, 0x67, 0xe6, 0x22, 0x11, 0x3c, 0xb8, 0x40, 0x33, 0x58, 0x9c, 0x3c, 0x99, 0x3a, 0x79, 0x55,
	0x9e, 0x99, 0x8b, 0x44, 0x5a, 0xfd, 0xbe, 0x33, 0x40, 0x60, 0xdf, 0x07, 0xf0, 0x75, 0x9a, 0x4c,
	0x21, 0xb3, 0x56, 0x3c, 0x7c, 0x4e, 0x9c, 0x9a, 0x9c, 0x3b, 0x38, 0x92, 0xfa, 0x7c, 0x5c, 0x5e,
	0x2b, 0x35, 0xf5, 0x9e, 0x38, 0x7e, 0x56, 0x3c, 0x78, 0x23, 0x75, 0x63, 0x6a, 0xf6, 0xda, 0xad,
	0xe4, 0x27, 0x6f, 0x4f, 0x03, 0x85, 0x8d, 0x69, 0xa0, 0xa5, 0x73, 0x1a, 0x28, 0x34, 0x30, 0x75,
	0x14, 0x33, 0x80, 0xe4, 0xbf, 0x91, 0xcf, 0x8b, 0x3a, 0x1b, 0x1b, 0x9a, 0xb8, 0xf6, 0xc6, 0xce,
	0xca, 0x8e, 0x06, 0xbe, 0xbe, 0xb2, 0xb6, 0x96, 0x6f, 0xaa, 0x6c, 0xf2, 0x77, 0xd4, 0x57, 0xd6,
	0x33, 0xf5, 0x75, 0x35, 0x35, 0x9d, 0x4d, 0x4d, 0x4c, 0x43, 0x23, 0x4a, 0xa0, 0xff, 0x29, 0x80,
	0xab, 0x48, 0x54, 0xc5, 0x22, 0xd4, 0x06, 0xb8, 0x34, 0xca, 0xc7, 0x7a, 0x83, 0x71, 0x49, 0x70,
	0x45, 0x2d, 0xcb, 0x05, 0xb6, 0x8c, 0x2e, 0x4d, 0x1e, 0xb9, 0x32, 0x3b, 0x36, 0x9c, 0x9a, 0x3a,
	0x91, 0xbc, 0x70, 0xbe, 0x4d, 0x19, 0x40, 0x6d, 0x82, 0x85, 0x1d, 0x61, 0x3f, 0x2f, 0x09, 0xad,
	0x8c, 0x79, 0xa8, 0x4a, 0x51, 0xf3, 0x53, 0xd1, 0xe8, 0x96, 0xb0, 0x9f, 0x6f, 0x29, 0x13, 0xd8,
	0x12, 0xba, 0x78, 0xee, 0xe4, 0x99, 0xd9, 0x6b, 0xd7, 0x52, 0x97, 0x0e, 0xb4, 0x49, 0x83, 0xa9,
	0x8d, 0xf0, 0x81, 0x6e, 0x3e, 0x16, 0xe3, 0xba, 0x78, 0x45, 0x7e, 0xf2, 0x02, 0xf2, 0xb0, 0xe4,
	0xe8, 0xe8, 0xec, 0xdd, 0xeb, 0x6d, 0xea, 0x08, 0x6a, 0x27, 0x2c, 0xf4, 0x73, 0x71, 0xce, 0x5d,
	0xe8, 0x05, 0xeb, 0x4b, 0x98, 0xea, 0x2a, 0x03, 0x1e, 0xc9, 0x2c, 0x54, 0xe1, 0xff, 0x6c, 0xe5,
	0xe2, 0x5c, 0x4b, 0x89, 0xc0, 0x16, 0xd1, 0x4b, 0x15, 0xaa, 0xa5, 0x99, 0x3c, 0x0c, 0x2c, 0x52,
	0x6f, 0x63, 0x4d, 0x76, 0x74, 0x76, 0x19, 0x31, 0x22, 0x2b, 0x44, 0xd6, 0x64, 0x47, 0x67, 0x57,
	0xab, 0xdf, 0xf7, 0x8f, 0x40, 0x60, 0xff, 0x01, 0xc0, 0x97, 0x69, 0x0b, 0x99, 0xd9, 0xa9, 0x52,
	0x3c, 0x31, 0x22, 0x4e, 0x9e, 0x9c, 0x06, 0x8a, 0xdc, 0xa6, 0x81, 0x24, 0x89, 0x69, 0xa0, 0xb2,
	0xc9, 0x7c, 0x9f, 0x7a, 0x63, 0x00, 0xc9, 0x37, 0x91, 0xcf, 0x1b, 0x8f, 0xf6, 0xf2, 0x15, 0x5e,
	0x84, 0xc7, 0x20, 0x9f, 0xb7, 0xa6, 0xc2, 0x8b, 0x94, 0x71, 0x58, 0xc1, 0xcf, 0x7f, 0x1b, 0x55,
	0x78, 0x11, 0x66, 0x05, 0xf9, 0xbc, 0x03, 0x48, 0xa6, 0xdf, 0xb9, 0xe6, 0x13, 0xe8, 0x86, 0x0b,
	0xae, 0xd8, 0xd5, 0xcb, 0x47, 0xf7, 0xe6, 0x9f, 0xc5, 0x7c, 0x00, 0x04, 0xf6, 0x24, 0x80, 0xaf,
	0xd1, 0x44, 0x02, 0x99, 0xb5, 0xc9, 0x8b, 0x1f, 0xcd, 0x5e, 0xfb, 0xdb, 0xbf, 0x88, 0xc1, 0xfc,
	0x97, 0x0b, 0xae, 0x24, 0x10, 0x95, 0x6f, 0xf6, 0x52, 0xaf, 0xb3, 0x97, 0x15, 0xea, 0x0a, 0x5a,
	0xa2, 0x09, 0x46, 0xa1, 0x0a, 0xfe, 0x25, 0x9a, 0xcc, 0xa3, 0x9d, 0xe4, 0x6d, 0xf1, 0xdd, 0x44,
	0x35, 0xe4, 0x82, 0xef, 0x81, 0x44, 0x02, 0x5d, 0x2e, 0x80, 0x6e, 0x13, 0x51, 0xcf, 0x06, 0x62,
	0xf1, 0xbc, 0x80, 0x2c, 0x56, 0x69, 0x04, 0xab, 0x46, 0x16, 0x78, 0xa9, 0x2a, 0xf0, 0x9d, 0x5c,
	0x17, 0xaf, 0x28, 0x4a, 0x3c, 0xfc, 0xce, 0xdc, 0xd8, 0x67, 0xb3, 0xe3, 0x5f, 0xa4, 0x3e, 0x1f,
	0x6f, 0x93, 0x06, 0xfb, 0xbe, 0x04, 0x02, 0xfb, 0x2b, 0x00, 0x5f, 0xa4, 0x2d, 0x39, 0x63, 0x68,
	0x1b, 0x89, 0x1f, 0x3e, 0x3d, 0x3b, 0x76, 0xd5, 0x84, 0x78, 0x69, 0x7a, 0x26, 0x4a, 0x45, 0x06,
	0x90, 0x86, 0x5f, 0xe4, 0x73, 0x86, 0xf2, 0x0a, 0x2f, 0x8a, 0xc8, 0x5a, 0xc0, 0xca, 0x8a, 0xf7,
	0x46, 0x43, 0x7b, 0xe2, 0xe1, 0x38, 0x17, 0x4c, 0xab, 0x2c, 0x16, 0xe7, 0xa2, 0x71, 0x45, 0x67,
	0xc1, 0x40, 0x77, 0x00, 0xff, 0x5d, 0x5b, 0x53, 0x93, 0x48, 0xa0, 0x89, 0x42, 0xf8, 0x35, 0x0b,
	0x66, 0xf2, 0xcd, 0x46, 0x5e, 0xd0, 0xd9, 0x08, 0x63, 0xdc, 0x53, 0x2c, 0xb9, 0xc8, 0xb8, 0xad,
	0xf4, 0x6a, 0xb6, 0x15, 0x06, 0x96, 0x48, 0x72, 0xdb, 0xd3, 0x11, 0xee, 0x0d, 0xc9, 0x2c, 0x3f,
	0xa8, 0xb2, 0x3c, 0x38, 0x95, 0x7c, 0xff, 0x7a, 0x72, 0x64, 0x7c, 0xee, 0xd0, 0x68, 0x1b, 0x94,
	0x46, 0x6d, 0xc1, 0x83, 0xb0, 0xe1, 0x06, 0x42, 0x9d, 0x61, 0xb7, 0xcb, 0x5b, 0xe0, 0xd0, 0x70,
	0xf1, 0x70, 0xdf, 0x2f, 0x80, 0xc0, 0x7e, 0x0e, 0x20, 0x47, 0x5b, 0x0b, 0xdf, 0x19, 0x94, 0x6c,
	0x4d, 0xf8, 0x65, 0xea, 0xc5, 0x9c, 0x4c, 0x18, 0x69, 0x44, 0x21, 0xa3, 0xa5, 0xc2, 0x8b, 0x30,
	0xed, 0xc8, 0xf7, 0xea, 0x40, 0xe2, 0xf5, 0x44, 0x42, 0x8a, 0xe1, 0xb6, 0xf2, 0x41, 0x3e, 0xbf,
	0x63, 0x38, 0x22, 0x85, 0x78, 0xe3, 0xbf, 0x34, 0x77, 0xe6, 0xf2, 0x5f, 0x64, 0x4b, 0xba, 0xe9,
	0x82, 0xab, 0x48, 0x54, 0xe5, 0x99, 0xbd, 0xf9, 0x8e, 0x01, 0x81, 0x7d, 0x57, 0x8a, 0x9e, 0xc8,
	0xd4, 0xda, 0x09, 0xd1, 0x16, 0x9a, 0x55, 0x54, 0x45, 0x16, 0xd0, 0x4c, 0xa0, 0x8f, 0x8b, 0xe0,
	0x6a, 0x39, 0x90, 0xdb, 0x12, 0x0e, 0x75, 0x06, 0xba, 0x54, 0x82, 0xb2, 0x81, 0xdc, 0xe3, 0xb0,
	0x30, 0xc4, 0x75, 0xf3, 0x0a, 0xd6, 0x1e, 0x16, 0xd8, 0x65, 0x74, 0xa9, 0x4c, 0xba, 0x78, 0x7c,
	0x24, 0x75, 0xe5, 0x7a, 0x7f, 0x73, 0x9b, 0x34, 0x80, 0xda, 0x08, 0x8b, 0x70, 0x8c, 0x26, 0x0d,
	0x96, 0x65, 0xb5, 0x4c, 0x60, 0x1f, 0xa4, 0x8b, 0x65, 0x6e, 0xc5, 0xe3, 0x23, 0xfd, 0xcd, 0x6d,
	0x0f, 0x74, 0x74, 0x76, 0xed, 0xc0, 0x83, 0x6b, 0x61, 0x31, 0x1e, 0xdc, 0x19, 0xe1, 0xe2, 0x6f,
	0x48, 0xfe, 0xa9, 0xb8, 0x65, 0x85, 0xc0, 0x2e, 0xa7, 0x4b, 0xe5, 0xd1, 0xb3, 0xb7, 0xae, 0x89,
	0x5f, 0x0c, 0xf5, 0x0f, 0x16, 0xb5, 0xe1, 0x39, 0xb7, 0xe1, 0x51, 0x98, 0x90, 0xde, 0x18, 0x1f,
	0x75, 0x2f, 0xd1, 0x12, 0x72, 0xea, 0xd0, 0xcc, 0xd4, 0xcd, 0xd4, 0xc9, 0xab, 0xc9, 0xc3, 0xb7,
	0x30, 0x21, 0x78, 0x00, 0x55, 0x0f, 0x21, 0xfe, 0xff, 0x9e, 0xae, 0x68, 0xb8, 0x37, 0xe2, 0x5e,
	0x2a, 0x0d, 0x5f, 0x25, 0xb0, 0x0f, 0xd3, 0x0f, 0x69, 0x87, 0xa7, 0xa6, 0x86, 0xfa, 0x9b, 0xdb,
	0x8a, 0xf1, 0xc8, 0xa7, 0xf1, 0x40, 0x6a, 0x3b, 0x2c, 0xeb, 0x0c, 0x04, 0xf9, 0x3d, 0x91, 0x68,
	0xa0, 0x2f, 0x10, 0xe4, 0xbb, 0x78, 0xf7, 0x03, 0xd2, 0xa3, 0x8f, 0x0a, 0x6c, 0xb9, 0xba, 0x52,
	0xf2, 0xc3, 0x1f, 0xcc, 0x9d, 0x39, 0xce, 0x94, 0xce, 0x7c, 0x71, 0x54, 0xfc, 0xd1, 0xdb, 0x3e,
	0x6f, 0x4d, 0x43, 0x7d, 0x7d, 0x7f, 0x73, 0xdb, 0x83, 0xf8, 0xc1, 0x9d, 0xea, 0x73, 0xd4, 0x2e,
	0x58, 0x22, 0xcd, 0xd4, 0x19, 0x8e, 0x76, 0x73, 0x71, 0x77, 0x91, 0x34, 0x4d, 0x8d, 0xc0, 0x56,
	0xd2, 0x94, 0x42, 0xc1, 0x8d, 0xa9, 0xd4, 0xd4, 0xc5, 0xe4, 0xa5, 0x3b, 0xe2, 0x9d, 0x51, 0x66,
	0xa5, 0x3a, 0x59, 0x6f, 0x28, 0xd0, 0xef, 0xf5, 0xbe, 0x15, 0x08, 0xf9, 0xc3, 0x6f, 0xc5, 0xb0,
	0x19, 0xe3, 0x49, 0xb6, 0x49, 0x73, 0x50, 0xdf, 0x83, 0xc5, 0xd2, 0x94, 0xdd, 0x18, 0xc1, 0xc5,
	0x5e, 0xb0, 0x7e, 0x49, 0xcb, 0x16, 0x81, 0x6d, 0xa6, 0x9f, 0x50, 0x26, 0xfc, 0x64, 0x4a, 0xbc,
	0x70, 0xd4, 0x5b, 0xeb, 0x4b, 0x9e, 0x3a, 0x94, 0x3c, 0xff, 0xb1, 0x7c, 0xd1, 0xcb, 0xf8, 0x66,
	0x26, 0x87, 0x67, 0xef, 0x9e, 0x13, 0x0f, 0xdf, 0x54, 0xae, 0x6c, 0xf2, 0xc9, 0xaa, 0x93, 0x7f,
	0xf6, 0x37, 0xb7, 0x15, 0xe1, 0x59, 0x9f, 0xc3, 0x48, 0x7f, 0x12, 0x96, 0xf0, 0xa1, 0xae, 0x40,
	0x88, 0xdf, 0x13, 0xdf, 0x1b, 0xe1, 0xdd, 0x50, 0x5a, 0xe3, 0x11, 0x81, 0xf5, 0xd0, 0x6e, 0xe5,
	0x99, 0x89, 0x4f, 0x93, 0x17, 0x4f, 0x88, 0x77, 0xde, 0x4f, 0x9e, 0x38, 0x26, 0xaf, 0xd7, 0x06,
	0xe5, 0x27, 0x76, 0xef, 0x8d, 0xf0, 0x58, 0x3d, 0xdd, 0x7c, 0x77, 0xd8, 0x5d, 0xa2, 0x51, 0x8f,
	0x78, 0xf9, 0x50, 0xf2, 0xc6, 0xd5, 0x99, 0xbb, 0x63, 0xc9, 0x03, 0xd7, 0xb0, 0x7a, 0xf0, 0x00,
	0xdf, 0xe9, 0x02, 0x81, 0x3d, 0x51, 0x00, 0xaf, 0x00, 0xda, 0x0a, 0x9b, 0x8c, 0xdb, 0x9c, 0x65,
	0x98, 0x23, 0x00, 0x0c, 0xb4, 0x69, 0x30, 0x8f, 0xb9, 0x69, 0x90, 0x46, 0xd4, 0x34, 0x90, 0x90,
	0x30, 0x0d, 0x34, 0x40, 0x98, 0x06, 0x06, 0xf5, 0x4e, 0x03, 0xad, 0x96, 0xa6, 0x41, 0x5a, 0xc0,
	0xd3, 0x40, 0x2b, 0x0a, 0x26, 0x09, 0xa8, 0x3f, 0x80, 0x01, 0x84, 0x17, 0xc1, 0x96, 0xd5, 0xbd,
	0xb7, 0x52, 0xf5, 0x6d, 0xd8, 0xfb, 0xab, 0xeb, 0xe3, 0x5b, 0xca, 0xc6, 0xba, 0x97, 0xeb, 0x0e,
	0xaa, 0xb7, 0x24, 0x7a, 0x90, 0x0f, 0x55, 0xf3, 0xf1, 0x0e, 0x7c, 0x0d, 0x13, 0x84, 0x87, 0x46,
	0xc3, 0xe1, 0xb8, 0xfa, 0x5b, 0x26, 0x50, 0x7b, 0x55, 0x4f, 0x29, 0xbe, 0x53, 0xd3, 0xd0, 0xd0,
	0x30, 0x7f, 0x47, 0x26, 0x19, 0x5f, 0xc6, 0x98, 0x99, 0xbf, 0xdc, 0x9d, 0xf6, 0x04, 0x1a, 0xfa,
	0xe7, 0x7d, 0x43, 0x77, 0x18, 0xf9, 0x90, 0xac, 0x12, 0x89, 0x3a, 0x2c, 0xfc, 0xb0, 0x44, 0x4c,
	0x37, 0x1f, 0x0c, 0xa3, 0x04, 0x3a, 0x58, 0x08, 0xdd, 0x64, 0x95, 0xe4, 0x5b, 0x64, 0xd3, 0xa6,
	0x8b, 0x6c, 0x6a, 0xc9, 0xd9, 0xb2, 0x99, 0x89, 0x8c, 0x81, 0x4d, 0xb3, 0x26, 0xb0, 0xa9, 0xd3,
	0xef, 0xb3, 0x20, 0x8d, 0xe9, 0x32, 0x2d, 0x28, 0x5b, 0xb7, 0x6a, 0xf7, 0x5a, 0xdf, 0x2f, 0x81,
	0xc0, 0xfe, 0x02, 0xc0, 0x1d, 0xb4, 0xa5, 0x14, 0x49, 0xc8, 0xb6, 0xf5, 0xfa, 0x61, 0xaa, 0x3b,
	0xc7, 0x9c, 0x59, 0x17, 0x1a, 0x3b, 0x4f, 0x9c, 0x7f, 0x05, 0xe0, 0x2a, 0x29, 0xca, 0xca, 0x7d,
	0xd7, 0xa8, 0x23, 0x05, 0x2a, 0xb6, 0x02, 0xdc, 0x2d, 0xb0, 0xbb, 0x60, 0x2b, 0x6d, 0xb1, 0x38,
	0xe3, 0x36, 0xc7, 0x77, 0x19, 0xe3, 0x0e, 0xa6, 0x90, 0x72, 0x0d, 0x24, 0xd0, 0x7f, 0xb8, 0xe0,
	0x6a, 0xe2, 0x8c, 0xf9, 0x86, 0xea, 0x06, 0x1d, 0xaa, 0x57, 0xa9, 0x2b, 0xe8, 0xc9, 0x26, 0x65,
	0xb5, 0xa3, 0x40, 0x60, 0x8f, 0x02, 0xf8, 0x1c, 0x6d, 0xc5, 0x27, 0x49, 0x74, 0xb6, 0xb8, 0xf3,
	0x51, 0x8d, 0xb9, 0xe1, 0x2e, 0x91, 0x40, 0xc3, 0x2e, 0xe8, 0x21, 0xd0, 0x92, 0x6d, 0x3a, 0xab,
	0x26, 0x9d, 0xae, 0x6c, 0x92, 0xce, 0xe3, 0x40, 0x60, 0x87, 0x01, 0x7c, 0x96, 0xce, 0x40, 0x01,
	0x53, 0x4e, 0x10, 0x48, 0xa6, 0x54, 0xf3, 0x09, 0xca, 0x37, 0x90, 0x7b, 0xd2, 0x78, 0xb3, 0x10,
	0xae, 0xb1, 0x24, 0x26, 0xdf, 0x60, 0xf8, 0x1d, 0x1d, 0x0c, 0xeb, 0x88, 0x69, 0x23, 0x99, 0x8f,
	0x8c, 0xfe, 0xf5, 0xad, 0x05, 0x26, 0x8e, 0x0d, 0xba, 0xc4, 0xd1, 0x99, 0x75, 0x48, 0xa9, 0xe3,
	0x6d, 0x20, 0xb0, 0x9f, 0x01, 0xf8, 0x12, 0x9d, 0x49, 0x05, 0xd6, 0x80, 0xb0, 0xb5, 0x93, 0x57,
	0xa8, 0x97, 0x73, 0xf5, 0xcf, 0x96, 0x19, 0xa3, 0x57, 0x49, 0x19, 0xc7, 0x96, 0xc2, 0xd5, 0xdf,
	0x89, 0xf8, 0x17, 0x14, 0xc1, 0x67, 0x9f, 0x34, 0xaa, 0x31, 0x7f, 0x41, 0x36, 0x31, 0x7f, 0x61,
	0x56, 0x31, 0xff, 0x92, 0xac, 0x62, 0xfe, 0xa5, 0xd9, 0xc5, 0xfc, 0x0f, 0xe4, 0x1e, 0xf3, 0x17,
	0x2d, 0x4e, 0xcc, 0x5f, 0xbc, 0xd8, 0x31, 0x3f, 0xbc, 0x0f, 0x31, 0x7f, 0x49, 0xae, 0x31, 0x7f,
	0xa9, 0x5d, 0xcc, 0xff, 0xaa, 0xc0, 0xbe, 0x0c, 0x77, 0xd2, 0x56, 0x50, 0x66, 0xca, 0x93, 0xe7,
	0x7e, 0x9e, 0x3c, 0x75, 0x5d, 0x6b, 0x7c, 0xf2, 0x0c, 0x4e, 0xf6, 0xf7, 0x71, 0x17, 0x74, 0x93,
	0x27, 0xce, 0xb7, 0x02, 0xc1, 0x10, 0x10, 0xd8, 0x41, 0x29, 0x40, 0xb4, 0xa2, 0x97, 0x71, 0x9b,
	0x25, 0xb1, 0xe8, 0x65, 0x81, 0x2f, 0x01, 0x5c, 0x2d, 0x57, 0x28, 0xee, 0xa3, 0x53, 0x99, 0xc7,
	0x80, 0xc5, 0xca, 0x4c, 0xb9, 0xb9, 0x38, 0x92, 0x1d, 0x06, 0xc8, 0x13, 0xe7, 0x2f, 0x06, 0xac,
	0xe8, 0xc5, 0x49, 0x82, 0x51, 0x12, 0x8b, 0x8e, 0x81, 0xcb, 0x85, 0x70, 0x75, 0x1b, 0x1f, 0xf2,
	0xf3, 0xd1, 0xfb, 0xb9, 0xb1, 0xd4, 0x41, 0xd8, 0xc7, 0x47, 0x63, 0x81, 0x70, 0x28, 0x5d, 0x91,
	0x5c, 0x29, 0xb0, 0x14, 0x5d, 0xa6, 0x54, 0xc3, 0x8e, 0x1c, 0x4e, 0x9e, 0xff, 0x58, 0x7a, 0xac,
	0x58, 0x19, 0xd8, 0xea, 0xa7, 0xfc, 0xb0, 0xb8, 0x8f, 0x8b, 0x06, 0xb8, 0xf6, 0x20, 0x1f, 0x53,
	0xb6, 0x99, 0x6d, 0x02, 0xbb, 0x85, 0xfe, 0x96, 0x38, 0x7a, 0x6d, 0x6e, 0xf0, 0xc8, 0x9f, 0xee,
	0x0c, 0xcf, 0x1e, 0xfa, 0x89, 0x38, 0x7e, 0x76, 0xe6, 0xf6, 0x91, 0xd4, 0xd9, 0x21, 0xc5, 0x67,
	0x8d, 0x7e, 0x30, 0x77, 0x68, 0x74, 0xfd, 0x33, 0x2f, 0x3c, 0xbf, 0x43, 0x9c, 0x1c, 0x15, 0x0f,
	0x9f, 0x16, 0x87, 0x4f, 0x89, 0xc7, 0x8f, 0xa5, 0xce, 0x0e, 0x89, 0x3f, 0x3b, 0x9d, 0xfa, 0xf8,
	0x47, 0x33, 0x13, 0x9f, 0x6e, 0x90, 0x56, 0x51, 0x27, 0xa6, 0x5e, 0x83, 0xa5, 0x7d, 0x9c, 0xb2,
	0x83, 0x60, 0xea, 0xe4, 0x1d, 0xca, 0x27, 0xb0, 0x0d, 0xf4, 0x2a, 0x79, 0xa1, 0x0a, 0xaf, 0x3c,
	0xab, 0x78, 0xf8, 0x9d, 0xd4, 0xd4, 0x50, 0xeb, 0x56, 0x66, 0x4d, 0xea, 0xe4, 0xd5, 0x99, 0x89,
	0xc1, 0xd4, 0xd4, 0x90, 0x7c, 0x63, 0xf6, 0xee, 0xb9, 0xd9, 0xb1, 0x61, 0x99, 0x00, 0xcc, 0x79,
	0x1f, 0x27, 0xef, 0x33, 0xad, 0x7e, 0xdf, 0xcf, 0x81, 0xc0, 0x5e, 0x07, 0x30, 0x40, 0x5b, 0x49,
	0x9d, 0x29, 0x97, 0x9f, 0xcb, 0x12, 0xff, 0xd3, 0x40, 0x23, 0xd1, 0x69, 0x90, 0xe6, 0x87, 0xd9,
	0x42, 0xb1, 0x03, 0x28, 0x7d, 0x0f, 0x6b, 0xbe, 0x63, 0x73, 0x13, 0x5f, 0xdb, 0x58, 0xdf, 0x5e,
	0xc7, 0xb5, 0xd7, 0x71, 0xf5, 0xfe, 0x4d, 0x9b, 0xea, 0x9b, 0xda, 0xb9, 0x46, 0x2e, 0xe6, 0xe7,
	0x62, 0x7e, 0x1c, 0x98, 0xcc, 0x3f, 0x8c, 0x07, 0x0f, 0x24, 0x50, 0x02, 0x8d, 0x15, 0x42, 0x37,
	0x99, 0xe0, 0xff, 0x63, 0x25, 0x01, 0x2b, 0x26, 0xb2, 0x28, 0x09, 0xc0, 0x8e, 0x70, 0x28, 0xce,
	0x87, 0xe2, 0x69, 0xc3, 0x90, 0xa1, 0x2b, 0xbe, 0x73, 0x50, 0x1c, 0xbf, 0x9d, 0xfa, 0xd9, 0x17,
	0xe2, 0xf1, 0x11, 0x19, 0xba, 0xca, 0xc0, 0x56, 0xbf, 0xef, 0xdf, 0x80, 0xc0, 0xfe, 0x5e, 0xb2,
	0x76, 0x2b, 0x02, 0x18, 0xb7, 0x59, 0xef, 0xb6, 0xd6, 0xfe, 0x2e, 0xa0, 0x0e, 0x81, 0x5c, 0x5f,
	0xa4, 0xcf, 0x73, 0x81, 0x7c, 0x16, 0x88, 0x68, 0x6c, 0x6a, 0x68, 0x6a, 0x68, 0xa8, 0xe9, 0xd8,
	0xdc, 0x58, 0xd3, 0xde, 0xd0, 0xd4, 0xd9, 0xc1, 0xf1, 0x9d, 0x9b, 0xea, 0xdb, 0xfd, 0x7c, 0x47,
	0x4d, 0x7d, 0x4d, 0x53, 0x6d, 0x3d, 0xdf, 0xd8, 0xc8, 0xf8, 0x19, 0xa6, 0xbe, 0xb1, 0x66, 0x33,
	0x4a, 0x24, 0xd0, 0xbf, 0x17, 0xc2, 0x72, 0x52, 0xc1, 0xe3, 0x45, 0x19, 0x7b, 0xf7, 0xd6, 0xa3,
	0xec, 0x80, 0x25, 0x2a, 0xc6, 0xe3, 0x5c, 0x97, 0x82, 0x93, 0x4a, 0x81, 0xa5, 0xe9, 0x87, 0xb4,
	0x2e, 0x45, 0x1c, 0xbd, 0xc5, 0xac, 0x14, 0xcf, 0x5f, 0x15, 0x8f, 0x0f, 0x2b, 0xa6, 0x35, 0x71,
	0x54, 0x3c, 0x79, 0x6d, 0x66, 0x62, 0x50, 0xb2, 0x53, 0x79, 0x86, 0xdd, 0x5c, 0x97, 0x41, 0xcd,
	0x85, 0xce, 0xd4, 0x4c, 0xd5, 0xc1, 0x52, 0xf5, 0xa9, 0x58, 0x60, 0x1f, 0x2f, 0xf9, 0x0e, 0x35,
	0xa1, 0x91, 0x9f, 0x13, 0x2f, 0x5f, 0x11, 0xaf, 0x8f, 0xb6, 0x95, 0x28, 0xc3, 0x5e, 0x08, 0xec,
	0x4b, 0x87, 0x4f, 0x4b, 0xed, 0xc2, 0xa7, 0xc3, 0x2e, 0x81, 0x1d, 0x72, 0xc1, 0x03, 0x80, 0xb6,
	0x11, 0x34, 0xde, 0x44, 0x4d, 0xfd, 0x19, 0x92, 0x00, 0x6c, 0x9c, 0x88, 0x56, 0x88, 0xd3, 0x40,
	0x23, 0x82, 0x69, 0xa0, 0xe3, 0x8c, 0xd9, 0x4f, 0xfd, 0x75, 0xda, 0xab, 0xc4, 0xb9, 0x2e, 0xe4,
	0x43, 0x7d, 0xb5, 0x52, 0x39, 0x51, 0x03, 0x2b, 0xef, 0xc2, 0x71, 0xa5, 0x99, 0x11, 0xaf, 0x2b,
	0xa5, 0x47, 0x4c, 0x5d, 0x02, 0x5d, 0x2c, 0x84, 0x5f, 0xcf, 0x28, 0x83, 0x7c, 0xf3, 0x4b, 0xdf,
	0xd5, 0xf9, 0xa5, 0x46, 0x27, 0xa5, 0x4a, 0x0d, 0x2f, 0xd9, 0xb8, 0x27, 0xcd, 0xce, 0x0a, 0x9c,
	0xed, 0xac, 0xbe, 0xdf, 0x00, 0x81, 0xfd, 0x35, 0x80, 0xaf, 0xd2, 0x76, 0x32, 0xb5, 0x06, 0x96,
	0xad, 0xaf, 0x0a, 0x51, 0xc1, 0x1c, 0x3d, 0x95, 0x7e, 0xf3, 0x72, 0x5a, 0xbd, 0xbc, 0xe8, 0x82,
	0x8f, 0x10, 0x12, 0xfd, 0xfb, 0xe2, 0x8d, 0x72, 0x8a, 0x6f, 0x7c, 0x21, 0x81, 0x7d, 0x13, 0x76,
	0xd0, 0x99, 0xa9, 0x26, 0x15, 0x28, 0x1c, 0x99, 0xb6, 0x86, 0x22, 0x25, 0x58, 0x1e, 0x2e, 0x80,
	0xe5, 0x99, 0xd6, 0xca, 0x37, 0x13, 0x7a, 0x52, 0x67, 0x42, 0x8f, 0x90, 0x2b, 0x3f, 0x0a, 0xf5,
	0xa4, 0xf2, 0xe8, 0x79, 0x20, 0xb0, 0x1f, 0x00, 0xf8, 0x0a, 0x6d, 0xc3, 0xb5, 0xb5, 0x88, 0xef,
	0x69, 0xad, 0xf4, 0x5f, 0x5d, 0xf0, 0x51, 0x6b, 0xc2, 0xee, 0x7d, 0x07, 0x90, 0x5a, 0x64, 0x2d,
	0xc8, 0xa6, 0xc8, 0xfa, 0x63, 0x20, 0xb0, 0x1f, 0x01, 0xd8, 0x45, 0xdb, 0x93, 0x4e, 0x6c, 0xaa,
	0x92, 0xc5, 0x4a, 0xae, 0xb8, 0xea, 0xf1, 0x2b, 0xd7, 0x5f, 0x25, 0x01, 0xcb, 0xf5, 0xd7, 0x2c,
	0xca, 0xaf, 0x72, 0xf5, 0xf5, 0x9f, 0x0b, 0x21, 0xb2, 0xa3, 0x32, 0xdf, 0x30, 0xff, 0x9a, 0x0e,
	0xf3, 0xdf, 0x74, 0x50, 0x84, 0x35, 0xb0, 0x93, 0x71, 0xe7, 0xd8, 0xbf, 0xc0, 0x5a, 0xec, 0x93,
	0xba, 0x5a, 0x6c, 0x56, 0x16, 0x29, 0x95, 0x64, 0x95, 0x37, 0x65, 0x7e, 0xda, 0x81, 0x5e, 0xec,
	0xe0, 0x63, 0x6b, 0x9b, 0xdf, 0xa5, 0x5e, 0x5a, 0xf4, 0xfa, 0xac, 0x52, 0x9e, 0xbd, 0x59, 0x00,
	0xcb, 0x49, 0xa5, 0x9c, 0xfc, 0xdd, 0x6c, 0xf2, 0x33, 0xc0, 0x0d, 0x0b, 0x6c, 0x10, 0xfa, 0x69,
	0x1b, 0x59, 0x92, 0xca, 0x84, 0x39, 0x6e, 0x81, 0x7f, 0xef, 0x82, 0x5f, 0xcf, 0xb8, 0x58, 0xbe,
	0x95, 0x8d, 0xde, 0x03, 0x02, 0x3b, 0x22, 0x45, 0x6a, 0x36, 0x64, 0x5b, 0x0b, 0x69, 0xd1, 0x6b,
	0x48, 0x63, 0x2e, 0x58, 0x4e, 0x2a, 0x62, 0xe5, 0x71, 0xa8, 0xa5, 0x02, 0x2d, 0x33, 0xd9, 0xa4,
	0x5a, 0xe4, 0x02, 0x80, 0x96, 0x71, 0xb1, 0xfc, 0x05, 0x9a, 0x0d, 0xd9, 0xf7, 0x11, 0x68, 0x47,
	0x5d, 0xea, 0x21, 0x8e, 0x17, 0x95, 0x0a, 0x95, 0x54, 0x56, 0xcb, 0x06, 0x60, 0xb4, 0xae, 0x8d,
	0x4d, 0x7e, 0x35, 0xa4, 0xad, 0xe6, 0xc9, 0xef, 0xaa, 0xe4, 0xb7, 0x5a, 0xaa, 0xdb, 0x2a, 0xb0,
	0x73, 0x5b, 0x71, 0x81, 0xed, 0x81, 0xdb, 0x69, 0x0b, 0xda, 0xd4, 0x9c, 0x49, 0xa9, 0xe9, 0x68,
	0x16, 0x23, 0x37, 0x33, 0x31, 0x8f, 0x51, 0xdf, 0x18, 0x40, 0xf2, 0x25, 0xcc, 0x7a, 0x7f, 0x7f,
	0xbf, 0xd4, 0xdb, 0xa3, 0x76, 0x17, 0xc9, 0x5d, 0x42, 0x09, 0xf4, 0xc7, 0x02, 0xb5, 0xab, 0xcf,
	0xb0, 0x62, 0xbe, 0xc5, 0x30, 0xbb, 0x74, 0x31, 0x4c, 0x0d, 0x39, 0xf5, 0x35, 0xf1, 0x90, 0x31,
	0x70, 0xd9, 0xa2, 0x09, 0x5c, 0x1a, 0x0c, 0x05, 0x5b, 0x5d, 0x4d, 0x4e, 0x57, 0xa8, 0x35, 0xd4,
	0x62, 0x7f, 0x0a, 0x04, 0xf6, 0x0a, 0x80, 0x2f, 0xd0, 0x56, 0x62, 0xb4, 0xd6, 0x9c, 0x2d, 0xb4,
	0x77, 0x52, 0x3b, 0x72, 0xcd, 0x76, 0x35, 0xbc, 0xcc, 0xab, 0x3f, 0x91, 0x40, 0x67, 0xd4, 0x03,
	0x19, 0x39, 0x63, 0xdf, 0x28, 0x28, 0x97, 0x43, 0x41, 0xcd, 0x1b, 0x4d, 0x81, 0xbd, 0xd1, 0xf8,
	0x62, 0x02, 0x1b, 0x81, 0xcd, 0x34, 0x99, 0x54, 0x35, 0xb3, 0xb2, 0x35, 0x05, 0xa6, 0x82, 0xa2,
	0x49, 0x36, 0x40, 0x16, 0x0e, 0x3a, 0x57, 0xa0, 0x74, 0x2a, 0xe5, 0xb9, 0x25, 0x6c, 0xd6, 0x59,
	0xc2, 0x4a, 0x75, 0x05, 0x1d, 0xd5, 0xa4, 0xcc, 0x75, 0x0a, 0x08, 0xec, 0x2d, 0x00, 0xdb, 0x68,
	0x0b, 0x2e, 0xad, 0xe5, 0x6a, 0x0b, 0x54, 0x8e, 0xda, 0xb3, 0x98, 0x40, 0x35, 0xfb, 0xa9, 0x04,
	0xba, 0xe4, 0x52, 0x8e, 0x4a, 0xe8, 0xe8, 0xbe, 0x2f, 0x3d, 0x40, 0x1f, 0x01, 0x81, 0x1d, 0x03,
	0x70, 0x17, 0x6d, 0x4d, 0x80, 0x9a, 0x57, 0x10, 0x64, 0x97, 0xa9, 0x11, 0xe8, 0x59, 0xea, 0x19,
	0x12, 0x40, 0x73, 0x4c, 0x4d, 0x7f, 0x5f, 0xa8, 0xf4, 0x49, 0x11, 0x28, 0xcc, 0x37, 0x10, 0xef,
	0xd6, 0x81, 0x78, 0x13, 0x31, 0x25, 0x25, 0xb2, 0x91, 0xd1, 0xa3, 0xf7, 0x2d, 0x30, 0x15, 0xdd,
	0xac, 0x4b, 0x45, 0x1d, 0x99, 0x96, 0x94, 0x82, 0xfe, 0x01, 0x08, 0xec, 0x57, 0x00, 0xbe, 0x46,
	0x67, 0x90, 0xbf, 0x1d, 0x44, 0x6c, 0x8d, 0xec, 0x6f, 0xa8, 0xc4, 0xa2, 0xa4, 0x9e, 0xba, 0xc6,
	0x20, 0xa7, 0x06, 0x88, 0x13, 0xd4, 0xc1, 0xf9, 0xa3, 0x13, 0xf7, 0x7d, 0xf7, 0x50, 0xdf, 0x74,
	0xef, 0xa4, 0x2d, 0x28, 0x50, 0xa3, 0x6c, 0x07, 0xf1, 0x91, 0x8e, 0x82, 0x2c, 0xf7, 0x88, 0x4f,
	0x5d, 0x6a, 0xb7, 0x43, 0x7e, 0x6f, 0x12, 0xbe, 0x23, 0x40, 0x60, 0x0f, 0x4a, 0x61, 0x89, 0x05,
	0xb9, 0xd6, 0x02, 0x5b, 0xf4, 0x88, 0xfb, 0xcf, 0x2e, 0xb8, 0x5c, 0x1f, 0x1c, 0x65, 0x03, 0x99,
	0xb5, 0xba, 0x60, 0x5b, 0x6e, 0x09, 0x53, 0xc8, 0xd5, 0x84, 0xd9, 0xeb, 0xe0, 0x92, 0x3e, 0x2e,
	0xd8, 0xab, 0x3f, 0x2d, 0xa2, 0x0c, 0x1b, 0xbc, 0x83, 0x67, 0x93, 0x6e, 0x53, 0x41, 0x03, 0x00,
	0xe5, 0x9a, 0xc5, 0x33, 0x02, 0xfb, 0xb4, 0x11, 0x80, 0xcc, 0xa6, 0xf9, 0x8e, 0x80, 0x99, 0x89,
	0xc9, 0xd4, 0x8f, 0x27, 0x93, 0xa7, 0x6f, 0xce, 0x8e, 0x5d, 0x4d, 0x5d, 0x9e, 0x4c, 0x9e, 0xba,
	0xae, 0x0c, 0xfd, 0xe4, 0xc2, 0xcc, 0xe4, 0xb1, 0xb9, 0xa9, 0x0f, 0x66, 0xc7, 0x2f, 0xcb, 0x8f,
	0x19, 0x50, 0x7b, 0x00, 0x08, 0xec, 0x7e, 0xf8, 0x14, 0x6d, 0x66, 0x5f, 0x6d, 0xde, 0xd6, 0x8a,
	0xdf, 0xea, 0x58, 0x82, 0x4c, 0x3a, 0x53, 0x4f, 0x6d, 0xca, 0x14, 0xd1, 0xf7, 0x71, 0x51, 0x19,
	0xb8, 0xc1, 0x5e, 0xe5, 0x37, 0xfe, 0x23, 0x81, 0xfe, 0xae, 0x00, 0x52, 0xc6, 0xe5, 0xf3, 0x6d,
	0x37, 0x78, 0x56, 0xb7, 0x1b, 0x6c, 0xcc, 0x1c, 0xdc, 0x67, 0x7b, 0x58, 0x1d, 0xeb, 0xdb, 0x80,
	0x32, 0x59, 0xde, 0x32, 0xca, 0xfa, 0xb8, 0x68, 0xab, 0xdf, 0x77, 0x16, 0x08, 0xec, 0x29, 0x00,
	0xb7, 0xd3, 0x04, 0x59, 0x91, 0x74, 0x65, 0x6b, 0x24, 0xcf, 0x50, 0xdb, 0x17, 0x10, 0x12, 0xe9,
	0xa3, 0xf6, 0xa3, 0x2e, 0xb8, 0x5c, 0xae, 0xd4, 0xe4, 0x62, 0x40, 0x69, 0x11, 0xb8, 0x32, 0x89,
	0xc0, 0xa9, 0x09, 0xf9, 0xf6, 0x0b, 0xec, 0x00, 0xfc, 0x16, 0x6d, 0xa6, 0x48, 0xed, 0x37, 0xcb,
	0x88, 0x69, 0x85, 0x16, 0xa6, 0x91, 0xda, 0x6c, 0xe5, 0x77, 0x8d, 0x57, 0x0c, 0x80, 0xbe, 0xe4,
	0x82, 0x94, 0x71, 0xed, 0x7c, 0x73, 0xbf, 0x09, 0x81, 0xdd, 0x87, 0xc1, 0x64, 0xa6, 0x93, 0x24,
	0xa4, 0x45, 0xf7, 0xb8, 0x3f, 0x75, 0xc1, 0x65, 0xba, 0x48, 0xe4, 0x5e, 0xe0, 0xc5, 0xb8, 0x97,
	0x17, 0x64, 0x9b, 0x09, 0x16, 0x3a, 0xc8, 0x04, 0xdb, 0x05, 0x76, 0x0f, 0xac, 0xa7, 0x4d, 0xdc,
	0xa8, 0x87, 0x10, 0x32, 0x60, 0x8d, 0x59, 0x47, 0xad, 0x75, 0x00, 0xb1, 0x04, 0xfa, 0x49, 0x01,
	0x5c, 0x6e, 0x98, 0x3f, 0xdf, 0x1c, 0x64, 0xad, 0xce, 0x41, 0x2e, 0x33, 0x06, 0xa6, 0xa4, 0x74,
	0xef, 0x77, 0x40, 0x60, 0xbf, 0x04, 0xf0, 0x69, 0xda, 0xcc, 0x1b, 0x49, 0x78, 0xb6, 0x18, 0x1c,
	0x02, 0xd4, 0x01, 0xb0, 0x38, 0x2e, 0xcd, 0x2a, 0xbe, 0xb2, 0xdf, 0xcd, 0x12, 0x28, 0xa9, 0x7e,
	0x88, 0x43, 0x65, 0x28, 0xdb, 0x14, 0x70, 0x37, 0x31, 0x04, 0x65, 0x04, 0xb6, 0xda, 0x14, 0x01,
	0xac, 0x99, 0x8f, 0x00, 0x14, 0x79, 0x0d, 0x1f, 0x12, 0xc7, 0xcf, 0x92, 0x76, 0xfa, 0xdc, 0xde,
	0x7b, 0x2a, 0x9b, 0xce, 0x36, 0x9a, 0xc8, 0x11, 0x39, 0x1f, 0xbf, 0x6f, 0xd9, 0x64, 0xb2, 0xd0,
	0x50, 0x2a, 0xca, 0xcf, 0x44, 0xf2, 0x79, 0x9d, 0x65, 0x54, 0x65, 0x4c, 0x24, 0x1d, 0xe5, 0x90,
	0x3d, 0x0b, 0xcc, 0x21, 0x6b, 0x75, 0x39, 0xa4, 0x9d, 0xa9, 0x4a, 0xe9, 0xe3, 0x9f, 0x81, 0xc0,
	0xfe, 0x37, 0x80, 0xbb, 0x68, 0xb2, 0xc0, 0xad, 0x81, 0x60, 0x6b, 0xb4, 0x63, 0x80, 0xba, 0x00,
	0xee, 0x51, 0xd6, 0xb8, 0x10, 0x83, 0x56, 0xed, 0x19, 0xa7, 0x95, 0xbf, 0x01, 0x70, 0xb9, 0x3e,
	0x49, 0xb9, 0x07, 0xbb, 0x95, 0x2f, 0x28, 0xb0, 0x01, 0x1c, 0xb5, 0x98, 0x56, 0x52, 0x3b, 0xa4,
	0x1d, 0x45, 0x2d, 0x4e, 0xb7, 0x14, 0x1c, 0xa3, 0x18, 0x57, 0xca, 0xd7, 0x18, 0xc5, 0x4c, 0x27,
	0x49, 0x24, 0x8b, 0x1e, 0xa3, 0x94, 0x43, 0xb8, 0x9d, 0xe7, 0x82, 0xf1, 0x37, 0xf6, 0x61, 0x75,
	0x2f, 0x83, 0x05, 0x31, 0xbe, 0x47, 0xd6, 0x75, 0x1b, 0xfe, 0x13, 0x8d, 0x00, 0x58, 0x32, 0x3f,
	0x20, 0x16, 0x31, 0x8f, 0xa0, 0xbe, 0x91, 0x51, 0x44, 0x8a, 0x48, 0xdc, 0x06, 0x91, 0xa4, 0x3d,
	0x47, 0xa5, 0xce, 0x73, 0x7c, 0x4d, 0x7d, 0xfc, 0xb9, 0xb0, 0xbf, 0x37, 0xc8, 0x2b, 0x2b, 0xb7,
	0x86, 0x3a, 0xc3, 0xb2, 0x5f, 0x60, 0xe6, 0x36, 0xc2, 0x22, 0xf5, 0xcd, 0x15, 0xf5, 0x47, 0xa0,
	0x26, 0x55, 0xda, 0xef, 0x32, 0x50, 0x8f, 0x39, 0xf9, 0xd4, 0x56, 0x8f, 0x67, 0x9d, 0xb3, 0x2f,
	0x72, 0xa1, 0x77, 0x80, 0xc0, 0x6e, 0x86, 0xa5, 0xba, 0x25, 0x28, 0x6d, 0x2e, 0x22, 0x7f, 0xf0,
	0xc1, 0x43, 0xb8, 0xf6, 0xf6, 0x6f, 0x67, 0x4e, 0xb8, 0x9e, 0x46, 0x2d, 0xd2, 0xf7, 0xe2, 0xfa,
	0x98, 0x6a, 0x75, 0xc1, 0xea, 0xf6, 0xc0, 0xbe, 0xea, 0x01, 0x19, 0xc1, 0x89, 0xf4, 0xd5, 0x01,
	0xcd, 0x9b, 0xc7, 0xf4, 0xe5, 0x3d, 0xed, 0x81, 0x90, 0xdf, 0x07, 0x68, 0x2a, 0x09, 0x94, 0x08,
	0x49, 0x47, 0xca, 0x5a, 0xdb, 0x8f, 0xc0, 0x60, 0x66, 0x1f, 0x73, 0x30, 0x2a, 0x16, 0x41, 0x3f,
	0x20, 0xf1, 0xaa, 0xf5, 0x7b, 0x2a, 0xaf, 0xe6, 0x6b, 0x12, 0xaf, 0x5b, 0xa9, 0x45, 0xe0, 0x95,
	0xfa, 0x13, 0x20, 0x7c, 0xb0, 0x0a, 0xfb, 0x61, 0x6a, 0xbd, 0xc3, 0x2f, 0xde, 0xf4, 0x78, 0x36,
	0x38, 0xfe, 0x36, 0x0e, 0x1a, 0x04, 0x02, 0xdb, 0x62, 0x60, 0xda, 0x6d, 0x66, 0x50, 0x76, 0xf6,
	0x1e, 0xcb, 0x3b, 0x92, 0x00, 0xea, 0x51, 0x8d, 0x49, 0x00, 0xc1, 0x40, 0x2c, 0x4e, 0x96, 0xc2,
	0xbc, 0x6a, 0xe7, 0x80, 0xea, 0xa9, 0x32, 0x23, 0x99, 0xf8, 0x25, 0x17, 0x33, 0x92, 0xc9, 0x1f,
	0x2b, 0x21, 0x6b, 0x57, 0xeb, 0x64, 0xd2, 0x48, 0x36, 0x5e, 0x93, 0xb5, 0x4b, 0x2f, 0x86, 0x76,
	0x7f, 0x09, 0xe0, 0x0a, 0x52, 0x6f, 0x2a, 0xf5, 0xb8, 0xb3, 0x43, 0xff, 0x3d, 0x9e, 0xf5, 0x4e,
	0xbf, 0x0e, 0x80, 0x5e, 0x11, 0xd8, 0x75, 0x1a, 0x87, 0x51, 0xaa, 0x35, 0x51, 0x8f, 0xee, 0x97,
	0xc4, 0xe0, 0x46, 0xb4, 0xce, 0x19, 0x83, 0x58, 0x67, 0xbf, 0x06, 0xf0, 0x61, 0x42, 0xaf, 0x13,
	0xb5, 0xce, 0x41, 0x67, 0x17, 0xe6, 0xe2, 0x71, 0x47, 0xe3, 0x62, 0x11, 0xc4, 0x1b, 0x98, 0xd0,
	0x02, 0xd0, 0xa3, 0xfb, 0x25, 0x31, 0xb1, 0x99, 0xaa, 0xcb, 0x45, 0x4b, 0xd4, 0x57, 0x80, 0x78,
	0xa8, 0x5e, 0xb2, 0x3b, 0xda, 0xf1, 0x91, 0xe1, 0x1e, 0xcf, 0xc6, 0x2c, 0x8e, 0x17, 0xa3, 0x37,
	0x05, 0x96, 0xd1, 0xf0, 0xa6, 0xf3, 0x2b, 0x8a, 0xc1, 0x11, 0xae, 0x49, 0x7c, 0xd6, 0xa0, 0x8d,
	0x59, 0x98, 0x1a, 0xd6, 0xd8, 0x57, 0x00, 0xae, 0x20, 0xf5, 0xda, 0x98, 0x91, 0x67, 0x71, 0xaa,
	0xd1, 0x8c, 0x3c, 0xab, 0x53, 0x7f, 0x28, 0x6e, 0x64, 0x4c, 0x53, 0x6f, 0x90, 0x7b, 0x0e, 0x3c,
	0x84, 0x6b, 0x12, 0x63, 0x4d, 0x9e, 0x9c, 0x14, 0x88, 0x39, 0xfc, 0x12, 0xc0, 0x15, 0xa4, 0x26,
	0x0f, 0x33, 0x87, 0x16, 0x67, 0xf6, 0xcc, 0x1c, 0x5a, 0x9d, 0x69, 0x33, 0xc1, 0x52, 0xeb, 0x34,
	0x3c, 0xba, 0x5f, 0x32, 0x2c, 0xe9, 0xdc, 0x60, 0x99, 0x04, 0x70, 0x05, 0xe9, 0xa4, 0x8d, 0x99,
	0x25, 0x8b, 0x63, 0x58, 0x66, 0x96, 0xac, 0x0e, 0xee, 0xa0, 0x01, 0xa3, 0xd2, 0xa4, 0x98, 0x50,
	0x7b, 0x70, 0xd6, 0x43, 0xb8, 0x26, 0xb1, 0xd7, 0x8c, 0xbe, 0x69, 0x62, 0x2f, 0x2a, 0xad, 0xe3,
	0x54, 0x77, 0x43, 0x2e, 0xb8, 0x26, 0x43, 0xcf, 0x3e, 0x55, 0x95, 0xd5, 0x41, 0x83, 0x1e, 0x4f,
	0x75, 0x96, 0x07, 0x13, 0xa4, 0xed, 0xa1, 0x09, 0x3e, 0x64, 0x5c, 0x57, 0x1f, 0xd7, 0x48, 0xed,
	0x40, 0x1e, 0xc2, 0x35, 0x49, 0x0a, 0x2c, 0x7a, 0x22, 0xa7, 0x1d, 0x42, 0x69, 0xb2, 0xc2, 0x62,
	0x38, 0x4a, 0xfe, 0xce, 0x84, 0x4a, 0x4d, 0xa5, 0xf3, 0xbe, 0x59, 0x2c, 0x84, 0xaa, 0x6c, 0x86,
	0xc7, 0x22, 0x68, 0xc4, 0x42, 0x06, 0xba, 0x4d, 0x5f, 0x91, 0x81, 0xf9, 0x9a, 0x24, 0x83, 0x6f,
	0x53, 0xad, 0x0b, 0x91, 0x41, 0xf5, 0x40, 0xba, 0xe3, 0x2c, 0x41, 0x5d, 0x70, 0x65, 0x6a, 0xec,
	0x97, 0x7c, 0x73, 0x6d, 0xb6, 0x9d, 0xc4, 0x3d, 0x1e, 0x26, 0xfb, 0xe6, 0x63, 0x74, 0x12, 0x08,
	0xec, 0x53, 0x66, 0xc9, 0xb8, 0xcd, 0x52, 0x20, 0x06, 0x4a, 0x9a, 0x3b, 0x92, 0x94, 0xb6, 0x21,
	0x36, 0x0b, 0xef, 0x6d, 0x0d, 0x97, 0xf7, 0x5c, 0x70, 0x4d, 0x86, 0xfe, 0x49, 0xb3, 0xd5, 0x64,
	0x6e, 0x48, 0x35, 0x5b, 0x8d, 0x4d, 0x73, 0x26, 0x3a, 0x6e, 0x85, 0x18, 0x8d, 0x73, 0x9f, 0x47,
	0x8c, 0xe9, 0x9a, 0x24, 0x8b, 0x1d, 0x9e, 0xc5, 0x43, 0x0c, 0x96, 0xc9, 0x31, 0x17, 0x5c, 0x93,
	0xa1, 0xd5, 0xcf, 0x2c, 0x93, 0xcc, 0xbd, 0x93, 0x66, 0x99, 0xd8, 0xf4, 0x11, 0x5a, 0x5a, 0x91,
	0x2e, 0xae, 0x9c, 0xf7, 0x24, 0xc6, 0x6b, 0xb2, 0x15, 0xd1, 0x8b, 0x68, 0x45, 0xff, 0x02, 0xe0,
	0xc3, 0x84, 0xc6, 0x30, 0x6a, 0x9d, 0xa3, 0x06, 0x36, 0x42, 0xa8, 0x66, 0xd1, 0x65, 0x86, 0xa2,
	0x02, 0xfb, 0x57, 0xf0, 0x41, 0xfd, 0x22, 0x8a, 0xaf, 0xd4, 0x56, 0x35, 0x3d, 0x6e, 0xab, 0x6e,
	0x34, 0x89, 0xf7, 0x0a, 0xf4, 0x78, 0x66, 0xde, 0xe7, 0xcb, 0x3c, 0x58, 0xdb, 0xbf, 0x03, 0x90,
	0x32, 0x37, 0x3c, 0x50, 0x8f, 0xd9, 0x77, 0x73, 0x10, 0x73, 0x07, 0x72, 0x5b, 0x12, 0x0a, 0x93,
	0x38, 0x93, 0x2d, 0x5c, 0xcf, 0x99, 0x55, 0x7f, 0x85, 0xc4, 0xd9, 0x06, 0xca, 0x29, 0x67, 0xd4,
	0x7f, 0x02, 0x52, 0x23, 0x98, 0xe4, 0xf1, 0x36, 0x38, 0x6d, 0x54, 0xe9, 0xf1, 0xd0, 0xce, 0x7b,
	0x5a, 0xa4, 0xfd, 0xaf, 0xd5, 0xc8, 0xa3, 0xdb, 0xcc, 0xa3, 0xe2, 0xdf, 0xca, 0x33, 0x77, 0x92,
	0x48, 0xfc, 0xd6, 0xa2, 0x0a, 0x07, 0x5e, 0x4e, 0xa7, 0xce, 0x24, 0x80, 0x0f, 0x13, 0xba, 0x05,
	0x28, 0x8b, 0x24, 0xcf, 0x1e, 0xab, 0x16, 0xad, 0x07, 0x68, 0x3f, 0x19, 0xab, 0xd8, 0x1a, 0x8d,
	0x58, 0x25, 0xb7, 0x28, 0x48, 0x1c, 0x36, 0xd2, 0x9b, 0x1d, 0x6a, 0xb4, 0x7a, 0x40, 0x5b, 0x9d,
	0x4c, 0x50, 0xb7, 0x01, 0x2c, 0xd3, 0xdb, 0x11, 0xf5, 0xa8, 0xdd, 0x3b, 0xe7, 0x1e, 0x0f, 0xb2,
	0x7f, 0x2d, 0x8d, 0xbe, 0x27, 0xb0, 0x15, 0xb0, 0x68, 0x7e, 0xd6, 0x52, 0xad, 0x01, 0xea, 0x43,
	0x17, 0xf9, 0x9a, 0xb3, 0xdc, 0x4f, 0x3d, 0x4a, 0x8f, 0x95, 0xf4, 0x4f, 0x00, 0x96, 0xe9, 0xdf,
	0x2a, 0x9a, 0x69, 0x37, 0xbd, 0x99, 0x35, 0xd3, 0x6e, 0x7e, 0x31, 0x89, 0x7a, 0x05, 0xb6, 0x51,
	0x43, 0xbb, 0xb2, 0x65, 0xc8, 0x74, 0x2a, 0x79, 0x03, 0xe1, 0xdd, 0xa5, 0x26, 0x7b, 0xa8, 0xf3,
	0x54, 0x3b, 0xe3, 0x43, 0xd6, 0x87, 0xb2, 0x65, 0xdc, 0x00, 0xf0, 0x41, 0x9d, 0x69, 0x50, 0xde,
	0x8c, 0x96, 0x83, 0xd9, 0x79, 0xd4, 0x66, 0x44, 0x2c, 0x82, 0x5e, 0x37, 0x68, 0x42, 0x6b, 0x4c,
	0x86, 0xc4, 0x2e, 0xad, 0x89, 0xf5, 0x94, 0x43, 0x4d, 0x50, 0xbf, 0x05, 0x86, 0x77, 0x86, 0x92,
	0x7b, 0x58, 0xeb, 0xe0, 0xf5, 0x83, 0x55, 0x45, 0xcc, 0x58, 0xf5, 0x47, 0x3d, 0x46, 0x7d, 0xe8,
	0xdc, 0x81, 0x39, 0xd0, 0xd1, 0xde, 0xc9, 0x22, 0x4d, 0xd5, 0x82, 0xeb, 0x2e, 0x80, 0x65, 0x7a,
	0xa3, 0x35, 0x83, 0xcb, 0x54, 0x40, 0x37, 0x83, 0xcb, 0x5c, 0x51, 0x46, 0x9d, 0x26, 0xc3, 0x48,
	0x5b, 0xbb, 0x7e, 0x27, 0xd6, 0xa8, 0xa3, 0x96, 0xce, 0x16, 0x50, 0xd4, 0x56, 0xf8, 0x80, 0x52,
	0xba, 0xa5, 0x3c, 0x46, 0xb2, 0xd2, 0xe5, 0x66, 0xcf, 0x1a, 0xcb, 0x7b, 0xb1, 0x08, 0xfa, 0x7f,
	0x2d, 0x61, 0x81, 0x0d, 0x52, 0x5b, 0xa0, 0x6f, 0xf6, 0xc4, 0x87, 0x73, 0x9f, 0x4e, 0x88, 0x17,
	0x27, 0x53, 0x63, 0x83, 0xc9, 0xf3, 0x23, 0xe2, 0xbb, 0x63, 0xca, 0xc7, 0xa8, 0x6e, 0xdf, 0x10,
	0x47, 0xaf, 0xb3, 0x3b, 0x5b, 0x93, 0xa7, 0x0e, 0x25, 0xc7, 0x7e, 0x58, 0xa9, 0xc4, 0x10, 0xe7,
	0x26, 0xc4, 0x83, 0x37, 0x92, 0xc7, 0x3e, 0x12, 0x47, 0x7f, 0xc8, 0x2c, 0x61, 0xaa, 0x6a, 0xaa,
	0x6a, 0x68, 0x00, 0x98, 0x65, 0x5c, 0x24, 0x12, 0x0c, 0x74, 0x48, 0xff, 0x02, 0x47, 0xf5, 0xf7,
	0x63, 0xe1, 0x90, 0xcf, 0x74, 0xa5, 0x7d, 0xa9, 0xf4, 0x0f, 0x73, 0x6c, 0xfa, 0xdf, 0x00, 0x00,
	0x00, 0xff, 0xff, 0xa9, 0x83, 0x84, 0xd6, 0x3b, 0x64, 0x00, 0x00,
}
