// Code generated by protoc-gen-go.
// source: templateserver.proto
// DO NOT EDIT!

/*
Package templateserver is a generated protocol buffer package.

It is generated from these files:
	templateserver.proto

It has these top-level messages:
	RenderReq
	RenderResp
	PreviewRenderingReq
	PreviewRenderingResp
*/
package templateserver

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "bk-bscp/internal/protocol/common"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RenderReq struct {
	Seq      uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid      string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Appid    string `protobuf:"bytes,3,opt,name=appid" json:"appid,omitempty"`
	Cfgsetid string `protobuf:"bytes,4,opt,name=cfgsetid" json:"cfgsetid,omitempty"`
	Commitid string `protobuf:"bytes,5,opt,name=commitid" json:"commitid,omitempty"`
	Operator string `protobuf:"bytes,6,opt,name=operator" json:"operator,omitempty"`
}

func (m *RenderReq) Reset()                    { *m = RenderReq{} }
func (m *RenderReq) String() string            { return proto.CompactTextString(m) }
func (*RenderReq) ProtoMessage()               {}
func (*RenderReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *RenderReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *RenderReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *RenderReq) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

func (m *RenderReq) GetCfgsetid() string {
	if m != nil {
		return m.Cfgsetid
	}
	return ""
}

func (m *RenderReq) GetCommitid() string {
	if m != nil {
		return m.Commitid
	}
	return ""
}

func (m *RenderReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

type RenderResp struct {
	Seq     uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg  string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
}

func (m *RenderResp) Reset()                    { *m = RenderResp{} }
func (m *RenderResp) String() string            { return proto.CompactTextString(m) }
func (*RenderResp) ProtoMessage()               {}
func (*RenderResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RenderResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *RenderResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *RenderResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type PreviewRenderingReq struct {
	Seq          uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid          string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Appid        string `protobuf:"bytes,3,opt,name=appid" json:"appid,omitempty"`
	Template     string `protobuf:"bytes,4,opt,name=template" json:"template,omitempty"`
	TemplateRule string `protobuf:"bytes,5,opt,name=templateRule" json:"templateRule,omitempty"`
}

func (m *PreviewRenderingReq) Reset()                    { *m = PreviewRenderingReq{} }
func (m *PreviewRenderingReq) String() string            { return proto.CompactTextString(m) }
func (*PreviewRenderingReq) ProtoMessage()               {}
func (*PreviewRenderingReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *PreviewRenderingReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *PreviewRenderingReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *PreviewRenderingReq) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

func (m *PreviewRenderingReq) GetTemplate() string {
	if m != nil {
		return m.Template
	}
	return ""
}

func (m *PreviewRenderingReq) GetTemplateRule() string {
	if m != nil {
		return m.TemplateRule
	}
	return ""
}

type PreviewRenderingResp struct {
	Seq     uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg  string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	Content []byte         `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
}

func (m *PreviewRenderingResp) Reset()                    { *m = PreviewRenderingResp{} }
func (m *PreviewRenderingResp) String() string            { return proto.CompactTextString(m) }
func (*PreviewRenderingResp) ProtoMessage()               {}
func (*PreviewRenderingResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *PreviewRenderingResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *PreviewRenderingResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *PreviewRenderingResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *PreviewRenderingResp) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

func init() {
	proto.RegisterType((*RenderReq)(nil), "templateserver.RenderReq")
	proto.RegisterType((*RenderResp)(nil), "templateserver.RenderResp")
	proto.RegisterType((*PreviewRenderingReq)(nil), "templateserver.PreviewRenderingReq")
	proto.RegisterType((*PreviewRenderingResp)(nil), "templateserver.PreviewRenderingResp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Template service

type TemplateClient interface {
	Render(ctx context.Context, in *RenderReq, opts ...grpc.CallOption) (*RenderResp, error)
	PreviewRendering(ctx context.Context, in *PreviewRenderingReq, opts ...grpc.CallOption) (*PreviewRenderingResp, error)
}

type templateClient struct {
	cc *grpc.ClientConn
}

func NewTemplateClient(cc *grpc.ClientConn) TemplateClient {
	return &templateClient{cc}
}

func (c *templateClient) Render(ctx context.Context, in *RenderReq, opts ...grpc.CallOption) (*RenderResp, error) {
	out := new(RenderResp)
	err := grpc.Invoke(ctx, "/templateserver.Template/Render", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateClient) PreviewRendering(ctx context.Context, in *PreviewRenderingReq, opts ...grpc.CallOption) (*PreviewRenderingResp, error) {
	out := new(PreviewRenderingResp)
	err := grpc.Invoke(ctx, "/templateserver.Template/PreviewRendering", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Template service

type TemplateServer interface {
	Render(context.Context, *RenderReq) (*RenderResp, error)
	PreviewRendering(context.Context, *PreviewRenderingReq) (*PreviewRenderingResp, error)
}

func RegisterTemplateServer(s *grpc.Server, srv TemplateServer) {
	s.RegisterService(&_Template_serviceDesc, srv)
}

func _Template_Render_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateServer).Render(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/templateserver.Template/Render",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateServer).Render(ctx, req.(*RenderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Template_PreviewRendering_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PreviewRenderingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateServer).PreviewRendering(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/templateserver.Template/PreviewRendering",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateServer).PreviewRendering(ctx, req.(*PreviewRenderingReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Template_serviceDesc = grpc.ServiceDesc{
	ServiceName: "templateserver.Template",
	HandlerType: (*TemplateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Render",
			Handler:    _Template_Render_Handler,
		},
		{
			MethodName: "PreviewRendering",
			Handler:    _Template_PreviewRendering_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "templateserver.proto",
}

func init() { proto.RegisterFile("templateserver.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 342 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xb4, 0x52, 0xcd, 0x4e, 0x32, 0x31,
	0x14, 0xfd, 0xe6, 0x03, 0x06, 0xb8, 0x21, 0x48, 0x2a, 0x31, 0xe3, 0xac, 0xc8, 0xe8, 0x02, 0x17,
	0x40, 0x82, 0x4f, 0x60, 0x8c, 0x4b, 0x13, 0xd3, 0xb8, 0x37, 0xf3, 0x73, 0x25, 0x8d, 0x33, 0x6d,
	0x69, 0x2b, 0x3e, 0x81, 0x6b, 0xd7, 0xbe, 0x84, 0xcf, 0x68, 0xa6, 0xd3, 0x92, 0x80, 0x18, 0x17,
	0xc6, 0x55, 0xef, 0x39, 0xa7, 0x37, 0xf7, 0xdc, 0x1f, 0x18, 0x1b, 0xac, 0x64, 0x99, 0x1a, 0xd4,
	0xa8, 0x36, 0xa8, 0xe6, 0x52, 0x09, 0x23, 0xc8, 0x70, 0x97, 0x8d, 0x67, 0xd9, 0xd3, 0x2c, 0xd3,
	0xb9, 0x5c, 0x30, 0x6e, 0x50, 0xf1, 0xb4, 0x5c, 0xd8, 0x7f, 0xb9, 0x28, 0x17, 0xb9, 0xa8, 0x2a,
	0xc1, 0xdd, 0xd3, 0xa4, 0x27, 0xef, 0x01, 0xf4, 0x29, 0xf2, 0x02, 0x15, 0xc5, 0x35, 0x19, 0x41,
	0x4b, 0xe3, 0x3a, 0x0a, 0x26, 0xc1, 0xb4, 0x4d, 0xeb, 0xb0, 0x66, 0x32, 0x56, 0x44, 0xff, 0x27,
	0xc1, 0xb4, 0x4f, 0xeb, 0x90, 0x8c, 0xa1, 0x93, 0x4a, 0xc9, 0x8a, 0xa8, 0x65, 0xb9, 0x06, 0x90,
	0x18, 0x7a, 0xf9, 0xe3, 0x4a, 0xa3, 0x61, 0x45, 0xd4, 0xb6, 0xc2, 0x16, 0x5b, 0x4d, 0x54, 0x15,
	0xab, 0xb5, 0x8e, 0xd3, 0x1c, 0xae, 0x35, 0x21, 0x51, 0xa5, 0x46, 0xa8, 0x28, 0x6c, 0x34, 0x8f,
	0x93, 0x14, 0xc0, 0x5b, 0xd3, 0xf2, 0x80, 0xb7, 0x0b, 0xe8, 0xa2, 0x52, 0xd7, 0xa2, 0x40, 0xeb,
	0x6f, 0xb8, 0x3c, 0x9a, 0xbb, 0xde, 0x6e, 0x1a, 0x9a, 0x7a, 0x9d, 0x9c, 0x40, 0x88, 0x4a, 0xdd,
	0xea, 0x95, 0x73, 0xed, 0x50, 0xf2, 0x16, 0xc0, 0xf1, 0x9d, 0xc2, 0x0d, 0xc3, 0x97, 0xa6, 0x14,
	0xe3, 0xab, 0x5f, 0x0f, 0xc2, 0x6f, 0xc4, 0x0f, 0xc2, 0x63, 0x92, 0xc0, 0xc0, 0xc7, 0xf4, 0xb9,
	0x44, 0x37, 0x8c, 0x1d, 0x2e, 0x79, 0x0d, 0x60, 0xfc, 0xd5, 0xd1, 0x1f, 0xf5, 0x4f, 0x22, 0xe8,
	0xe6, 0x82, 0x1b, 0xe4, 0xc6, 0x9a, 0x1d, 0x50, 0x0f, 0x97, 0x1f, 0x01, 0xf4, 0xee, 0xbd, 0xf1,
	0x2b, 0x08, 0x1b, 0x33, 0xe4, 0x74, 0xbe, 0x77, 0x85, 0xdb, 0xe3, 0x89, 0xe3, 0xef, 0x24, 0x2d,
	0x93, 0x7f, 0xe4, 0x01, 0x46, 0xfb, 0x6d, 0x91, 0xb3, 0xfd, 0x8c, 0x03, 0xab, 0x88, 0xcf, 0x7f,
	0xfe, 0x54, 0x17, 0xc8, 0x42, 0x7b, 0xd0, 0x97, 0x9f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x94, 0xa3,
	0x45, 0xc1, 0x27, 0x03, 0x00, 0x00,
}
