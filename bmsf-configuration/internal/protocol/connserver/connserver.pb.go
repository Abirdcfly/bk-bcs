// Code generated by protoc-gen-go.
// source: connserver.proto
// DO NOT EDIT!

/*
Package connserver is a generated protocol buffer package.

It is generated from these files:
	connserver.proto

It has these top-level messages:
	QueryAppMetadataReq
	QueryAppMetadataResp
	AccessReq
	AccessResp
	SCCMDPing
	SCCMDPushNotification
	SCCMDPushRollbackNotification
	SCCMDPushReloadNotification
	SignallingChannelDownStream
	SignallingChannelUpStream
	ReportReq
	ReportResp
	PullReleaseReq
	PullReleaseResp
	PullReleaseConfigsReq
	PullReleaseConfigsResp
	PullConfigSetListReq
	PullConfigSetListResp
*/
package connserver

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "bk-bscp/internal/protocol/common"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SignallingChannelCmd int32

const (
	SignallingChannelCmd_SCCMD_C2S_PING                       SignallingChannelCmd = 0
	SignallingChannelCmd_SCCMD_S2C_PONG                       SignallingChannelCmd = 1
	SignallingChannelCmd_SCCMD_S2C_PUSH_NOTIFICATION          SignallingChannelCmd = 2
	SignallingChannelCmd_SCCMD_S2C_PUSH_ROLLBACK_NOTIFICATION SignallingChannelCmd = 3
	SignallingChannelCmd_SCCMD_S2C_PUSH_RELOAD_NOTIFICATION   SignallingChannelCmd = 4
)

var SignallingChannelCmd_name = map[int32]string{
	0: "SCCMD_C2S_PING",
	1: "SCCMD_S2C_PONG",
	2: "SCCMD_S2C_PUSH_NOTIFICATION",
	3: "SCCMD_S2C_PUSH_ROLLBACK_NOTIFICATION",
	4: "SCCMD_S2C_PUSH_RELOAD_NOTIFICATION",
}
var SignallingChannelCmd_value = map[string]int32{
	"SCCMD_C2S_PING":                       0,
	"SCCMD_S2C_PONG":                       1,
	"SCCMD_S2C_PUSH_NOTIFICATION":          2,
	"SCCMD_S2C_PUSH_ROLLBACK_NOTIFICATION": 3,
	"SCCMD_S2C_PUSH_RELOAD_NOTIFICATION":   4,
}

func (x SignallingChannelCmd) String() string {
	return proto.EnumName(SignallingChannelCmd_name, int32(x))
}
func (SignallingChannelCmd) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type QueryAppMetadataReq struct {
	Seq          uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	BusinessName string `protobuf:"bytes,2,opt,name=businessName" json:"businessName,omitempty"`
	AppName      string `protobuf:"bytes,3,opt,name=appName" json:"appName,omitempty"`
	ClusterName  string `protobuf:"bytes,4,opt,name=clusterName" json:"clusterName,omitempty"`
	ZoneName     string `protobuf:"bytes,5,opt,name=zoneName" json:"zoneName,omitempty"`
	// add fields here.
	ClusterLabels string `protobuf:"bytes,6,opt,name=clusterLabels" json:"clusterLabels,omitempty"`
}

func (m *QueryAppMetadataReq) Reset()                    { *m = QueryAppMetadataReq{} }
func (m *QueryAppMetadataReq) String() string            { return proto.CompactTextString(m) }
func (*QueryAppMetadataReq) ProtoMessage()               {}
func (*QueryAppMetadataReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *QueryAppMetadataReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryAppMetadataReq) GetBusinessName() string {
	if m != nil {
		return m.BusinessName
	}
	return ""
}

func (m *QueryAppMetadataReq) GetAppName() string {
	if m != nil {
		return m.AppName
	}
	return ""
}

func (m *QueryAppMetadataReq) GetClusterName() string {
	if m != nil {
		return m.ClusterName
	}
	return ""
}

func (m *QueryAppMetadataReq) GetZoneName() string {
	if m != nil {
		return m.ZoneName
	}
	return ""
}

func (m *QueryAppMetadataReq) GetClusterLabels() string {
	if m != nil {
		return m.ClusterLabels
	}
	return ""
}

type QueryAppMetadataResp struct {
	Seq       uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode   common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg    string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	Bid       string         `protobuf:"bytes,4,opt,name=bid" json:"bid,omitempty"`
	Appid     string         `protobuf:"bytes,5,opt,name=appid" json:"appid,omitempty"`
	Clusterid string         `protobuf:"bytes,6,opt,name=clusterid" json:"clusterid,omitempty"`
	Zoneid    string         `protobuf:"bytes,7,opt,name=zoneid" json:"zoneid,omitempty"`
}

func (m *QueryAppMetadataResp) Reset()                    { *m = QueryAppMetadataResp{} }
func (m *QueryAppMetadataResp) String() string            { return proto.CompactTextString(m) }
func (*QueryAppMetadataResp) ProtoMessage()               {}
func (*QueryAppMetadataResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *QueryAppMetadataResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryAppMetadataResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *QueryAppMetadataResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *QueryAppMetadataResp) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *QueryAppMetadataResp) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

func (m *QueryAppMetadataResp) GetClusterid() string {
	if m != nil {
		return m.Clusterid
	}
	return ""
}

func (m *QueryAppMetadataResp) GetZoneid() string {
	if m != nil {
		return m.Zoneid
	}
	return ""
}

type AccessReq struct {
	Seq       uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid       string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Appid     string `protobuf:"bytes,3,opt,name=appid" json:"appid,omitempty"`
	Clusterid string `protobuf:"bytes,4,opt,name=clusterid" json:"clusterid,omitempty"`
	Zoneid    string `protobuf:"bytes,5,opt,name=zoneid" json:"zoneid,omitempty"`
	Dc        string `protobuf:"bytes,6,opt,name=dc" json:"dc,omitempty"`
	IP        string `protobuf:"bytes,7,opt,name=IP" json:"IP,omitempty"`
	Labels    string `protobuf:"bytes,8,opt,name=labels" json:"labels,omitempty"`
}

func (m *AccessReq) Reset()                    { *m = AccessReq{} }
func (m *AccessReq) String() string            { return proto.CompactTextString(m) }
func (*AccessReq) ProtoMessage()               {}
func (*AccessReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *AccessReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *AccessReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *AccessReq) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

func (m *AccessReq) GetClusterid() string {
	if m != nil {
		return m.Clusterid
	}
	return ""
}

func (m *AccessReq) GetZoneid() string {
	if m != nil {
		return m.Zoneid
	}
	return ""
}

func (m *AccessReq) GetDc() string {
	if m != nil {
		return m.Dc
	}
	return ""
}

func (m *AccessReq) GetIP() string {
	if m != nil {
		return m.IP
	}
	return ""
}

func (m *AccessReq) GetLabels() string {
	if m != nil {
		return m.Labels
	}
	return ""
}

type AccessResp struct {
	Seq       uint64             `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode   common.ErrCode     `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg    string             `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	Endpoints []*common.Endpoint `protobuf:"bytes,4,rep,name=endpoints" json:"endpoints,omitempty"`
}

func (m *AccessResp) Reset()                    { *m = AccessResp{} }
func (m *AccessResp) String() string            { return proto.CompactTextString(m) }
func (*AccessResp) ProtoMessage()               {}
func (*AccessResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *AccessResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *AccessResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *AccessResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *AccessResp) GetEndpoints() []*common.Endpoint {
	if m != nil {
		return m.Endpoints
	}
	return nil
}

type SCCMDPing struct {
	Bid       string `protobuf:"bytes,1,opt,name=bid" json:"bid,omitempty"`
	Appid     string `protobuf:"bytes,2,opt,name=appid" json:"appid,omitempty"`
	Clusterid string `protobuf:"bytes,3,opt,name=clusterid" json:"clusterid,omitempty"`
	Zoneid    string `protobuf:"bytes,4,opt,name=zoneid" json:"zoneid,omitempty"`
	Dc        string `protobuf:"bytes,5,opt,name=dc" json:"dc,omitempty"`
	IP        string `protobuf:"bytes,6,opt,name=IP" json:"IP,omitempty"`
	Labels    string `protobuf:"bytes,7,opt,name=labels" json:"labels,omitempty"`
	Timeout   int64  `protobuf:"varint,8,opt,name=timeout" json:"timeout,omitempty"`
}

func (m *SCCMDPing) Reset()                    { *m = SCCMDPing{} }
func (m *SCCMDPing) String() string            { return proto.CompactTextString(m) }
func (*SCCMDPing) ProtoMessage()               {}
func (*SCCMDPing) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *SCCMDPing) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *SCCMDPing) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

func (m *SCCMDPing) GetClusterid() string {
	if m != nil {
		return m.Clusterid
	}
	return ""
}

func (m *SCCMDPing) GetZoneid() string {
	if m != nil {
		return m.Zoneid
	}
	return ""
}

func (m *SCCMDPing) GetDc() string {
	if m != nil {
		return m.Dc
	}
	return ""
}

func (m *SCCMDPing) GetIP() string {
	if m != nil {
		return m.IP
	}
	return ""
}

func (m *SCCMDPing) GetLabels() string {
	if m != nil {
		return m.Labels
	}
	return ""
}

func (m *SCCMDPing) GetTimeout() int64 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

type SCCMDPushNotification struct {
	Bid         string `protobuf:"bytes,1,opt,name=bid" json:"bid,omitempty"`
	Appid       string `protobuf:"bytes,2,opt,name=appid" json:"appid,omitempty"`
	Cfgsetid    string `protobuf:"bytes,3,opt,name=cfgsetid" json:"cfgsetid,omitempty"`
	CfgsetName  string `protobuf:"bytes,4,opt,name=cfgsetName" json:"cfgsetName,omitempty"`
	Serialno    uint64 `protobuf:"varint,5,opt,name=serialno" json:"serialno,omitempty"`
	Releaseid   string `protobuf:"bytes,6,opt,name=releaseid" json:"releaseid,omitempty"`
	CfgsetFpath string `protobuf:"bytes,7,opt,name=cfgsetFpath" json:"cfgsetFpath,omitempty"`
}

func (m *SCCMDPushNotification) Reset()                    { *m = SCCMDPushNotification{} }
func (m *SCCMDPushNotification) String() string            { return proto.CompactTextString(m) }
func (*SCCMDPushNotification) ProtoMessage()               {}
func (*SCCMDPushNotification) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *SCCMDPushNotification) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *SCCMDPushNotification) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

func (m *SCCMDPushNotification) GetCfgsetid() string {
	if m != nil {
		return m.Cfgsetid
	}
	return ""
}

func (m *SCCMDPushNotification) GetCfgsetName() string {
	if m != nil {
		return m.CfgsetName
	}
	return ""
}

func (m *SCCMDPushNotification) GetSerialno() uint64 {
	if m != nil {
		return m.Serialno
	}
	return 0
}

func (m *SCCMDPushNotification) GetReleaseid() string {
	if m != nil {
		return m.Releaseid
	}
	return ""
}

func (m *SCCMDPushNotification) GetCfgsetFpath() string {
	if m != nil {
		return m.CfgsetFpath
	}
	return ""
}

type SCCMDPushRollbackNotification struct {
	Bid         string `protobuf:"bytes,1,opt,name=bid" json:"bid,omitempty"`
	Appid       string `protobuf:"bytes,2,opt,name=appid" json:"appid,omitempty"`
	Cfgsetid    string `protobuf:"bytes,3,opt,name=cfgsetid" json:"cfgsetid,omitempty"`
	CfgsetName  string `protobuf:"bytes,4,opt,name=cfgsetName" json:"cfgsetName,omitempty"`
	Serialno    uint64 `protobuf:"varint,5,opt,name=serialno" json:"serialno,omitempty"`
	Releaseid   string `protobuf:"bytes,6,opt,name=releaseid" json:"releaseid,omitempty"`
	CfgsetFpath string `protobuf:"bytes,7,opt,name=cfgsetFpath" json:"cfgsetFpath,omitempty"`
}

func (m *SCCMDPushRollbackNotification) Reset()                    { *m = SCCMDPushRollbackNotification{} }
func (m *SCCMDPushRollbackNotification) String() string            { return proto.CompactTextString(m) }
func (*SCCMDPushRollbackNotification) ProtoMessage()               {}
func (*SCCMDPushRollbackNotification) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *SCCMDPushRollbackNotification) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *SCCMDPushRollbackNotification) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

func (m *SCCMDPushRollbackNotification) GetCfgsetid() string {
	if m != nil {
		return m.Cfgsetid
	}
	return ""
}

func (m *SCCMDPushRollbackNotification) GetCfgsetName() string {
	if m != nil {
		return m.CfgsetName
	}
	return ""
}

func (m *SCCMDPushRollbackNotification) GetSerialno() uint64 {
	if m != nil {
		return m.Serialno
	}
	return 0
}

func (m *SCCMDPushRollbackNotification) GetReleaseid() string {
	if m != nil {
		return m.Releaseid
	}
	return ""
}

func (m *SCCMDPushRollbackNotification) GetCfgsetFpath() string {
	if m != nil {
		return m.CfgsetFpath
	}
	return ""
}

type SCCMDPushReloadNotification struct {
	Bid        string             `protobuf:"bytes,1,opt,name=bid" json:"bid,omitempty"`
	Appid      string             `protobuf:"bytes,2,opt,name=appid" json:"appid,omitempty"`
	ReloadSpec *common.ReloadSpec `protobuf:"bytes,3,opt,name=reloadSpec" json:"reloadSpec,omitempty"`
}

func (m *SCCMDPushReloadNotification) Reset()                    { *m = SCCMDPushReloadNotification{} }
func (m *SCCMDPushReloadNotification) String() string            { return proto.CompactTextString(m) }
func (*SCCMDPushReloadNotification) ProtoMessage()               {}
func (*SCCMDPushReloadNotification) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *SCCMDPushReloadNotification) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *SCCMDPushReloadNotification) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

func (m *SCCMDPushReloadNotification) GetReloadSpec() *common.ReloadSpec {
	if m != nil {
		return m.ReloadSpec
	}
	return nil
}

type SignallingChannelDownStream struct {
	Seq     uint64               `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Cmd     SignallingChannelCmd `protobuf:"varint,2,opt,name=cmd,enum=connserver.SignallingChannelCmd" json:"cmd,omitempty"`
	CmdPing *SCCMDPing           `protobuf:"bytes,3,opt,name=cmdPing" json:"cmdPing,omitempty"`
}

func (m *SignallingChannelDownStream) Reset()                    { *m = SignallingChannelDownStream{} }
func (m *SignallingChannelDownStream) String() string            { return proto.CompactTextString(m) }
func (*SignallingChannelDownStream) ProtoMessage()               {}
func (*SignallingChannelDownStream) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *SignallingChannelDownStream) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *SignallingChannelDownStream) GetCmd() SignallingChannelCmd {
	if m != nil {
		return m.Cmd
	}
	return SignallingChannelCmd_SCCMD_C2S_PING
}

func (m *SignallingChannelDownStream) GetCmdPing() *SCCMDPing {
	if m != nil {
		return m.CmdPing
	}
	return nil
}

type SignallingChannelUpStream struct {
	Seq         uint64                         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Cmd         SignallingChannelCmd           `protobuf:"varint,2,opt,name=cmd,enum=connserver.SignallingChannelCmd" json:"cmd,omitempty"`
	CmdPush     *SCCMDPushNotification         `protobuf:"bytes,3,opt,name=cmdPush" json:"cmdPush,omitempty"`
	CmdRollback *SCCMDPushRollbackNotification `protobuf:"bytes,4,opt,name=cmdRollback" json:"cmdRollback,omitempty"`
	CmdReload   *SCCMDPushReloadNotification   `protobuf:"bytes,5,opt,name=cmdReload" json:"cmdReload,omitempty"`
}

func (m *SignallingChannelUpStream) Reset()                    { *m = SignallingChannelUpStream{} }
func (m *SignallingChannelUpStream) String() string            { return proto.CompactTextString(m) }
func (*SignallingChannelUpStream) ProtoMessage()               {}
func (*SignallingChannelUpStream) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *SignallingChannelUpStream) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *SignallingChannelUpStream) GetCmd() SignallingChannelCmd {
	if m != nil {
		return m.Cmd
	}
	return SignallingChannelCmd_SCCMD_C2S_PING
}

func (m *SignallingChannelUpStream) GetCmdPush() *SCCMDPushNotification {
	if m != nil {
		return m.CmdPush
	}
	return nil
}

func (m *SignallingChannelUpStream) GetCmdRollback() *SCCMDPushRollbackNotification {
	if m != nil {
		return m.CmdRollback
	}
	return nil
}

func (m *SignallingChannelUpStream) GetCmdReload() *SCCMDPushReloadNotification {
	if m != nil {
		return m.CmdReload
	}
	return nil
}

type ReportReq struct {
	Seq       uint64               `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid       string               `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Appid     string               `protobuf:"bytes,3,opt,name=appid" json:"appid,omitempty"`
	Clusterid string               `protobuf:"bytes,4,opt,name=clusterid" json:"clusterid,omitempty"`
	Zoneid    string               `protobuf:"bytes,5,opt,name=zoneid" json:"zoneid,omitempty"`
	Dc        string               `protobuf:"bytes,6,opt,name=dc" json:"dc,omitempty"`
	IP        string               `protobuf:"bytes,7,opt,name=IP" json:"IP,omitempty"`
	Labels    string               `protobuf:"bytes,8,opt,name=labels" json:"labels,omitempty"`
	Infos     []*common.ReportInfo `protobuf:"bytes,9,rep,name=infos" json:"infos,omitempty"`
}

func (m *ReportReq) Reset()                    { *m = ReportReq{} }
func (m *ReportReq) String() string            { return proto.CompactTextString(m) }
func (*ReportReq) ProtoMessage()               {}
func (*ReportReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *ReportReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *ReportReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *ReportReq) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

func (m *ReportReq) GetClusterid() string {
	if m != nil {
		return m.Clusterid
	}
	return ""
}

func (m *ReportReq) GetZoneid() string {
	if m != nil {
		return m.Zoneid
	}
	return ""
}

func (m *ReportReq) GetDc() string {
	if m != nil {
		return m.Dc
	}
	return ""
}

func (m *ReportReq) GetIP() string {
	if m != nil {
		return m.IP
	}
	return ""
}

func (m *ReportReq) GetLabels() string {
	if m != nil {
		return m.Labels
	}
	return ""
}

func (m *ReportReq) GetInfos() []*common.ReportInfo {
	if m != nil {
		return m.Infos
	}
	return nil
}

type ReportResp struct {
	Seq     uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg  string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
}

func (m *ReportResp) Reset()                    { *m = ReportResp{} }
func (m *ReportResp) String() string            { return proto.CompactTextString(m) }
func (*ReportResp) ProtoMessage()               {}
func (*ReportResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *ReportResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *ReportResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *ReportResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type PullReleaseReq struct {
	Seq            uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid            string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Appid          string `protobuf:"bytes,3,opt,name=appid" json:"appid,omitempty"`
	Clusterid      string `protobuf:"bytes,4,opt,name=clusterid" json:"clusterid,omitempty"`
	Zoneid         string `protobuf:"bytes,5,opt,name=zoneid" json:"zoneid,omitempty"`
	Dc             string `protobuf:"bytes,6,opt,name=dc" json:"dc,omitempty"`
	IP             string `protobuf:"bytes,7,opt,name=IP" json:"IP,omitempty"`
	Labels         string `protobuf:"bytes,8,opt,name=labels" json:"labels,omitempty"`
	Cfgsetid       string `protobuf:"bytes,9,opt,name=cfgsetid" json:"cfgsetid,omitempty"`
	LocalReleaseid string `protobuf:"bytes,10,opt,name=localReleaseid" json:"localReleaseid,omitempty"`
	Releaseid      string `protobuf:"bytes,11,opt,name=releaseid" json:"releaseid,omitempty"`
}

func (m *PullReleaseReq) Reset()                    { *m = PullReleaseReq{} }
func (m *PullReleaseReq) String() string            { return proto.CompactTextString(m) }
func (*PullReleaseReq) ProtoMessage()               {}
func (*PullReleaseReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *PullReleaseReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *PullReleaseReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *PullReleaseReq) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

func (m *PullReleaseReq) GetClusterid() string {
	if m != nil {
		return m.Clusterid
	}
	return ""
}

func (m *PullReleaseReq) GetZoneid() string {
	if m != nil {
		return m.Zoneid
	}
	return ""
}

func (m *PullReleaseReq) GetDc() string {
	if m != nil {
		return m.Dc
	}
	return ""
}

func (m *PullReleaseReq) GetIP() string {
	if m != nil {
		return m.IP
	}
	return ""
}

func (m *PullReleaseReq) GetLabels() string {
	if m != nil {
		return m.Labels
	}
	return ""
}

func (m *PullReleaseReq) GetCfgsetid() string {
	if m != nil {
		return m.Cfgsetid
	}
	return ""
}

func (m *PullReleaseReq) GetLocalReleaseid() string {
	if m != nil {
		return m.LocalReleaseid
	}
	return ""
}

func (m *PullReleaseReq) GetReleaseid() string {
	if m != nil {
		return m.Releaseid
	}
	return ""
}

type PullReleaseResp struct {
	Seq        uint64          `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode    common.ErrCode  `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg     string          `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	NeedEffect bool            `protobuf:"varint,4,opt,name=needEffect" json:"needEffect,omitempty"`
	Release    *common.Release `protobuf:"bytes,5,opt,name=release" json:"release,omitempty"`
	Cid        string          `protobuf:"bytes,6,opt,name=cid" json:"cid,omitempty"`
	CfgLink    string          `protobuf:"bytes,7,opt,name=cfgLink" json:"cfgLink,omitempty"`
}

func (m *PullReleaseResp) Reset()                    { *m = PullReleaseResp{} }
func (m *PullReleaseResp) String() string            { return proto.CompactTextString(m) }
func (*PullReleaseResp) ProtoMessage()               {}
func (*PullReleaseResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *PullReleaseResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *PullReleaseResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *PullReleaseResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *PullReleaseResp) GetNeedEffect() bool {
	if m != nil {
		return m.NeedEffect
	}
	return false
}

func (m *PullReleaseResp) GetRelease() *common.Release {
	if m != nil {
		return m.Release
	}
	return nil
}

func (m *PullReleaseResp) GetCid() string {
	if m != nil {
		return m.Cid
	}
	return ""
}

func (m *PullReleaseResp) GetCfgLink() string {
	if m != nil {
		return m.CfgLink
	}
	return ""
}

type PullReleaseConfigsReq struct {
	Seq       uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid       string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Appid     string `protobuf:"bytes,3,opt,name=appid" json:"appid,omitempty"`
	Clusterid string `protobuf:"bytes,4,opt,name=clusterid" json:"clusterid,omitempty"`
	Zoneid    string `protobuf:"bytes,5,opt,name=zoneid" json:"zoneid,omitempty"`
	Cfgsetid  string `protobuf:"bytes,6,opt,name=cfgsetid" json:"cfgsetid,omitempty"`
	Releaseid string `protobuf:"bytes,7,opt,name=releaseid" json:"releaseid,omitempty"`
	Cid       string `protobuf:"bytes,8,opt,name=cid" json:"cid,omitempty"`
}

func (m *PullReleaseConfigsReq) Reset()                    { *m = PullReleaseConfigsReq{} }
func (m *PullReleaseConfigsReq) String() string            { return proto.CompactTextString(m) }
func (*PullReleaseConfigsReq) ProtoMessage()               {}
func (*PullReleaseConfigsReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *PullReleaseConfigsReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *PullReleaseConfigsReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *PullReleaseConfigsReq) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

func (m *PullReleaseConfigsReq) GetClusterid() string {
	if m != nil {
		return m.Clusterid
	}
	return ""
}

func (m *PullReleaseConfigsReq) GetZoneid() string {
	if m != nil {
		return m.Zoneid
	}
	return ""
}

func (m *PullReleaseConfigsReq) GetCfgsetid() string {
	if m != nil {
		return m.Cfgsetid
	}
	return ""
}

func (m *PullReleaseConfigsReq) GetReleaseid() string {
	if m != nil {
		return m.Releaseid
	}
	return ""
}

func (m *PullReleaseConfigsReq) GetCid() string {
	if m != nil {
		return m.Cid
	}
	return ""
}

type PullReleaseConfigsResp struct {
	Seq     uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg  string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	Cid     string         `protobuf:"bytes,4,opt,name=cid" json:"cid,omitempty"`
	CfgLink string         `protobuf:"bytes,5,opt,name=cfgLink" json:"cfgLink,omitempty"`
	Content []byte         `protobuf:"bytes,6,opt,name=content,proto3" json:"content,omitempty"`
}

func (m *PullReleaseConfigsResp) Reset()                    { *m = PullReleaseConfigsResp{} }
func (m *PullReleaseConfigsResp) String() string            { return proto.CompactTextString(m) }
func (*PullReleaseConfigsResp) ProtoMessage()               {}
func (*PullReleaseConfigsResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *PullReleaseConfigsResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *PullReleaseConfigsResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *PullReleaseConfigsResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *PullReleaseConfigsResp) GetCid() string {
	if m != nil {
		return m.Cid
	}
	return ""
}

func (m *PullReleaseConfigsResp) GetCfgLink() string {
	if m != nil {
		return m.CfgLink
	}
	return ""
}

func (m *PullReleaseConfigsResp) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

type PullConfigSetListReq struct {
	Seq   uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid   string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Appid string `protobuf:"bytes,3,opt,name=appid" json:"appid,omitempty"`
	Index int32  `protobuf:"varint,4,opt,name=index" json:"index,omitempty"`
	Limit int32  `protobuf:"varint,5,opt,name=limit" json:"limit,omitempty"`
}

func (m *PullConfigSetListReq) Reset()                    { *m = PullConfigSetListReq{} }
func (m *PullConfigSetListReq) String() string            { return proto.CompactTextString(m) }
func (*PullConfigSetListReq) ProtoMessage()               {}
func (*PullConfigSetListReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *PullConfigSetListReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *PullConfigSetListReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *PullConfigSetListReq) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

func (m *PullConfigSetListReq) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *PullConfigSetListReq) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type PullConfigSetListResp struct {
	Seq        uint64              `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode    common.ErrCode      `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg     string              `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	ConfigSets []*common.ConfigSet `protobuf:"bytes,4,rep,name=configSets" json:"configSets,omitempty"`
}

func (m *PullConfigSetListResp) Reset()                    { *m = PullConfigSetListResp{} }
func (m *PullConfigSetListResp) String() string            { return proto.CompactTextString(m) }
func (*PullConfigSetListResp) ProtoMessage()               {}
func (*PullConfigSetListResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *PullConfigSetListResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *PullConfigSetListResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *PullConfigSetListResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *PullConfigSetListResp) GetConfigSets() []*common.ConfigSet {
	if m != nil {
		return m.ConfigSets
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryAppMetadataReq)(nil), "connserver.QueryAppMetadataReq")
	proto.RegisterType((*QueryAppMetadataResp)(nil), "connserver.QueryAppMetadataResp")
	proto.RegisterType((*AccessReq)(nil), "connserver.AccessReq")
	proto.RegisterType((*AccessResp)(nil), "connserver.AccessResp")
	proto.RegisterType((*SCCMDPing)(nil), "connserver.SCCMDPing")
	proto.RegisterType((*SCCMDPushNotification)(nil), "connserver.SCCMDPushNotification")
	proto.RegisterType((*SCCMDPushRollbackNotification)(nil), "connserver.SCCMDPushRollbackNotification")
	proto.RegisterType((*SCCMDPushReloadNotification)(nil), "connserver.SCCMDPushReloadNotification")
	proto.RegisterType((*SignallingChannelDownStream)(nil), "connserver.SignallingChannelDownStream")
	proto.RegisterType((*SignallingChannelUpStream)(nil), "connserver.SignallingChannelUpStream")
	proto.RegisterType((*ReportReq)(nil), "connserver.ReportReq")
	proto.RegisterType((*ReportResp)(nil), "connserver.ReportResp")
	proto.RegisterType((*PullReleaseReq)(nil), "connserver.PullReleaseReq")
	proto.RegisterType((*PullReleaseResp)(nil), "connserver.PullReleaseResp")
	proto.RegisterType((*PullReleaseConfigsReq)(nil), "connserver.PullReleaseConfigsReq")
	proto.RegisterType((*PullReleaseConfigsResp)(nil), "connserver.PullReleaseConfigsResp")
	proto.RegisterType((*PullConfigSetListReq)(nil), "connserver.PullConfigSetListReq")
	proto.RegisterType((*PullConfigSetListResp)(nil), "connserver.PullConfigSetListResp")
	proto.RegisterEnum("connserver.SignallingChannelCmd", SignallingChannelCmd_name, SignallingChannelCmd_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Connection service

type ConnectionClient interface {
	QueryAppMetadata(ctx context.Context, in *QueryAppMetadataReq, opts ...grpc.CallOption) (*QueryAppMetadataResp, error)
	Access(ctx context.Context, in *AccessReq, opts ...grpc.CallOption) (*AccessResp, error)
	SignallingChannel(ctx context.Context, opts ...grpc.CallOption) (Connection_SignallingChannelClient, error)
	Report(ctx context.Context, in *ReportReq, opts ...grpc.CallOption) (*ReportResp, error)
	PullRelease(ctx context.Context, in *PullReleaseReq, opts ...grpc.CallOption) (*PullReleaseResp, error)
	PullReleaseConfigs(ctx context.Context, in *PullReleaseConfigsReq, opts ...grpc.CallOption) (*PullReleaseConfigsResp, error)
	PullConfigSetList(ctx context.Context, in *PullConfigSetListReq, opts ...grpc.CallOption) (*PullConfigSetListResp, error)
}

type connectionClient struct {
	cc *grpc.ClientConn
}

func NewConnectionClient(cc *grpc.ClientConn) ConnectionClient {
	return &connectionClient{cc}
}

func (c *connectionClient) QueryAppMetadata(ctx context.Context, in *QueryAppMetadataReq, opts ...grpc.CallOption) (*QueryAppMetadataResp, error) {
	out := new(QueryAppMetadataResp)
	err := grpc.Invoke(ctx, "/connserver.Connection/QueryAppMetadata", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionClient) Access(ctx context.Context, in *AccessReq, opts ...grpc.CallOption) (*AccessResp, error) {
	out := new(AccessResp)
	err := grpc.Invoke(ctx, "/connserver.Connection/Access", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionClient) SignallingChannel(ctx context.Context, opts ...grpc.CallOption) (Connection_SignallingChannelClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Connection_serviceDesc.Streams[0], c.cc, "/connserver.Connection/SignallingChannel", opts...)
	if err != nil {
		return nil, err
	}
	x := &connectionSignallingChannelClient{stream}
	return x, nil
}

type Connection_SignallingChannelClient interface {
	Send(*SignallingChannelDownStream) error
	Recv() (*SignallingChannelUpStream, error)
	grpc.ClientStream
}

type connectionSignallingChannelClient struct {
	grpc.ClientStream
}

func (x *connectionSignallingChannelClient) Send(m *SignallingChannelDownStream) error {
	return x.ClientStream.SendMsg(m)
}

func (x *connectionSignallingChannelClient) Recv() (*SignallingChannelUpStream, error) {
	m := new(SignallingChannelUpStream)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *connectionClient) Report(ctx context.Context, in *ReportReq, opts ...grpc.CallOption) (*ReportResp, error) {
	out := new(ReportResp)
	err := grpc.Invoke(ctx, "/connserver.Connection/Report", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionClient) PullRelease(ctx context.Context, in *PullReleaseReq, opts ...grpc.CallOption) (*PullReleaseResp, error) {
	out := new(PullReleaseResp)
	err := grpc.Invoke(ctx, "/connserver.Connection/PullRelease", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionClient) PullReleaseConfigs(ctx context.Context, in *PullReleaseConfigsReq, opts ...grpc.CallOption) (*PullReleaseConfigsResp, error) {
	out := new(PullReleaseConfigsResp)
	err := grpc.Invoke(ctx, "/connserver.Connection/PullReleaseConfigs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionClient) PullConfigSetList(ctx context.Context, in *PullConfigSetListReq, opts ...grpc.CallOption) (*PullConfigSetListResp, error) {
	out := new(PullConfigSetListResp)
	err := grpc.Invoke(ctx, "/connserver.Connection/PullConfigSetList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Connection service

type ConnectionServer interface {
	QueryAppMetadata(context.Context, *QueryAppMetadataReq) (*QueryAppMetadataResp, error)
	Access(context.Context, *AccessReq) (*AccessResp, error)
	SignallingChannel(Connection_SignallingChannelServer) error
	Report(context.Context, *ReportReq) (*ReportResp, error)
	PullRelease(context.Context, *PullReleaseReq) (*PullReleaseResp, error)
	PullReleaseConfigs(context.Context, *PullReleaseConfigsReq) (*PullReleaseConfigsResp, error)
	PullConfigSetList(context.Context, *PullConfigSetListReq) (*PullConfigSetListResp, error)
}

func RegisterConnectionServer(s *grpc.Server, srv ConnectionServer) {
	s.RegisterService(&_Connection_serviceDesc, srv)
}

func _Connection_QueryAppMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAppMetadataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionServer).QueryAppMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connserver.Connection/QueryAppMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionServer).QueryAppMetadata(ctx, req.(*QueryAppMetadataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Connection_Access_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccessReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionServer).Access(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connserver.Connection/Access",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionServer).Access(ctx, req.(*AccessReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Connection_SignallingChannel_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ConnectionServer).SignallingChannel(&connectionSignallingChannelServer{stream})
}

type Connection_SignallingChannelServer interface {
	Send(*SignallingChannelUpStream) error
	Recv() (*SignallingChannelDownStream, error)
	grpc.ServerStream
}

type connectionSignallingChannelServer struct {
	grpc.ServerStream
}

func (x *connectionSignallingChannelServer) Send(m *SignallingChannelUpStream) error {
	return x.ServerStream.SendMsg(m)
}

func (x *connectionSignallingChannelServer) Recv() (*SignallingChannelDownStream, error) {
	m := new(SignallingChannelDownStream)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Connection_Report_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionServer).Report(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connserver.Connection/Report",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionServer).Report(ctx, req.(*ReportReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Connection_PullRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PullReleaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionServer).PullRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connserver.Connection/PullRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionServer).PullRelease(ctx, req.(*PullReleaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Connection_PullReleaseConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PullReleaseConfigsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionServer).PullReleaseConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connserver.Connection/PullReleaseConfigs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionServer).PullReleaseConfigs(ctx, req.(*PullReleaseConfigsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Connection_PullConfigSetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PullConfigSetListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionServer).PullConfigSetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connserver.Connection/PullConfigSetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionServer).PullConfigSetList(ctx, req.(*PullConfigSetListReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Connection_serviceDesc = grpc.ServiceDesc{
	ServiceName: "connserver.Connection",
	HandlerType: (*ConnectionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryAppMetadata",
			Handler:    _Connection_QueryAppMetadata_Handler,
		},
		{
			MethodName: "Access",
			Handler:    _Connection_Access_Handler,
		},
		{
			MethodName: "Report",
			Handler:    _Connection_Report_Handler,
		},
		{
			MethodName: "PullRelease",
			Handler:    _Connection_PullRelease_Handler,
		},
		{
			MethodName: "PullReleaseConfigs",
			Handler:    _Connection_PullReleaseConfigs_Handler,
		},
		{
			MethodName: "PullConfigSetList",
			Handler:    _Connection_PullConfigSetList_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SignallingChannel",
			Handler:       _Connection_SignallingChannel_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "connserver.proto",
}

func init() { proto.RegisterFile("connserver.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1192 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xdc, 0x58, 0x4f, 0x6f, 0x1b, 0x45,
	0x14, 0xcf, 0xfa, 0x6f, 0xfc, 0x5c, 0x12, 0x67, 0x48, 0x22, 0xe3, 0x40, 0xeb, 0xac, 0x4a, 0xeb,
	0x22, 0x35, 0x01, 0x73, 0x42, 0x9c, 0x82, 0x93, 0xb6, 0x56, 0x1d, 0xc7, 0x8c, 0x5b, 0x21, 0x21,
	0xa1, 0x68, 0xbd, 0x3b, 0x76, 0x46, 0x59, 0xcf, 0x6c, 0x77, 0xd7, 0x40, 0x11, 0x5f, 0x02, 0x89,
	0x13, 0x17, 0x3e, 0x03, 0x70, 0xe4, 0x13, 0x20, 0x8e, 0x1c, 0x38, 0x21, 0xbe, 0x0a, 0x9a, 0xd9,
	0xd9, 0xbf, 0x5e, 0xa7, 0x08, 0x88, 0x50, 0x7b, 0x8a, 0xdf, 0xdf, 0xf9, 0xfd, 0xde, 0xcc, 0x9b,
	0x37, 0x1b, 0x68, 0x98, 0x9c, 0x31, 0x8f, 0xb8, 0x9f, 0x13, 0xf7, 0xc0, 0x71, 0xb9, 0xcf, 0x11,
	0xc4, 0x9a, 0xd6, 0xfd, 0xc9, 0xe5, 0xfd, 0x89, 0x67, 0x3a, 0x87, 0x94, 0xf9, 0xc4, 0x65, 0x86,
	0x7d, 0x28, 0x7d, 0x4c, 0x6e, 0x1f, 0x9a, 0x7c, 0x3e, 0xe7, 0x4c, 0xfd, 0x09, 0x42, 0xf5, 0x5f,
	0x34, 0x78, 0xfd, 0xe3, 0x05, 0x71, 0x9f, 0x1f, 0x39, 0xce, 0x29, 0xf1, 0x0d, 0xcb, 0xf0, 0x0d,
	0x4c, 0x9e, 0xa1, 0x06, 0x14, 0x3d, 0xf2, 0xac, 0xa9, 0xb5, 0xb5, 0x4e, 0x09, 0x8b, 0x9f, 0x48,
	0x87, 0x1b, 0x93, 0x85, 0x47, 0x19, 0xf1, 0xbc, 0xa1, 0x31, 0x27, 0xcd, 0x42, 0x5b, 0xeb, 0xd4,
	0x70, 0x4a, 0x87, 0x9a, 0x50, 0x35, 0x1c, 0x47, 0x9a, 0x8b, 0xd2, 0x1c, 0x8a, 0xa8, 0x0d, 0x75,
	0xd3, 0x5e, 0x78, 0x3e, 0x71, 0xa5, 0xb5, 0x24, 0xad, 0x49, 0x15, 0x6a, 0xc1, 0xfa, 0x57, 0x9c,
	0x11, 0x69, 0x2e, 0x4b, 0x73, 0x24, 0xa3, 0xdb, 0xf0, 0x9a, 0x72, 0x1d, 0x18, 0x13, 0x62, 0x7b,
	0xcd, 0x8a, 0x74, 0x48, 0x2b, 0x05, 0x97, 0xed, 0x65, 0x2e, 0x9e, 0x93, 0x43, 0xe6, 0x1e, 0x54,
	0x89, 0xeb, 0xf6, 0xb8, 0x15, 0xf0, 0xd8, 0xe8, 0x6e, 0x1e, 0xa8, 0xb2, 0x9c, 0x04, 0x6a, 0x1c,
	0xda, 0xd1, 0x2e, 0x54, 0x88, 0xeb, 0x9e, 0x7a, 0x33, 0x45, 0x49, 0x49, 0x22, 0xe9, 0x84, 0x5a,
	0x8a, 0x89, 0xf8, 0x89, 0xb6, 0xa1, 0x6c, 0x38, 0x0e, 0xb5, 0x14, 0xfc, 0x40, 0x40, 0x6f, 0x42,
	0x4d, 0xc1, 0xa4, 0x96, 0xc2, 0x1d, 0x2b, 0x44, 0x76, 0xc1, 0x92, 0x5a, 0xcd, 0x6a, 0x90, 0x3d,
	0x90, 0xf4, 0x9f, 0x34, 0xa8, 0x1d, 0x99, 0x26, 0xf1, 0xbc, 0xfc, 0xdd, 0x50, 0xab, 0x17, 0x72,
	0x56, 0x2f, 0xae, 0x5c, 0xbd, 0xb4, 0x7a, 0xf5, 0x72, 0x72, 0x75, 0xb4, 0x01, 0x05, 0xcb, 0x54,
	0x60, 0x0b, 0x96, 0x29, 0xe4, 0xfe, 0x48, 0x21, 0x2c, 0xf4, 0x47, 0x22, 0xce, 0x0e, 0x36, 0x62,
	0x3d, 0x88, 0x0b, 0x24, 0xfd, 0x1b, 0x0d, 0x20, 0x44, 0x7d, 0x5d, 0x75, 0x3f, 0x80, 0x1a, 0x61,
	0x96, 0xc3, 0x29, 0xf3, 0xbd, 0x66, 0xa9, 0x5d, 0xec, 0xd4, 0xbb, 0x8d, 0x28, 0x89, 0x32, 0xe0,
	0xd8, 0x45, 0xff, 0x59, 0x83, 0xda, 0xb8, 0xd7, 0x3b, 0x3d, 0x1e, 0x51, 0x16, 0xed, 0x9a, 0x96,
	0x53, 0xb7, 0xc2, 0xca, 0xba, 0x15, 0x57, 0xd7, 0xad, 0x94, 0x53, 0xb7, 0x72, 0xa6, 0x6e, 0x95,
	0x9c, 0xba, 0x55, 0x93, 0x75, 0x13, 0x7d, 0xe3, 0xd3, 0x39, 0xe1, 0x0b, 0x5f, 0x16, 0xb4, 0x88,
	0x43, 0x51, 0xff, 0x5d, 0x83, 0x9d, 0x00, 0xfd, 0xc2, 0xbb, 0x18, 0x72, 0x9f, 0x4e, 0xa9, 0x69,
	0xf8, 0x94, 0xb3, 0xbf, 0xcd, 0xa4, 0x05, 0xeb, 0xe6, 0x74, 0xe6, 0x11, 0x3f, 0x22, 0x12, 0xc9,
	0xe8, 0x26, 0x40, 0xf0, 0x3b, 0xd1, 0x94, 0x09, 0x8d, 0x88, 0xf5, 0x88, 0x4b, 0x0d, 0x9b, 0x71,
	0xc9, 0xaa, 0x84, 0x23, 0x59, 0x54, 0xc8, 0x25, 0x36, 0x31, 0x3c, 0x12, 0x9f, 0xeb, 0x48, 0x21,
	0xfb, 0x5d, 0xe6, 0x79, 0xe0, 0x18, 0xfe, 0x85, 0xa2, 0x9b, 0x54, 0xe9, 0x7f, 0x6a, 0xf0, 0x56,
	0xc4, 0x0c, 0x73, 0xdb, 0x9e, 0x18, 0xe6, 0xe5, 0x2b, 0xc5, 0xf0, 0x39, 0xec, 0xc5, 0x04, 0x89,
	0xcd, 0x0d, 0xeb, 0x1f, 0xd1, 0xeb, 0x02, 0xb8, 0x32, 0x7a, 0xec, 0x10, 0x53, 0x12, 0xac, 0x77,
	0x51, 0x78, 0xe2, 0x71, 0x64, 0xc1, 0x09, 0x2f, 0xfd, 0x5b, 0x0d, 0xf6, 0xc6, 0x74, 0xc6, 0x0c,
	0xdb, 0xa6, 0x6c, 0xd6, 0xbb, 0x30, 0x18, 0x23, 0xf6, 0x31, 0xff, 0x82, 0x8d, 0x7d, 0x97, 0x18,
	0xf3, 0x9c, 0xce, 0xec, 0x42, 0xd1, 0x9c, 0x5b, 0xaa, 0x2b, 0xdb, 0x07, 0x89, 0x19, 0xb3, 0x94,
	0xa7, 0x37, 0xb7, 0xb0, 0x70, 0x46, 0x87, 0x50, 0x35, 0xe7, 0x96, 0xe8, 0x2b, 0x05, 0x6b, 0x27,
	0x15, 0x17, 0x36, 0x1d, 0x0e, 0xbd, 0xf4, 0x1f, 0x0b, 0xf0, 0xc6, 0x52, 0xba, 0xa7, 0xce, 0x7f,
	0x0a, 0xea, 0xc3, 0x00, 0xd4, 0xc2, 0xbb, 0x50, 0xa0, 0xf6, 0x97, 0x41, 0x65, 0x7a, 0x09, 0x87,
	0x11, 0xe8, 0x31, 0xd4, 0xcd, 0xb9, 0x15, 0x9e, 0x46, 0x79, 0x5e, 0xea, 0xdd, 0x7b, 0xb9, 0x09,
	0xf2, 0x8e, 0x2c, 0x4e, 0x46, 0xa3, 0x13, 0xa8, 0x09, 0x51, 0xee, 0x8a, 0x3c, 0x5c, 0xf5, 0xee,
	0xdd, 0xfc, 0x54, 0x4b, 0x87, 0x03, 0xc7, 0x91, 0xfa, 0x1f, 0x1a, 0xd4, 0x30, 0x71, 0xb8, 0xeb,
	0xbf, 0x44, 0xa3, 0x00, 0x75, 0xa0, 0x4c, 0xd9, 0x94, 0x7b, 0xcd, 0x9a, 0xbc, 0xa2, 0x13, 0x07,
	0x56, 0x30, 0xe9, 0xb3, 0x29, 0xc7, 0x81, 0x83, 0x6e, 0x00, 0x84, 0xf4, 0xae, 0x69, 0x66, 0xe8,
	0xdf, 0x15, 0x60, 0x63, 0xb4, 0xb0, 0x6d, 0x1c, 0x74, 0xef, 0xcb, 0x54, 0xc7, 0xe4, 0xe5, 0x56,
	0xcb, 0x5c, 0x6e, 0x77, 0x60, 0xc3, 0xe6, 0xa6, 0x11, 0xd2, 0xa2, 0x56, 0x13, 0xa4, 0x47, 0x46,
	0x9b, 0xbe, 0xc8, 0xea, 0x99, 0x8b, 0x4c, 0x9c, 0xaf, 0xcd, 0x54, 0x71, 0xae, 0x6b, 0x72, 0xdf,
	0x04, 0x60, 0x84, 0x58, 0x27, 0xd3, 0x29, 0x31, 0x7d, 0x59, 0xb9, 0x75, 0x9c, 0xd0, 0x88, 0x25,
	0x14, 0x2a, 0xd5, 0x2d, 0x9b, 0x89, 0x5b, 0x4e, 0x42, 0x0b, 0xed, 0x02, 0x9f, 0x19, 0x5d, 0xca,
	0xe2, 0xa7, 0x18, 0xa1, 0xe6, 0x74, 0x36, 0xa0, 0xec, 0x52, 0x15, 0x35, 0x14, 0xf5, 0xdf, 0x34,
	0xd8, 0x49, 0xf0, 0xeb, 0x71, 0x36, 0xa5, 0xb3, 0xff, 0xe5, 0x59, 0x95, 0xdc, 0xcb, 0x4a, 0x66,
	0x2f, 0x53, 0x7b, 0x54, 0xcd, 0x0e, 0x1b, 0xc5, 0x77, 0x3d, 0xe2, 0x2b, 0x1e, 0x88, 0xbb, 0x79,
	0xac, 0xae, 0xf1, 0xb9, 0x6b, 0xc6, 0xcf, 0xdd, 0x4c, 0xc5, 0xcb, 0xa9, 0x8a, 0x4b, 0x0b, 0x67,
	0x3e, 0x61, 0xbe, 0xa4, 0x79, 0x03, 0x87, 0xa2, 0xfe, 0x35, 0x6c, 0x0b, 0xd0, 0x01, 0xda, 0x31,
	0xf1, 0x07, 0xd4, 0xfb, 0x97, 0xb7, 0xda, 0xb6, 0xb8, 0x67, 0x2c, 0xf2, 0xa5, 0x44, 0x56, 0xc6,
	0x81, 0x20, 0xb4, 0x36, 0x9d, 0x53, 0x5f, 0x22, 0x2b, 0xe3, 0x40, 0xd0, 0xbf, 0x57, 0x27, 0x21,
	0xb3, 0xfc, 0x75, 0x95, 0xec, 0x3d, 0x10, 0x1f, 0x66, 0xc1, 0x4a, 0xe1, 0x53, 0x75, 0x2b, 0xcc,
	0x12, 0x61, 0xc0, 0x09, 0xa7, 0x77, 0x7e, 0xd0, 0x60, 0x3b, 0x6f, 0xb4, 0x21, 0x04, 0x1b, 0x72,
	0x5c, 0x9c, 0xf7, 0xba, 0xe3, 0xf3, 0x51, 0x7f, 0xf8, 0xb0, 0xb1, 0x16, 0xeb, 0xc6, 0xdd, 0xde,
	0xf9, 0xe8, 0x6c, 0xf8, 0xb0, 0xa1, 0xa1, 0x5b, 0xea, 0xcd, 0x11, 0xe8, 0x9e, 0x8e, 0x1f, 0x9d,
	0x0f, 0xcf, 0x9e, 0xf4, 0x1f, 0xf4, 0x7b, 0x47, 0x4f, 0xfa, 0x67, 0xc3, 0x46, 0x01, 0x75, 0xe0,
	0x76, 0xc6, 0x01, 0x9f, 0x0d, 0x06, 0x1f, 0x1d, 0xf5, 0x1e, 0xa7, 0x3d, 0x8b, 0xe8, 0x0e, 0xe8,
	0x59, 0xcf, 0x93, 0xc1, 0xd9, 0xd1, 0x71, 0xda, 0xaf, 0xd4, 0xfd, 0xb5, 0x04, 0xd0, 0xe3, 0x8c,
	0x11, 0x53, 0x3e, 0x6b, 0x3e, 0x81, 0x46, 0xf6, 0x23, 0x0c, 0xdd, 0x4a, 0x8e, 0xbd, 0x9c, 0xcf,
	0xcd, 0x56, 0xfb, 0x6a, 0x07, 0xcf, 0xd1, 0xd7, 0xd0, 0x07, 0x50, 0x09, 0xbe, 0x2d, 0x50, 0xea,
	0x99, 0x11, 0x7d, 0x25, 0xb5, 0x76, 0xf3, 0xd4, 0x32, 0x94, 0xc2, 0xd6, 0x52, 0x55, 0xd1, 0xdd,
	0x2b, 0xdf, 0x13, 0xf1, 0x63, 0xa9, 0xf5, 0xf6, 0x95, 0x8e, 0xe1, 0xf3, 0x45, 0x5f, 0xeb, 0x68,
	0xef, 0x6a, 0x02, 0x65, 0x30, 0xcd, 0xd2, 0x28, 0xa3, 0x01, 0x9e, 0x46, 0x19, 0x0f, 0x3e, 0x7d,
	0x0d, 0x3d, 0x82, 0x7a, 0xa2, 0xa3, 0x51, 0x2b, 0xe9, 0x98, 0x9e, 0x5e, 0xad, 0xbd, 0x95, 0x36,
	0x99, 0xe9, 0x33, 0x40, 0xcb, 0x77, 0x03, 0xda, 0x5f, 0x11, 0x14, 0xdf, 0x88, 0x2d, 0xfd, 0x45,
	0x2e, 0x32, 0xfd, 0xa7, 0xb0, 0xb5, 0xd4, 0x46, 0xa8, 0x9d, 0x0d, 0xcd, 0x36, 0x79, 0x6b, 0xff,
	0x05, 0x1e, 0x22, 0xf7, 0xa4, 0x22, 0xff, 0x2f, 0xf1, 0xfe, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff,
	0x27, 0x28, 0x28, 0xe8, 0xe6, 0x10, 0x00, 0x00,
}
