// Code generated by protoc-gen-go.
// source: datamanager.proto
// DO NOT EDIT!

/*
Package datamanager is a generated protocol buffer package.

It is generated from these files:
	datamanager.proto

It has these top-level messages:
	QueryAuthInfoReq
	QueryAuthInfoResp
	QueryAppMetadataReq
	QueryAppMetadataResp
	CreateBusinessReq
	CreateBusinessResp
	QueryBusinessReq
	QueryBusinessResp
	QueryBusinessListReq
	QueryBusinessListResp
	UpdateBusinessReq
	UpdateBusinessResp
	CreateAppReq
	CreateAppResp
	QueryAppReq
	QueryAppResp
	QueryAppListReq
	QueryAppListResp
	UpdateAppReq
	UpdateAppResp
	DeleteAppReq
	DeleteAppResp
	CreateClusterReq
	CreateClusterResp
	QueryClusterReq
	QueryClusterResp
	QueryClusterListReq
	QueryClusterListResp
	UpdateClusterReq
	UpdateClusterResp
	DeleteClusterReq
	DeleteClusterResp
	CreateZoneReq
	CreateZoneResp
	QueryZoneReq
	QueryZoneResp
	QueryZoneListReq
	QueryZoneListResp
	UpdateZoneReq
	UpdateZoneResp
	DeleteZoneReq
	DeleteZoneResp
	CreateConfigSetReq
	CreateConfigSetResp
	QueryConfigSetReq
	QueryConfigSetResp
	QueryConfigSetListReq
	QueryConfigSetListResp
	UpdateConfigSetReq
	UpdateConfigSetResp
	DeleteConfigSetReq
	DeleteConfigSetResp
	LockConfigSetReq
	LockConfigSetResp
	UnlockConfigSetReq
	UnlockConfigSetResp
	CreateConfigsReq
	CreateConfigsResp
	QueryConfigsReq
	QueryConfigsResp
	QueryReleaseConfigsReq
	QueryReleaseConfigsResp
	QueryConfigsListReq
	QueryConfigsListResp
	CreateCommitReq
	CreateCommitResp
	QueryCommitReq
	QueryCommitResp
	QueryHistoryCommitsReq
	QueryHistoryCommitsResp
	UpdateCommitReq
	UpdateCommitResp
	CancelCommitReq
	CancelCommitResp
	ConfirmCommitReq
	ConfirmCommitResp
	CreateMultiCommitReq
	CreateMultiCommitResp
	QueryMultiCommitReq
	QueryMultiCommitResp
	QueryHistoryMultiCommitsReq
	QueryHistoryMultiCommitsResp
	QueryMultiCommitSubListReq
	QueryMultiCommitSubListResp
	UpdateMultiCommitReq
	UpdateMultiCommitResp
	CancelMultiCommitReq
	CancelMultiCommitResp
	ConfirmMultiCommitReq
	ConfirmMultiCommitResp
	CreateReleaseReq
	CreateReleaseResp
	QueryReleaseReq
	QueryReleaseResp
	QueryNewestReleasesReq
	QueryNewestReleasesResp
	QueryHistoryReleasesReq
	QueryHistoryReleasesResp
	UpdateReleaseReq
	UpdateReleaseResp
	CancelReleaseReq
	CancelReleaseResp
	RollbackReleaseReq
	RollbackReleaseResp
	PublishReleaseReq
	PublishReleaseResp
	CreateMultiReleaseReq
	CreateMultiReleaseResp
	QueryMultiReleaseReq
	QueryMultiReleaseResp
	QueryHistoryMultiReleasesReq
	QueryHistoryMultiReleasesResp
	UpdateMultiReleaseReq
	UpdateMultiReleaseResp
	QueryMultiReleaseSubListReq
	QueryMultiReleaseSubListResp
	CancelMultiReleaseReq
	CancelMultiReleaseResp
	PublishMultiReleaseReq
	PublishMultiReleaseResp
	RollbackMultiReleaseReq
	RollbackMultiReleaseResp
	CreateAppInstanceReq
	CreateAppInstanceResp
	QueryHistoryAppInstancesReq
	QueryHistoryAppInstancesResp
	QueryReachableAppInstancesReq
	QueryReachableAppInstancesResp
	UpdateAppInstanceReq
	UpdateAppInstanceResp
	CreateAppInstanceReleaseReq
	CreateAppInstanceReleaseResp
	QueryAppInstanceReleaseReq
	QueryAppInstanceReleaseResp
	QueryMatchedAppInstancesReq
	QueryMatchedAppInstancesResp
	QueryEffectedAppInstancesReq
	QueryEffectedAppInstancesResp
	CreateStrategyReq
	CreateStrategyResp
	QueryStrategyReq
	QueryStrategyResp
	QueryStrategyListReq
	QueryStrategyListResp
	DeleteStrategyReq
	DeleteStrategyResp
	CreateShardingDBReq
	CreateShardingDBResp
	QueryShardingDBReq
	QueryShardingDBResp
	QueryShardingDBListReq
	QueryShardingDBListResp
	UpdateShardingDBReq
	UpdateShardingDBResp
	CreateShardingReq
	CreateShardingResp
	QueryShardingReq
	QueryShardingResp
	UpdateShardingReq
	UpdateShardingResp
	CreateAuditReq
	CreateAuditResp
	QueryAuditListReq
	QueryAuditListResp
*/
package datamanager

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "bk-bscp/internal/protocol/common"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type QueryAuthInfoReq struct {
	Seq uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
}

func (m *QueryAuthInfoReq) Reset()                    { *m = QueryAuthInfoReq{} }
func (m *QueryAuthInfoReq) String() string            { return proto.CompactTextString(m) }
func (*QueryAuthInfoReq) ProtoMessage()               {}
func (*QueryAuthInfoReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *QueryAuthInfoReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryAuthInfoReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

type QueryAuthInfoResp struct {
	Seq     uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg  string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	Auth    string         `protobuf:"bytes,4,opt,name=auth" json:"auth,omitempty"`
}

func (m *QueryAuthInfoResp) Reset()                    { *m = QueryAuthInfoResp{} }
func (m *QueryAuthInfoResp) String() string            { return proto.CompactTextString(m) }
func (*QueryAuthInfoResp) ProtoMessage()               {}
func (*QueryAuthInfoResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *QueryAuthInfoResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryAuthInfoResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *QueryAuthInfoResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *QueryAuthInfoResp) GetAuth() string {
	if m != nil {
		return m.Auth
	}
	return ""
}

type QueryAppMetadataReq struct {
	Seq          uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	BusinessName string `protobuf:"bytes,2,opt,name=businessName" json:"businessName,omitempty"`
	AppName      string `protobuf:"bytes,3,opt,name=appName" json:"appName,omitempty"`
	ClusterName  string `protobuf:"bytes,4,opt,name=clusterName" json:"clusterName,omitempty"`
	ZoneName     string `protobuf:"bytes,5,opt,name=zoneName" json:"zoneName,omitempty"`
	// add fields here.
	ClusterLabels string `protobuf:"bytes,6,opt,name=clusterLabels" json:"clusterLabels,omitempty"`
}

func (m *QueryAppMetadataReq) Reset()                    { *m = QueryAppMetadataReq{} }
func (m *QueryAppMetadataReq) String() string            { return proto.CompactTextString(m) }
func (*QueryAppMetadataReq) ProtoMessage()               {}
func (*QueryAppMetadataReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *QueryAppMetadataReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryAppMetadataReq) GetBusinessName() string {
	if m != nil {
		return m.BusinessName
	}
	return ""
}

func (m *QueryAppMetadataReq) GetAppName() string {
	if m != nil {
		return m.AppName
	}
	return ""
}

func (m *QueryAppMetadataReq) GetClusterName() string {
	if m != nil {
		return m.ClusterName
	}
	return ""
}

func (m *QueryAppMetadataReq) GetZoneName() string {
	if m != nil {
		return m.ZoneName
	}
	return ""
}

func (m *QueryAppMetadataReq) GetClusterLabels() string {
	if m != nil {
		return m.ClusterLabels
	}
	return ""
}

type QueryAppMetadataResp struct {
	Seq       uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode   common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg    string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	Bid       string         `protobuf:"bytes,4,opt,name=bid" json:"bid,omitempty"`
	Appid     string         `protobuf:"bytes,5,opt,name=appid" json:"appid,omitempty"`
	Clusterid string         `protobuf:"bytes,6,opt,name=clusterid" json:"clusterid,omitempty"`
	Zoneid    string         `protobuf:"bytes,7,opt,name=zoneid" json:"zoneid,omitempty"`
}

func (m *QueryAppMetadataResp) Reset()                    { *m = QueryAppMetadataResp{} }
func (m *QueryAppMetadataResp) String() string            { return proto.CompactTextString(m) }
func (*QueryAppMetadataResp) ProtoMessage()               {}
func (*QueryAppMetadataResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *QueryAppMetadataResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryAppMetadataResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *QueryAppMetadataResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *QueryAppMetadataResp) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *QueryAppMetadataResp) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

func (m *QueryAppMetadataResp) GetClusterid() string {
	if m != nil {
		return m.Clusterid
	}
	return ""
}

func (m *QueryAppMetadataResp) GetZoneid() string {
	if m != nil {
		return m.Zoneid
	}
	return ""
}

type CreateBusinessReq struct {
	Seq     uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid     string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Name    string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Depid   string `protobuf:"bytes,4,opt,name=depid" json:"depid,omitempty"`
	State   int32  `protobuf:"varint,5,opt,name=state" json:"state,omitempty"`
	Creator string `protobuf:"bytes,6,opt,name=creator" json:"creator,omitempty"`
	Memo    string `protobuf:"bytes,7,opt,name=memo" json:"memo,omitempty"`
	Auth    string `protobuf:"bytes,8,opt,name=auth" json:"auth,omitempty"`
}

func (m *CreateBusinessReq) Reset()                    { *m = CreateBusinessReq{} }
func (m *CreateBusinessReq) String() string            { return proto.CompactTextString(m) }
func (*CreateBusinessReq) ProtoMessage()               {}
func (*CreateBusinessReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *CreateBusinessReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *CreateBusinessReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *CreateBusinessReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateBusinessReq) GetDepid() string {
	if m != nil {
		return m.Depid
	}
	return ""
}

func (m *CreateBusinessReq) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *CreateBusinessReq) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *CreateBusinessReq) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *CreateBusinessReq) GetAuth() string {
	if m != nil {
		return m.Auth
	}
	return ""
}

type CreateBusinessResp struct {
	Seq     uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg  string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	Bid     string         `protobuf:"bytes,4,opt,name=bid" json:"bid,omitempty"`
}

func (m *CreateBusinessResp) Reset()                    { *m = CreateBusinessResp{} }
func (m *CreateBusinessResp) String() string            { return proto.CompactTextString(m) }
func (*CreateBusinessResp) ProtoMessage()               {}
func (*CreateBusinessResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *CreateBusinessResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *CreateBusinessResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *CreateBusinessResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *CreateBusinessResp) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

type QueryBusinessReq struct {
	Seq  uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid  string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Name string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
}

func (m *QueryBusinessReq) Reset()                    { *m = QueryBusinessReq{} }
func (m *QueryBusinessReq) String() string            { return proto.CompactTextString(m) }
func (*QueryBusinessReq) ProtoMessage()               {}
func (*QueryBusinessReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *QueryBusinessReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryBusinessReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *QueryBusinessReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type QueryBusinessResp struct {
	Seq      uint64           `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode  common.ErrCode   `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg   string           `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	Business *common.Business `protobuf:"bytes,4,opt,name=business" json:"business,omitempty"`
}

func (m *QueryBusinessResp) Reset()                    { *m = QueryBusinessResp{} }
func (m *QueryBusinessResp) String() string            { return proto.CompactTextString(m) }
func (*QueryBusinessResp) ProtoMessage()               {}
func (*QueryBusinessResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *QueryBusinessResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryBusinessResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *QueryBusinessResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *QueryBusinessResp) GetBusiness() *common.Business {
	if m != nil {
		return m.Business
	}
	return nil
}

type QueryBusinessListReq struct {
	Seq   uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Index int32  `protobuf:"varint,2,opt,name=index" json:"index,omitempty"`
	Limit int32  `protobuf:"varint,3,opt,name=limit" json:"limit,omitempty"`
}

func (m *QueryBusinessListReq) Reset()                    { *m = QueryBusinessListReq{} }
func (m *QueryBusinessListReq) String() string            { return proto.CompactTextString(m) }
func (*QueryBusinessListReq) ProtoMessage()               {}
func (*QueryBusinessListReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *QueryBusinessListReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryBusinessListReq) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *QueryBusinessListReq) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type QueryBusinessListResp struct {
	Seq        uint64             `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode    common.ErrCode     `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg     string             `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	Businesses []*common.Business `protobuf:"bytes,4,rep,name=businesses" json:"businesses,omitempty"`
}

func (m *QueryBusinessListResp) Reset()                    { *m = QueryBusinessListResp{} }
func (m *QueryBusinessListResp) String() string            { return proto.CompactTextString(m) }
func (*QueryBusinessListResp) ProtoMessage()               {}
func (*QueryBusinessListResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *QueryBusinessListResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryBusinessListResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *QueryBusinessListResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *QueryBusinessListResp) GetBusinesses() []*common.Business {
	if m != nil {
		return m.Businesses
	}
	return nil
}

type UpdateBusinessReq struct {
	Seq      uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid      string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Name     string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Depid    string `protobuf:"bytes,4,opt,name=depid" json:"depid,omitempty"`
	Memo     string `protobuf:"bytes,5,opt,name=memo" json:"memo,omitempty"`
	State    int32  `protobuf:"varint,6,opt,name=state" json:"state,omitempty"`
	Operator string `protobuf:"bytes,7,opt,name=operator" json:"operator,omitempty"`
}

func (m *UpdateBusinessReq) Reset()                    { *m = UpdateBusinessReq{} }
func (m *UpdateBusinessReq) String() string            { return proto.CompactTextString(m) }
func (*UpdateBusinessReq) ProtoMessage()               {}
func (*UpdateBusinessReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *UpdateBusinessReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *UpdateBusinessReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *UpdateBusinessReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateBusinessReq) GetDepid() string {
	if m != nil {
		return m.Depid
	}
	return ""
}

func (m *UpdateBusinessReq) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *UpdateBusinessReq) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *UpdateBusinessReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

type UpdateBusinessResp struct {
	Seq     uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg  string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
}

func (m *UpdateBusinessResp) Reset()                    { *m = UpdateBusinessResp{} }
func (m *UpdateBusinessResp) String() string            { return proto.CompactTextString(m) }
func (*UpdateBusinessResp) ProtoMessage()               {}
func (*UpdateBusinessResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *UpdateBusinessResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *UpdateBusinessResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *UpdateBusinessResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type CreateAppReq struct {
	Seq        uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid        string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Appid      string `protobuf:"bytes,3,opt,name=appid" json:"appid,omitempty"`
	Name       string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	DeployType int32  `protobuf:"varint,5,opt,name=deployType" json:"deployType,omitempty"`
	State      int32  `protobuf:"varint,6,opt,name=state" json:"state,omitempty"`
	Creator    string `protobuf:"bytes,7,opt,name=creator" json:"creator,omitempty"`
	Memo       string `protobuf:"bytes,8,opt,name=memo" json:"memo,omitempty"`
}

func (m *CreateAppReq) Reset()                    { *m = CreateAppReq{} }
func (m *CreateAppReq) String() string            { return proto.CompactTextString(m) }
func (*CreateAppReq) ProtoMessage()               {}
func (*CreateAppReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *CreateAppReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *CreateAppReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *CreateAppReq) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

func (m *CreateAppReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateAppReq) GetDeployType() int32 {
	if m != nil {
		return m.DeployType
	}
	return 0
}

func (m *CreateAppReq) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *CreateAppReq) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *CreateAppReq) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

type CreateAppResp struct {
	Seq     uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg  string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	Appid   string         `protobuf:"bytes,4,opt,name=appid" json:"appid,omitempty"`
}

func (m *CreateAppResp) Reset()                    { *m = CreateAppResp{} }
func (m *CreateAppResp) String() string            { return proto.CompactTextString(m) }
func (*CreateAppResp) ProtoMessage()               {}
func (*CreateAppResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *CreateAppResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *CreateAppResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *CreateAppResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *CreateAppResp) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

type QueryAppReq struct {
	Seq   uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid   string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Appid string `protobuf:"bytes,3,opt,name=appid" json:"appid,omitempty"`
	Name  string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
}

func (m *QueryAppReq) Reset()                    { *m = QueryAppReq{} }
func (m *QueryAppReq) String() string            { return proto.CompactTextString(m) }
func (*QueryAppReq) ProtoMessage()               {}
func (*QueryAppReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *QueryAppReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryAppReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *QueryAppReq) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

func (m *QueryAppReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type QueryAppResp struct {
	Seq     uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg  string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	App     *common.App    `protobuf:"bytes,4,opt,name=app" json:"app,omitempty"`
}

func (m *QueryAppResp) Reset()                    { *m = QueryAppResp{} }
func (m *QueryAppResp) String() string            { return proto.CompactTextString(m) }
func (*QueryAppResp) ProtoMessage()               {}
func (*QueryAppResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *QueryAppResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryAppResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *QueryAppResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *QueryAppResp) GetApp() *common.App {
	if m != nil {
		return m.App
	}
	return nil
}

type QueryAppListReq struct {
	Seq   uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid   string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Index int32  `protobuf:"varint,3,opt,name=index" json:"index,omitempty"`
	Limit int32  `protobuf:"varint,4,opt,name=limit" json:"limit,omitempty"`
}

func (m *QueryAppListReq) Reset()                    { *m = QueryAppListReq{} }
func (m *QueryAppListReq) String() string            { return proto.CompactTextString(m) }
func (*QueryAppListReq) ProtoMessage()               {}
func (*QueryAppListReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *QueryAppListReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryAppListReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *QueryAppListReq) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *QueryAppListReq) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type QueryAppListResp struct {
	Seq     uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg  string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	Apps    []*common.App  `protobuf:"bytes,4,rep,name=apps" json:"apps,omitempty"`
}

func (m *QueryAppListResp) Reset()                    { *m = QueryAppListResp{} }
func (m *QueryAppListResp) String() string            { return proto.CompactTextString(m) }
func (*QueryAppListResp) ProtoMessage()               {}
func (*QueryAppListResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *QueryAppListResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryAppListResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *QueryAppListResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *QueryAppListResp) GetApps() []*common.App {
	if m != nil {
		return m.Apps
	}
	return nil
}

type UpdateAppReq struct {
	Seq        uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid        string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Appid      string `protobuf:"bytes,3,opt,name=appid" json:"appid,omitempty"`
	Name       string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	DeployType int32  `protobuf:"varint,5,opt,name=deployType" json:"deployType,omitempty"`
	Memo       string `protobuf:"bytes,6,opt,name=memo" json:"memo,omitempty"`
	State      int32  `protobuf:"varint,7,opt,name=state" json:"state,omitempty"`
	Operator   string `protobuf:"bytes,8,opt,name=operator" json:"operator,omitempty"`
}

func (m *UpdateAppReq) Reset()                    { *m = UpdateAppReq{} }
func (m *UpdateAppReq) String() string            { return proto.CompactTextString(m) }
func (*UpdateAppReq) ProtoMessage()               {}
func (*UpdateAppReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *UpdateAppReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *UpdateAppReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *UpdateAppReq) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

func (m *UpdateAppReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateAppReq) GetDeployType() int32 {
	if m != nil {
		return m.DeployType
	}
	return 0
}

func (m *UpdateAppReq) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *UpdateAppReq) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *UpdateAppReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

type UpdateAppResp struct {
	Seq     uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg  string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
}

func (m *UpdateAppResp) Reset()                    { *m = UpdateAppResp{} }
func (m *UpdateAppResp) String() string            { return proto.CompactTextString(m) }
func (*UpdateAppResp) ProtoMessage()               {}
func (*UpdateAppResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *UpdateAppResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *UpdateAppResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *UpdateAppResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type DeleteAppReq struct {
	Seq      uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid      string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Appid    string `protobuf:"bytes,3,opt,name=appid" json:"appid,omitempty"`
	Operator string `protobuf:"bytes,4,opt,name=operator" json:"operator,omitempty"`
}

func (m *DeleteAppReq) Reset()                    { *m = DeleteAppReq{} }
func (m *DeleteAppReq) String() string            { return proto.CompactTextString(m) }
func (*DeleteAppReq) ProtoMessage()               {}
func (*DeleteAppReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *DeleteAppReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *DeleteAppReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *DeleteAppReq) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

func (m *DeleteAppReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

type DeleteAppResp struct {
	Seq     uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg  string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
}

func (m *DeleteAppResp) Reset()                    { *m = DeleteAppResp{} }
func (m *DeleteAppResp) String() string            { return proto.CompactTextString(m) }
func (*DeleteAppResp) ProtoMessage()               {}
func (*DeleteAppResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *DeleteAppResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *DeleteAppResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *DeleteAppResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type CreateClusterReq struct {
	Seq        uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid        string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Clusterid  string `protobuf:"bytes,3,opt,name=clusterid" json:"clusterid,omitempty"`
	Name       string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	Appid      string `protobuf:"bytes,5,opt,name=appid" json:"appid,omitempty"`
	RClusterid string `protobuf:"bytes,6,opt,name=rClusterid" json:"rClusterid,omitempty"`
	Creator    string `protobuf:"bytes,7,opt,name=creator" json:"creator,omitempty"`
	Memo       string `protobuf:"bytes,8,opt,name=memo" json:"memo,omitempty"`
	Labels     string `protobuf:"bytes,9,opt,name=labels" json:"labels,omitempty"`
}

func (m *CreateClusterReq) Reset()                    { *m = CreateClusterReq{} }
func (m *CreateClusterReq) String() string            { return proto.CompactTextString(m) }
func (*CreateClusterReq) ProtoMessage()               {}
func (*CreateClusterReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *CreateClusterReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *CreateClusterReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *CreateClusterReq) GetClusterid() string {
	if m != nil {
		return m.Clusterid
	}
	return ""
}

func (m *CreateClusterReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateClusterReq) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

func (m *CreateClusterReq) GetRClusterid() string {
	if m != nil {
		return m.RClusterid
	}
	return ""
}

func (m *CreateClusterReq) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *CreateClusterReq) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *CreateClusterReq) GetLabels() string {
	if m != nil {
		return m.Labels
	}
	return ""
}

type CreateClusterResp struct {
	Seq       uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode   common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg    string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	Clusterid string         `protobuf:"bytes,4,opt,name=clusterid" json:"clusterid,omitempty"`
}

func (m *CreateClusterResp) Reset()                    { *m = CreateClusterResp{} }
func (m *CreateClusterResp) String() string            { return proto.CompactTextString(m) }
func (*CreateClusterResp) ProtoMessage()               {}
func (*CreateClusterResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *CreateClusterResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *CreateClusterResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *CreateClusterResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *CreateClusterResp) GetClusterid() string {
	if m != nil {
		return m.Clusterid
	}
	return ""
}

type QueryClusterReq struct {
	Seq       uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid       string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Appid     string `protobuf:"bytes,3,opt,name=appid" json:"appid,omitempty"`
	Clusterid string `protobuf:"bytes,4,opt,name=clusterid" json:"clusterid,omitempty"`
	Name      string `protobuf:"bytes,5,opt,name=name" json:"name,omitempty"`
	Labels    string `protobuf:"bytes,6,opt,name=labels" json:"labels,omitempty"`
}

func (m *QueryClusterReq) Reset()                    { *m = QueryClusterReq{} }
func (m *QueryClusterReq) String() string            { return proto.CompactTextString(m) }
func (*QueryClusterReq) ProtoMessage()               {}
func (*QueryClusterReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *QueryClusterReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryClusterReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *QueryClusterReq) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

func (m *QueryClusterReq) GetClusterid() string {
	if m != nil {
		return m.Clusterid
	}
	return ""
}

func (m *QueryClusterReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *QueryClusterReq) GetLabels() string {
	if m != nil {
		return m.Labels
	}
	return ""
}

type QueryClusterResp struct {
	Seq     uint64          `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode common.ErrCode  `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg  string          `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	Cluster *common.Cluster `protobuf:"bytes,4,opt,name=cluster" json:"cluster,omitempty"`
}

func (m *QueryClusterResp) Reset()                    { *m = QueryClusterResp{} }
func (m *QueryClusterResp) String() string            { return proto.CompactTextString(m) }
func (*QueryClusterResp) ProtoMessage()               {}
func (*QueryClusterResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *QueryClusterResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryClusterResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *QueryClusterResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *QueryClusterResp) GetCluster() *common.Cluster {
	if m != nil {
		return m.Cluster
	}
	return nil
}

type QueryClusterListReq struct {
	Seq     uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid     string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Appid   string `protobuf:"bytes,3,opt,name=appid" json:"appid,omitempty"`
	AppName string `protobuf:"bytes,4,opt,name=appName" json:"appName,omitempty"`
	Index   int32  `protobuf:"varint,5,opt,name=index" json:"index,omitempty"`
	Limit   int32  `protobuf:"varint,6,opt,name=limit" json:"limit,omitempty"`
}

func (m *QueryClusterListReq) Reset()                    { *m = QueryClusterListReq{} }
func (m *QueryClusterListReq) String() string            { return proto.CompactTextString(m) }
func (*QueryClusterListReq) ProtoMessage()               {}
func (*QueryClusterListReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *QueryClusterListReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryClusterListReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *QueryClusterListReq) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

func (m *QueryClusterListReq) GetAppName() string {
	if m != nil {
		return m.AppName
	}
	return ""
}

func (m *QueryClusterListReq) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *QueryClusterListReq) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type QueryClusterListResp struct {
	Seq      uint64            `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode  common.ErrCode    `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg   string            `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	Clusters []*common.Cluster `protobuf:"bytes,4,rep,name=clusters" json:"clusters,omitempty"`
}

func (m *QueryClusterListResp) Reset()                    { *m = QueryClusterListResp{} }
func (m *QueryClusterListResp) String() string            { return proto.CompactTextString(m) }
func (*QueryClusterListResp) ProtoMessage()               {}
func (*QueryClusterListResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *QueryClusterListResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryClusterListResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *QueryClusterListResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *QueryClusterListResp) GetClusters() []*common.Cluster {
	if m != nil {
		return m.Clusters
	}
	return nil
}

type UpdateClusterReq struct {
	Seq        uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid        string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Clusterid  string `protobuf:"bytes,3,opt,name=clusterid" json:"clusterid,omitempty"`
	Name       string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	RClusterid string `protobuf:"bytes,5,opt,name=rClusterid" json:"rClusterid,omitempty"`
	Memo       string `protobuf:"bytes,6,opt,name=memo" json:"memo,omitempty"`
	State      int32  `protobuf:"varint,7,opt,name=state" json:"state,omitempty"`
	Operator   string `protobuf:"bytes,8,opt,name=operator" json:"operator,omitempty"`
	Labels     string `protobuf:"bytes,9,opt,name=labels" json:"labels,omitempty"`
}

func (m *UpdateClusterReq) Reset()                    { *m = UpdateClusterReq{} }
func (m *UpdateClusterReq) String() string            { return proto.CompactTextString(m) }
func (*UpdateClusterReq) ProtoMessage()               {}
func (*UpdateClusterReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *UpdateClusterReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *UpdateClusterReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *UpdateClusterReq) GetClusterid() string {
	if m != nil {
		return m.Clusterid
	}
	return ""
}

func (m *UpdateClusterReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateClusterReq) GetRClusterid() string {
	if m != nil {
		return m.RClusterid
	}
	return ""
}

func (m *UpdateClusterReq) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *UpdateClusterReq) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *UpdateClusterReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *UpdateClusterReq) GetLabels() string {
	if m != nil {
		return m.Labels
	}
	return ""
}

type UpdateClusterResp struct {
	Seq     uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg  string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
}

func (m *UpdateClusterResp) Reset()                    { *m = UpdateClusterResp{} }
func (m *UpdateClusterResp) String() string            { return proto.CompactTextString(m) }
func (*UpdateClusterResp) ProtoMessage()               {}
func (*UpdateClusterResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *UpdateClusterResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *UpdateClusterResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *UpdateClusterResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type DeleteClusterReq struct {
	Seq       uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid       string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Clusterid string `protobuf:"bytes,3,opt,name=clusterid" json:"clusterid,omitempty"`
	Operator  string `protobuf:"bytes,4,opt,name=operator" json:"operator,omitempty"`
}

func (m *DeleteClusterReq) Reset()                    { *m = DeleteClusterReq{} }
func (m *DeleteClusterReq) String() string            { return proto.CompactTextString(m) }
func (*DeleteClusterReq) ProtoMessage()               {}
func (*DeleteClusterReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *DeleteClusterReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *DeleteClusterReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *DeleteClusterReq) GetClusterid() string {
	if m != nil {
		return m.Clusterid
	}
	return ""
}

func (m *DeleteClusterReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

type DeleteClusterResp struct {
	Seq     uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg  string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
}

func (m *DeleteClusterResp) Reset()                    { *m = DeleteClusterResp{} }
func (m *DeleteClusterResp) String() string            { return proto.CompactTextString(m) }
func (*DeleteClusterResp) ProtoMessage()               {}
func (*DeleteClusterResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *DeleteClusterResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *DeleteClusterResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *DeleteClusterResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type CreateZoneReq struct {
	Seq       uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid       string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Zoneid    string `protobuf:"bytes,3,opt,name=zoneid" json:"zoneid,omitempty"`
	Name      string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	Appid     string `protobuf:"bytes,5,opt,name=appid" json:"appid,omitempty"`
	Clusterid string `protobuf:"bytes,6,opt,name=clusterid" json:"clusterid,omitempty"`
	State     int32  `protobuf:"varint,7,opt,name=state" json:"state,omitempty"`
	Creator   string `protobuf:"bytes,8,opt,name=creator" json:"creator,omitempty"`
	Memo      string `protobuf:"bytes,9,opt,name=memo" json:"memo,omitempty"`
}

func (m *CreateZoneReq) Reset()                    { *m = CreateZoneReq{} }
func (m *CreateZoneReq) String() string            { return proto.CompactTextString(m) }
func (*CreateZoneReq) ProtoMessage()               {}
func (*CreateZoneReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *CreateZoneReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *CreateZoneReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *CreateZoneReq) GetZoneid() string {
	if m != nil {
		return m.Zoneid
	}
	return ""
}

func (m *CreateZoneReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateZoneReq) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

func (m *CreateZoneReq) GetClusterid() string {
	if m != nil {
		return m.Clusterid
	}
	return ""
}

func (m *CreateZoneReq) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *CreateZoneReq) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *CreateZoneReq) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

type CreateZoneResp struct {
	Seq     uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg  string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	Zoneid  string         `protobuf:"bytes,4,opt,name=zoneid" json:"zoneid,omitempty"`
}

func (m *CreateZoneResp) Reset()                    { *m = CreateZoneResp{} }
func (m *CreateZoneResp) String() string            { return proto.CompactTextString(m) }
func (*CreateZoneResp) ProtoMessage()               {}
func (*CreateZoneResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *CreateZoneResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *CreateZoneResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *CreateZoneResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *CreateZoneResp) GetZoneid() string {
	if m != nil {
		return m.Zoneid
	}
	return ""
}

type QueryZoneReq struct {
	Seq    uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid    string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Appid  string `protobuf:"bytes,3,opt,name=appid" json:"appid,omitempty"`
	Zoneid string `protobuf:"bytes,4,opt,name=zoneid" json:"zoneid,omitempty"`
	Name   string `protobuf:"bytes,5,opt,name=name" json:"name,omitempty"`
}

func (m *QueryZoneReq) Reset()                    { *m = QueryZoneReq{} }
func (m *QueryZoneReq) String() string            { return proto.CompactTextString(m) }
func (*QueryZoneReq) ProtoMessage()               {}
func (*QueryZoneReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

func (m *QueryZoneReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryZoneReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *QueryZoneReq) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

func (m *QueryZoneReq) GetZoneid() string {
	if m != nil {
		return m.Zoneid
	}
	return ""
}

func (m *QueryZoneReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type QueryZoneResp struct {
	Seq     uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg  string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	Zone    *common.Zone   `protobuf:"bytes,4,opt,name=zone" json:"zone,omitempty"`
}

func (m *QueryZoneResp) Reset()                    { *m = QueryZoneResp{} }
func (m *QueryZoneResp) String() string            { return proto.CompactTextString(m) }
func (*QueryZoneResp) ProtoMessage()               {}
func (*QueryZoneResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

func (m *QueryZoneResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryZoneResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *QueryZoneResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *QueryZoneResp) GetZone() *common.Zone {
	if m != nil {
		return m.Zone
	}
	return nil
}

type QueryZoneListReq struct {
	Seq         uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid         string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Appid       string `protobuf:"bytes,3,opt,name=appid" json:"appid,omitempty"`
	ClusterName string `protobuf:"bytes,4,opt,name=clusterName" json:"clusterName,omitempty"`
	Clusterid   string `protobuf:"bytes,5,opt,name=clusterid" json:"clusterid,omitempty"`
	Index       int32  `protobuf:"varint,6,opt,name=index" json:"index,omitempty"`
	Limit       int32  `protobuf:"varint,7,opt,name=limit" json:"limit,omitempty"`
	// add fields here.
	ClusterLabels string `protobuf:"bytes,8,opt,name=clusterLabels" json:"clusterLabels,omitempty"`
}

func (m *QueryZoneListReq) Reset()                    { *m = QueryZoneListReq{} }
func (m *QueryZoneListReq) String() string            { return proto.CompactTextString(m) }
func (*QueryZoneListReq) ProtoMessage()               {}
func (*QueryZoneListReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

func (m *QueryZoneListReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryZoneListReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *QueryZoneListReq) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

func (m *QueryZoneListReq) GetClusterName() string {
	if m != nil {
		return m.ClusterName
	}
	return ""
}

func (m *QueryZoneListReq) GetClusterid() string {
	if m != nil {
		return m.Clusterid
	}
	return ""
}

func (m *QueryZoneListReq) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *QueryZoneListReq) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *QueryZoneListReq) GetClusterLabels() string {
	if m != nil {
		return m.ClusterLabels
	}
	return ""
}

type QueryZoneListResp struct {
	Seq     uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg  string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	Zones   []*common.Zone `protobuf:"bytes,4,rep,name=zones" json:"zones,omitempty"`
}

func (m *QueryZoneListResp) Reset()                    { *m = QueryZoneListResp{} }
func (m *QueryZoneListResp) String() string            { return proto.CompactTextString(m) }
func (*QueryZoneListResp) ProtoMessage()               {}
func (*QueryZoneListResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

func (m *QueryZoneListResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryZoneListResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *QueryZoneListResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *QueryZoneListResp) GetZones() []*common.Zone {
	if m != nil {
		return m.Zones
	}
	return nil
}

type UpdateZoneReq struct {
	Seq      uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid      string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Zoneid   string `protobuf:"bytes,3,opt,name=zoneid" json:"zoneid,omitempty"`
	Name     string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	Memo     string `protobuf:"bytes,5,opt,name=memo" json:"memo,omitempty"`
	State    int32  `protobuf:"varint,6,opt,name=state" json:"state,omitempty"`
	Operator string `protobuf:"bytes,7,opt,name=operator" json:"operator,omitempty"`
}

func (m *UpdateZoneReq) Reset()                    { *m = UpdateZoneReq{} }
func (m *UpdateZoneReq) String() string            { return proto.CompactTextString(m) }
func (*UpdateZoneReq) ProtoMessage()               {}
func (*UpdateZoneReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

func (m *UpdateZoneReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *UpdateZoneReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *UpdateZoneReq) GetZoneid() string {
	if m != nil {
		return m.Zoneid
	}
	return ""
}

func (m *UpdateZoneReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateZoneReq) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *UpdateZoneReq) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *UpdateZoneReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

type UpdateZoneResp struct {
	Seq     uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg  string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
}

func (m *UpdateZoneResp) Reset()                    { *m = UpdateZoneResp{} }
func (m *UpdateZoneResp) String() string            { return proto.CompactTextString(m) }
func (*UpdateZoneResp) ProtoMessage()               {}
func (*UpdateZoneResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{39} }

func (m *UpdateZoneResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *UpdateZoneResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *UpdateZoneResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type DeleteZoneReq struct {
	Seq      uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid      string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Zoneid   string `protobuf:"bytes,3,opt,name=zoneid" json:"zoneid,omitempty"`
	Operator string `protobuf:"bytes,4,opt,name=operator" json:"operator,omitempty"`
}

func (m *DeleteZoneReq) Reset()                    { *m = DeleteZoneReq{} }
func (m *DeleteZoneReq) String() string            { return proto.CompactTextString(m) }
func (*DeleteZoneReq) ProtoMessage()               {}
func (*DeleteZoneReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{40} }

func (m *DeleteZoneReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *DeleteZoneReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *DeleteZoneReq) GetZoneid() string {
	if m != nil {
		return m.Zoneid
	}
	return ""
}

func (m *DeleteZoneReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

type DeleteZoneResp struct {
	Seq     uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg  string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
}

func (m *DeleteZoneResp) Reset()                    { *m = DeleteZoneResp{} }
func (m *DeleteZoneResp) String() string            { return proto.CompactTextString(m) }
func (*DeleteZoneResp) ProtoMessage()               {}
func (*DeleteZoneResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{41} }

func (m *DeleteZoneResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *DeleteZoneResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *DeleteZoneResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type CreateConfigSetReq struct {
	Seq      uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid      string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Cfgsetid string `protobuf:"bytes,3,opt,name=cfgsetid" json:"cfgsetid,omitempty"`
	Name     string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	Appid    string `protobuf:"bytes,5,opt,name=appid" json:"appid,omitempty"`
	State    int32  `protobuf:"varint,6,opt,name=state" json:"state,omitempty"`
	Creator  string `protobuf:"bytes,7,opt,name=creator" json:"creator,omitempty"`
	Memo     string `protobuf:"bytes,8,opt,name=memo" json:"memo,omitempty"`
	Fpath    string `protobuf:"bytes,9,opt,name=fpath" json:"fpath,omitempty"`
}

func (m *CreateConfigSetReq) Reset()                    { *m = CreateConfigSetReq{} }
func (m *CreateConfigSetReq) String() string            { return proto.CompactTextString(m) }
func (*CreateConfigSetReq) ProtoMessage()               {}
func (*CreateConfigSetReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{42} }

func (m *CreateConfigSetReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *CreateConfigSetReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *CreateConfigSetReq) GetCfgsetid() string {
	if m != nil {
		return m.Cfgsetid
	}
	return ""
}

func (m *CreateConfigSetReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateConfigSetReq) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

func (m *CreateConfigSetReq) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *CreateConfigSetReq) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *CreateConfigSetReq) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *CreateConfigSetReq) GetFpath() string {
	if m != nil {
		return m.Fpath
	}
	return ""
}

type CreateConfigSetResp struct {
	Seq      uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode  common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg   string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	Cfgsetid string         `protobuf:"bytes,4,opt,name=cfgsetid" json:"cfgsetid,omitempty"`
}

func (m *CreateConfigSetResp) Reset()                    { *m = CreateConfigSetResp{} }
func (m *CreateConfigSetResp) String() string            { return proto.CompactTextString(m) }
func (*CreateConfigSetResp) ProtoMessage()               {}
func (*CreateConfigSetResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{43} }

func (m *CreateConfigSetResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *CreateConfigSetResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *CreateConfigSetResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *CreateConfigSetResp) GetCfgsetid() string {
	if m != nil {
		return m.Cfgsetid
	}
	return ""
}

type QueryConfigSetReq struct {
	Seq      uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid      string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Appid    string `protobuf:"bytes,3,opt,name=appid" json:"appid,omitempty"`
	Cfgsetid string `protobuf:"bytes,4,opt,name=cfgsetid" json:"cfgsetid,omitempty"`
	Name     string `protobuf:"bytes,5,opt,name=name" json:"name,omitempty"`
	Fpath    string `protobuf:"bytes,6,opt,name=fpath" json:"fpath,omitempty"`
}

func (m *QueryConfigSetReq) Reset()                    { *m = QueryConfigSetReq{} }
func (m *QueryConfigSetReq) String() string            { return proto.CompactTextString(m) }
func (*QueryConfigSetReq) ProtoMessage()               {}
func (*QueryConfigSetReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{44} }

func (m *QueryConfigSetReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryConfigSetReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *QueryConfigSetReq) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

func (m *QueryConfigSetReq) GetCfgsetid() string {
	if m != nil {
		return m.Cfgsetid
	}
	return ""
}

func (m *QueryConfigSetReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *QueryConfigSetReq) GetFpath() string {
	if m != nil {
		return m.Fpath
	}
	return ""
}

type QueryConfigSetResp struct {
	Seq       uint64            `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode   common.ErrCode    `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg    string            `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	ConfigSet *common.ConfigSet `protobuf:"bytes,4,opt,name=configSet" json:"configSet,omitempty"`
}

func (m *QueryConfigSetResp) Reset()                    { *m = QueryConfigSetResp{} }
func (m *QueryConfigSetResp) String() string            { return proto.CompactTextString(m) }
func (*QueryConfigSetResp) ProtoMessage()               {}
func (*QueryConfigSetResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{45} }

func (m *QueryConfigSetResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryConfigSetResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *QueryConfigSetResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *QueryConfigSetResp) GetConfigSet() *common.ConfigSet {
	if m != nil {
		return m.ConfigSet
	}
	return nil
}

type QueryConfigSetListReq struct {
	Seq     uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid     string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Appid   string `protobuf:"bytes,3,opt,name=appid" json:"appid,omitempty"`
	AppName string `protobuf:"bytes,4,opt,name=appName" json:"appName,omitempty"`
	Index   int32  `protobuf:"varint,5,opt,name=index" json:"index,omitempty"`
	Limit   int32  `protobuf:"varint,6,opt,name=limit" json:"limit,omitempty"`
}

func (m *QueryConfigSetListReq) Reset()                    { *m = QueryConfigSetListReq{} }
func (m *QueryConfigSetListReq) String() string            { return proto.CompactTextString(m) }
func (*QueryConfigSetListReq) ProtoMessage()               {}
func (*QueryConfigSetListReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{46} }

func (m *QueryConfigSetListReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryConfigSetListReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *QueryConfigSetListReq) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

func (m *QueryConfigSetListReq) GetAppName() string {
	if m != nil {
		return m.AppName
	}
	return ""
}

func (m *QueryConfigSetListReq) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *QueryConfigSetListReq) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type QueryConfigSetListResp struct {
	Seq        uint64              `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode    common.ErrCode      `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg     string              `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	ConfigSets []*common.ConfigSet `protobuf:"bytes,4,rep,name=configSets" json:"configSets,omitempty"`
}

func (m *QueryConfigSetListResp) Reset()                    { *m = QueryConfigSetListResp{} }
func (m *QueryConfigSetListResp) String() string            { return proto.CompactTextString(m) }
func (*QueryConfigSetListResp) ProtoMessage()               {}
func (*QueryConfigSetListResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{47} }

func (m *QueryConfigSetListResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryConfigSetListResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *QueryConfigSetListResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *QueryConfigSetListResp) GetConfigSets() []*common.ConfigSet {
	if m != nil {
		return m.ConfigSets
	}
	return nil
}

type UpdateConfigSetReq struct {
	Seq      uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid      string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Cfgsetid string `protobuf:"bytes,3,opt,name=cfgsetid" json:"cfgsetid,omitempty"`
	Name     string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	Memo     string `protobuf:"bytes,5,opt,name=memo" json:"memo,omitempty"`
	State    int32  `protobuf:"varint,6,opt,name=state" json:"state,omitempty"`
	Operator string `protobuf:"bytes,7,opt,name=operator" json:"operator,omitempty"`
	Fpath    string `protobuf:"bytes,8,opt,name=fpath" json:"fpath,omitempty"`
}

func (m *UpdateConfigSetReq) Reset()                    { *m = UpdateConfigSetReq{} }
func (m *UpdateConfigSetReq) String() string            { return proto.CompactTextString(m) }
func (*UpdateConfigSetReq) ProtoMessage()               {}
func (*UpdateConfigSetReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{48} }

func (m *UpdateConfigSetReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *UpdateConfigSetReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *UpdateConfigSetReq) GetCfgsetid() string {
	if m != nil {
		return m.Cfgsetid
	}
	return ""
}

func (m *UpdateConfigSetReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateConfigSetReq) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *UpdateConfigSetReq) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *UpdateConfigSetReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *UpdateConfigSetReq) GetFpath() string {
	if m != nil {
		return m.Fpath
	}
	return ""
}

type UpdateConfigSetResp struct {
	Seq     uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg  string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
}

func (m *UpdateConfigSetResp) Reset()                    { *m = UpdateConfigSetResp{} }
func (m *UpdateConfigSetResp) String() string            { return proto.CompactTextString(m) }
func (*UpdateConfigSetResp) ProtoMessage()               {}
func (*UpdateConfigSetResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{49} }

func (m *UpdateConfigSetResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *UpdateConfigSetResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *UpdateConfigSetResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type DeleteConfigSetReq struct {
	Seq      uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid      string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Cfgsetid string `protobuf:"bytes,3,opt,name=cfgsetid" json:"cfgsetid,omitempty"`
	Operator string `protobuf:"bytes,4,opt,name=operator" json:"operator,omitempty"`
}

func (m *DeleteConfigSetReq) Reset()                    { *m = DeleteConfigSetReq{} }
func (m *DeleteConfigSetReq) String() string            { return proto.CompactTextString(m) }
func (*DeleteConfigSetReq) ProtoMessage()               {}
func (*DeleteConfigSetReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{50} }

func (m *DeleteConfigSetReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *DeleteConfigSetReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *DeleteConfigSetReq) GetCfgsetid() string {
	if m != nil {
		return m.Cfgsetid
	}
	return ""
}

func (m *DeleteConfigSetReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

type DeleteConfigSetResp struct {
	Seq     uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg  string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
}

func (m *DeleteConfigSetResp) Reset()                    { *m = DeleteConfigSetResp{} }
func (m *DeleteConfigSetResp) String() string            { return proto.CompactTextString(m) }
func (*DeleteConfigSetResp) ProtoMessage()               {}
func (*DeleteConfigSetResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{51} }

func (m *DeleteConfigSetResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *DeleteConfigSetResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *DeleteConfigSetResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type LockConfigSetReq struct {
	Seq      uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid      string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Cfgsetid string `protobuf:"bytes,3,opt,name=cfgsetid" json:"cfgsetid,omitempty"`
	Operator string `protobuf:"bytes,4,opt,name=operator" json:"operator,omitempty"`
	Memo     string `protobuf:"bytes,5,opt,name=memo" json:"memo,omitempty"`
}

func (m *LockConfigSetReq) Reset()                    { *m = LockConfigSetReq{} }
func (m *LockConfigSetReq) String() string            { return proto.CompactTextString(m) }
func (*LockConfigSetReq) ProtoMessage()               {}
func (*LockConfigSetReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{52} }

func (m *LockConfigSetReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *LockConfigSetReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *LockConfigSetReq) GetCfgsetid() string {
	if m != nil {
		return m.Cfgsetid
	}
	return ""
}

func (m *LockConfigSetReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *LockConfigSetReq) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

type LockConfigSetResp struct {
	Seq      uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode  common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg   string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	Locker   string         `protobuf:"bytes,4,opt,name=locker" json:"locker,omitempty"`
	LockTime string         `protobuf:"bytes,5,opt,name=lockTime" json:"lockTime,omitempty"`
}

func (m *LockConfigSetResp) Reset()                    { *m = LockConfigSetResp{} }
func (m *LockConfigSetResp) String() string            { return proto.CompactTextString(m) }
func (*LockConfigSetResp) ProtoMessage()               {}
func (*LockConfigSetResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{53} }

func (m *LockConfigSetResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *LockConfigSetResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *LockConfigSetResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *LockConfigSetResp) GetLocker() string {
	if m != nil {
		return m.Locker
	}
	return ""
}

func (m *LockConfigSetResp) GetLockTime() string {
	if m != nil {
		return m.LockTime
	}
	return ""
}

type UnlockConfigSetReq struct {
	Seq      uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid      string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Cfgsetid string `protobuf:"bytes,3,opt,name=cfgsetid" json:"cfgsetid,omitempty"`
	Operator string `protobuf:"bytes,4,opt,name=operator" json:"operator,omitempty"`
}

func (m *UnlockConfigSetReq) Reset()                    { *m = UnlockConfigSetReq{} }
func (m *UnlockConfigSetReq) String() string            { return proto.CompactTextString(m) }
func (*UnlockConfigSetReq) ProtoMessage()               {}
func (*UnlockConfigSetReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{54} }

func (m *UnlockConfigSetReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *UnlockConfigSetReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *UnlockConfigSetReq) GetCfgsetid() string {
	if m != nil {
		return m.Cfgsetid
	}
	return ""
}

func (m *UnlockConfigSetReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

type UnlockConfigSetResp struct {
	Seq     uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg  string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
}

func (m *UnlockConfigSetResp) Reset()                    { *m = UnlockConfigSetResp{} }
func (m *UnlockConfigSetResp) String() string            { return proto.CompactTextString(m) }
func (*UnlockConfigSetResp) ProtoMessage()               {}
func (*UnlockConfigSetResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{55} }

func (m *UnlockConfigSetResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *UnlockConfigSetResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *UnlockConfigSetResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type CreateConfigsReq struct {
	Seq       uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid       string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Appid     string `protobuf:"bytes,3,opt,name=appid" json:"appid,omitempty"`
	Clusterid string `protobuf:"bytes,4,opt,name=clusterid" json:"clusterid,omitempty"`
	Zoneid    string `protobuf:"bytes,5,opt,name=zoneid" json:"zoneid,omitempty"`
	Cfgsetid  string `protobuf:"bytes,6,opt,name=cfgsetid" json:"cfgsetid,omitempty"`
	Commitid  string `protobuf:"bytes,7,opt,name=commitid" json:"commitid,omitempty"`
	Cid       string `protobuf:"bytes,8,opt,name=cid" json:"cid,omitempty"`
	CfgLink   string `protobuf:"bytes,9,opt,name=cfgLink" json:"cfgLink,omitempty"`
	Content   []byte `protobuf:"bytes,10,opt,name=content,proto3" json:"content,omitempty"`
	Creator   string `protobuf:"bytes,11,opt,name=creator" json:"creator,omitempty"`
	Memo      string `protobuf:"bytes,12,opt,name=memo" json:"memo,omitempty"`
	State     int32  `protobuf:"varint,13,opt,name=state" json:"state,omitempty"`
	Index     string `protobuf:"bytes,14,opt,name=index" json:"index,omitempty"`
}

func (m *CreateConfigsReq) Reset()                    { *m = CreateConfigsReq{} }
func (m *CreateConfigsReq) String() string            { return proto.CompactTextString(m) }
func (*CreateConfigsReq) ProtoMessage()               {}
func (*CreateConfigsReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{56} }

func (m *CreateConfigsReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *CreateConfigsReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *CreateConfigsReq) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

func (m *CreateConfigsReq) GetClusterid() string {
	if m != nil {
		return m.Clusterid
	}
	return ""
}

func (m *CreateConfigsReq) GetZoneid() string {
	if m != nil {
		return m.Zoneid
	}
	return ""
}

func (m *CreateConfigsReq) GetCfgsetid() string {
	if m != nil {
		return m.Cfgsetid
	}
	return ""
}

func (m *CreateConfigsReq) GetCommitid() string {
	if m != nil {
		return m.Commitid
	}
	return ""
}

func (m *CreateConfigsReq) GetCid() string {
	if m != nil {
		return m.Cid
	}
	return ""
}

func (m *CreateConfigsReq) GetCfgLink() string {
	if m != nil {
		return m.CfgLink
	}
	return ""
}

func (m *CreateConfigsReq) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *CreateConfigsReq) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *CreateConfigsReq) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *CreateConfigsReq) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *CreateConfigsReq) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type CreateConfigsResp struct {
	Seq     uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg  string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
}

func (m *CreateConfigsResp) Reset()                    { *m = CreateConfigsResp{} }
func (m *CreateConfigsResp) String() string            { return proto.CompactTextString(m) }
func (*CreateConfigsResp) ProtoMessage()               {}
func (*CreateConfigsResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{57} }

func (m *CreateConfigsResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *CreateConfigsResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *CreateConfigsResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type QueryConfigsReq struct {
	Seq       uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid       string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Appid     string `protobuf:"bytes,3,opt,name=appid" json:"appid,omitempty"`
	Clusterid string `protobuf:"bytes,4,opt,name=clusterid" json:"clusterid,omitempty"`
	Zoneid    string `protobuf:"bytes,5,opt,name=zoneid" json:"zoneid,omitempty"`
	Cfgsetid  string `protobuf:"bytes,6,opt,name=cfgsetid" json:"cfgsetid,omitempty"`
	Commitid  string `protobuf:"bytes,7,opt,name=commitid" json:"commitid,omitempty"`
	Index     string `protobuf:"bytes,8,opt,name=index" json:"index,omitempty"`
}

func (m *QueryConfigsReq) Reset()                    { *m = QueryConfigsReq{} }
func (m *QueryConfigsReq) String() string            { return proto.CompactTextString(m) }
func (*QueryConfigsReq) ProtoMessage()               {}
func (*QueryConfigsReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{58} }

func (m *QueryConfigsReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryConfigsReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *QueryConfigsReq) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

func (m *QueryConfigsReq) GetClusterid() string {
	if m != nil {
		return m.Clusterid
	}
	return ""
}

func (m *QueryConfigsReq) GetZoneid() string {
	if m != nil {
		return m.Zoneid
	}
	return ""
}

func (m *QueryConfigsReq) GetCfgsetid() string {
	if m != nil {
		return m.Cfgsetid
	}
	return ""
}

func (m *QueryConfigsReq) GetCommitid() string {
	if m != nil {
		return m.Commitid
	}
	return ""
}

func (m *QueryConfigsReq) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryConfigsResp struct {
	Seq     uint64          `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode common.ErrCode  `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg  string          `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	Configs *common.Configs `protobuf:"bytes,4,opt,name=configs" json:"configs,omitempty"`
}

func (m *QueryConfigsResp) Reset()                    { *m = QueryConfigsResp{} }
func (m *QueryConfigsResp) String() string            { return proto.CompactTextString(m) }
func (*QueryConfigsResp) ProtoMessage()               {}
func (*QueryConfigsResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{59} }

func (m *QueryConfigsResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryConfigsResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *QueryConfigsResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *QueryConfigsResp) GetConfigs() *common.Configs {
	if m != nil {
		return m.Configs
	}
	return nil
}

type QueryReleaseConfigsReq struct {
	Seq       uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid       string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Appid     string `protobuf:"bytes,3,opt,name=appid" json:"appid,omitempty"`
	Clusterid string `protobuf:"bytes,4,opt,name=clusterid" json:"clusterid,omitempty"`
	Zoneid    string `protobuf:"bytes,5,opt,name=zoneid" json:"zoneid,omitempty"`
	Cfgsetid  string `protobuf:"bytes,6,opt,name=cfgsetid" json:"cfgsetid,omitempty"`
	Commitid  string `protobuf:"bytes,7,opt,name=commitid" json:"commitid,omitempty"`
	Abstract  bool   `protobuf:"varint,8,opt,name=abstract" json:"abstract,omitempty"`
	Index     string `protobuf:"bytes,9,opt,name=index" json:"index,omitempty"`
}

func (m *QueryReleaseConfigsReq) Reset()                    { *m = QueryReleaseConfigsReq{} }
func (m *QueryReleaseConfigsReq) String() string            { return proto.CompactTextString(m) }
func (*QueryReleaseConfigsReq) ProtoMessage()               {}
func (*QueryReleaseConfigsReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{60} }

func (m *QueryReleaseConfigsReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryReleaseConfigsReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *QueryReleaseConfigsReq) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

func (m *QueryReleaseConfigsReq) GetClusterid() string {
	if m != nil {
		return m.Clusterid
	}
	return ""
}

func (m *QueryReleaseConfigsReq) GetZoneid() string {
	if m != nil {
		return m.Zoneid
	}
	return ""
}

func (m *QueryReleaseConfigsReq) GetCfgsetid() string {
	if m != nil {
		return m.Cfgsetid
	}
	return ""
}

func (m *QueryReleaseConfigsReq) GetCommitid() string {
	if m != nil {
		return m.Commitid
	}
	return ""
}

func (m *QueryReleaseConfigsReq) GetAbstract() bool {
	if m != nil {
		return m.Abstract
	}
	return false
}

func (m *QueryReleaseConfigsReq) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryReleaseConfigsResp struct {
	Seq     uint64          `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode common.ErrCode  `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg  string          `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	Configs *common.Configs `protobuf:"bytes,4,opt,name=configs" json:"configs,omitempty"`
}

func (m *QueryReleaseConfigsResp) Reset()                    { *m = QueryReleaseConfigsResp{} }
func (m *QueryReleaseConfigsResp) String() string            { return proto.CompactTextString(m) }
func (*QueryReleaseConfigsResp) ProtoMessage()               {}
func (*QueryReleaseConfigsResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{61} }

func (m *QueryReleaseConfigsResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryReleaseConfigsResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *QueryReleaseConfigsResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *QueryReleaseConfigsResp) GetConfigs() *common.Configs {
	if m != nil {
		return m.Configs
	}
	return nil
}

type QueryConfigsListReq struct {
	Seq      uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid      string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Cfgsetid string `protobuf:"bytes,3,opt,name=cfgsetid" json:"cfgsetid,omitempty"`
	Commitid string `protobuf:"bytes,4,opt,name=commitid" json:"commitid,omitempty"`
	Index    int32  `protobuf:"varint,5,opt,name=index" json:"index,omitempty"`
	Limit    int32  `protobuf:"varint,6,opt,name=limit" json:"limit,omitempty"`
}

func (m *QueryConfigsListReq) Reset()                    { *m = QueryConfigsListReq{} }
func (m *QueryConfigsListReq) String() string            { return proto.CompactTextString(m) }
func (*QueryConfigsListReq) ProtoMessage()               {}
func (*QueryConfigsListReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{62} }

func (m *QueryConfigsListReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryConfigsListReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *QueryConfigsListReq) GetCfgsetid() string {
	if m != nil {
		return m.Cfgsetid
	}
	return ""
}

func (m *QueryConfigsListReq) GetCommitid() string {
	if m != nil {
		return m.Commitid
	}
	return ""
}

func (m *QueryConfigsListReq) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *QueryConfigsListReq) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type QueryConfigsListResp struct {
	Seq      uint64            `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode  common.ErrCode    `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg   string            `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	Cfgslist []*common.Configs `protobuf:"bytes,4,rep,name=cfgslist" json:"cfgslist,omitempty"`
}

func (m *QueryConfigsListResp) Reset()                    { *m = QueryConfigsListResp{} }
func (m *QueryConfigsListResp) String() string            { return proto.CompactTextString(m) }
func (*QueryConfigsListResp) ProtoMessage()               {}
func (*QueryConfigsListResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{63} }

func (m *QueryConfigsListResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryConfigsListResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *QueryConfigsListResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *QueryConfigsListResp) GetCfgslist() []*common.Configs {
	if m != nil {
		return m.Cfgslist
	}
	return nil
}

type CreateCommitReq struct {
	Seq           uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid           string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Commitid      string `protobuf:"bytes,3,opt,name=commitid" json:"commitid,omitempty"`
	Appid         string `protobuf:"bytes,4,opt,name=appid" json:"appid,omitempty"`
	Cfgsetid      string `protobuf:"bytes,5,opt,name=cfgsetid" json:"cfgsetid,omitempty"`
	Op            int32  `protobuf:"varint,6,opt,name=op" json:"op,omitempty"`
	Operator      string `protobuf:"bytes,7,opt,name=operator" json:"operator,omitempty"`
	Templateid    string `protobuf:"bytes,8,opt,name=templateid" json:"templateid,omitempty"`
	Template      string `protobuf:"bytes,9,opt,name=template" json:"template,omitempty"`
	TemplateRule  string `protobuf:"bytes,10,opt,name=templateRule" json:"templateRule,omitempty"`
	Configs       []byte `protobuf:"bytes,11,opt,name=configs,proto3" json:"configs,omitempty"`
	Changes       string `protobuf:"bytes,12,opt,name=changes" json:"changes,omitempty"`
	Memo          string `protobuf:"bytes,13,opt,name=memo" json:"memo,omitempty"`
	State         int32  `protobuf:"varint,14,opt,name=state" json:"state,omitempty"`
	MultiCommitid string `protobuf:"bytes,15,opt,name=multiCommitid" json:"multiCommitid,omitempty"`
}

func (m *CreateCommitReq) Reset()                    { *m = CreateCommitReq{} }
func (m *CreateCommitReq) String() string            { return proto.CompactTextString(m) }
func (*CreateCommitReq) ProtoMessage()               {}
func (*CreateCommitReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{64} }

func (m *CreateCommitReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *CreateCommitReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *CreateCommitReq) GetCommitid() string {
	if m != nil {
		return m.Commitid
	}
	return ""
}

func (m *CreateCommitReq) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

func (m *CreateCommitReq) GetCfgsetid() string {
	if m != nil {
		return m.Cfgsetid
	}
	return ""
}

func (m *CreateCommitReq) GetOp() int32 {
	if m != nil {
		return m.Op
	}
	return 0
}

func (m *CreateCommitReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *CreateCommitReq) GetTemplateid() string {
	if m != nil {
		return m.Templateid
	}
	return ""
}

func (m *CreateCommitReq) GetTemplate() string {
	if m != nil {
		return m.Template
	}
	return ""
}

func (m *CreateCommitReq) GetTemplateRule() string {
	if m != nil {
		return m.TemplateRule
	}
	return ""
}

func (m *CreateCommitReq) GetConfigs() []byte {
	if m != nil {
		return m.Configs
	}
	return nil
}

func (m *CreateCommitReq) GetChanges() string {
	if m != nil {
		return m.Changes
	}
	return ""
}

func (m *CreateCommitReq) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *CreateCommitReq) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *CreateCommitReq) GetMultiCommitid() string {
	if m != nil {
		return m.MultiCommitid
	}
	return ""
}

type CreateCommitResp struct {
	Seq      uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode  common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg   string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	Commitid string         `protobuf:"bytes,4,opt,name=commitid" json:"commitid,omitempty"`
}

func (m *CreateCommitResp) Reset()                    { *m = CreateCommitResp{} }
func (m *CreateCommitResp) String() string            { return proto.CompactTextString(m) }
func (*CreateCommitResp) ProtoMessage()               {}
func (*CreateCommitResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{65} }

func (m *CreateCommitResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *CreateCommitResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *CreateCommitResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *CreateCommitResp) GetCommitid() string {
	if m != nil {
		return m.Commitid
	}
	return ""
}

type QueryCommitReq struct {
	Seq      uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid      string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Commitid string `protobuf:"bytes,3,opt,name=commitid" json:"commitid,omitempty"`
	Abstract bool   `protobuf:"varint,4,opt,name=abstract" json:"abstract,omitempty"`
}

func (m *QueryCommitReq) Reset()                    { *m = QueryCommitReq{} }
func (m *QueryCommitReq) String() string            { return proto.CompactTextString(m) }
func (*QueryCommitReq) ProtoMessage()               {}
func (*QueryCommitReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{66} }

func (m *QueryCommitReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryCommitReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *QueryCommitReq) GetCommitid() string {
	if m != nil {
		return m.Commitid
	}
	return ""
}

func (m *QueryCommitReq) GetAbstract() bool {
	if m != nil {
		return m.Abstract
	}
	return false
}

type QueryCommitResp struct {
	Seq     uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg  string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	Commit  *common.Commit `protobuf:"bytes,4,opt,name=commit" json:"commit,omitempty"`
}

func (m *QueryCommitResp) Reset()                    { *m = QueryCommitResp{} }
func (m *QueryCommitResp) String() string            { return proto.CompactTextString(m) }
func (*QueryCommitResp) ProtoMessage()               {}
func (*QueryCommitResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{67} }

func (m *QueryCommitResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryCommitResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *QueryCommitResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *QueryCommitResp) GetCommit() *common.Commit {
	if m != nil {
		return m.Commit
	}
	return nil
}

type QueryHistoryCommitsReq struct {
	Seq       uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid       string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Appid     string `protobuf:"bytes,3,opt,name=appid" json:"appid,omitempty"`
	Cfgsetid  string `protobuf:"bytes,4,opt,name=cfgsetid" json:"cfgsetid,omitempty"`
	Operator  string `protobuf:"bytes,5,opt,name=operator" json:"operator,omitempty"`
	QueryType int32  `protobuf:"varint,6,opt,name=queryType" json:"queryType,omitempty"`
	Index     int32  `protobuf:"varint,7,opt,name=index" json:"index,omitempty"`
	Limit     int32  `protobuf:"varint,8,opt,name=limit" json:"limit,omitempty"`
}

func (m *QueryHistoryCommitsReq) Reset()                    { *m = QueryHistoryCommitsReq{} }
func (m *QueryHistoryCommitsReq) String() string            { return proto.CompactTextString(m) }
func (*QueryHistoryCommitsReq) ProtoMessage()               {}
func (*QueryHistoryCommitsReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{68} }

func (m *QueryHistoryCommitsReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryHistoryCommitsReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *QueryHistoryCommitsReq) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

func (m *QueryHistoryCommitsReq) GetCfgsetid() string {
	if m != nil {
		return m.Cfgsetid
	}
	return ""
}

func (m *QueryHistoryCommitsReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *QueryHistoryCommitsReq) GetQueryType() int32 {
	if m != nil {
		return m.QueryType
	}
	return 0
}

func (m *QueryHistoryCommitsReq) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *QueryHistoryCommitsReq) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type QueryHistoryCommitsResp struct {
	Seq     uint64           `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode common.ErrCode   `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg  string           `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	Commits []*common.Commit `protobuf:"bytes,4,rep,name=commits" json:"commits,omitempty"`
}

func (m *QueryHistoryCommitsResp) Reset()                    { *m = QueryHistoryCommitsResp{} }
func (m *QueryHistoryCommitsResp) String() string            { return proto.CompactTextString(m) }
func (*QueryHistoryCommitsResp) ProtoMessage()               {}
func (*QueryHistoryCommitsResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{69} }

func (m *QueryHistoryCommitsResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryHistoryCommitsResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *QueryHistoryCommitsResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *QueryHistoryCommitsResp) GetCommits() []*common.Commit {
	if m != nil {
		return m.Commits
	}
	return nil
}

type UpdateCommitReq struct {
	Seq          uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid          string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Commitid     string `protobuf:"bytes,3,opt,name=commitid" json:"commitid,omitempty"`
	Templateid   string `protobuf:"bytes,4,opt,name=templateid" json:"templateid,omitempty"`
	Template     string `protobuf:"bytes,5,opt,name=template" json:"template,omitempty"`
	TemplateRule string `protobuf:"bytes,6,opt,name=templateRule" json:"templateRule,omitempty"`
	Configs      []byte `protobuf:"bytes,7,opt,name=configs,proto3" json:"configs,omitempty"`
	Changes      string `protobuf:"bytes,8,opt,name=changes" json:"changes,omitempty"`
	Memo         string `protobuf:"bytes,9,opt,name=memo" json:"memo,omitempty"`
	Operator     string `protobuf:"bytes,10,opt,name=operator" json:"operator,omitempty"`
}

func (m *UpdateCommitReq) Reset()                    { *m = UpdateCommitReq{} }
func (m *UpdateCommitReq) String() string            { return proto.CompactTextString(m) }
func (*UpdateCommitReq) ProtoMessage()               {}
func (*UpdateCommitReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{70} }

func (m *UpdateCommitReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *UpdateCommitReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *UpdateCommitReq) GetCommitid() string {
	if m != nil {
		return m.Commitid
	}
	return ""
}

func (m *UpdateCommitReq) GetTemplateid() string {
	if m != nil {
		return m.Templateid
	}
	return ""
}

func (m *UpdateCommitReq) GetTemplate() string {
	if m != nil {
		return m.Template
	}
	return ""
}

func (m *UpdateCommitReq) GetTemplateRule() string {
	if m != nil {
		return m.TemplateRule
	}
	return ""
}

func (m *UpdateCommitReq) GetConfigs() []byte {
	if m != nil {
		return m.Configs
	}
	return nil
}

func (m *UpdateCommitReq) GetChanges() string {
	if m != nil {
		return m.Changes
	}
	return ""
}

func (m *UpdateCommitReq) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *UpdateCommitReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

type UpdateCommitResp struct {
	Seq     uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg  string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
}

func (m *UpdateCommitResp) Reset()                    { *m = UpdateCommitResp{} }
func (m *UpdateCommitResp) String() string            { return proto.CompactTextString(m) }
func (*UpdateCommitResp) ProtoMessage()               {}
func (*UpdateCommitResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{71} }

func (m *UpdateCommitResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *UpdateCommitResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *UpdateCommitResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type CancelCommitReq struct {
	Seq      uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid      string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Commitid string `protobuf:"bytes,3,opt,name=commitid" json:"commitid,omitempty"`
	Operator string `protobuf:"bytes,4,opt,name=operator" json:"operator,omitempty"`
}

func (m *CancelCommitReq) Reset()                    { *m = CancelCommitReq{} }
func (m *CancelCommitReq) String() string            { return proto.CompactTextString(m) }
func (*CancelCommitReq) ProtoMessage()               {}
func (*CancelCommitReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{72} }

func (m *CancelCommitReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *CancelCommitReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *CancelCommitReq) GetCommitid() string {
	if m != nil {
		return m.Commitid
	}
	return ""
}

func (m *CancelCommitReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

type CancelCommitResp struct {
	Seq     uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg  string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
}

func (m *CancelCommitResp) Reset()                    { *m = CancelCommitResp{} }
func (m *CancelCommitResp) String() string            { return proto.CompactTextString(m) }
func (*CancelCommitResp) ProtoMessage()               {}
func (*CancelCommitResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{73} }

func (m *CancelCommitResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *CancelCommitResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *CancelCommitResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type ConfirmCommitReq struct {
	Seq      uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid      string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Appid    string `protobuf:"bytes,3,opt,name=appid" json:"appid,omitempty"`
	Cfgsetid string `protobuf:"bytes,4,opt,name=cfgsetid" json:"cfgsetid,omitempty"`
	Commitid string `protobuf:"bytes,5,opt,name=commitid" json:"commitid,omitempty"`
	Operator string `protobuf:"bytes,6,opt,name=operator" json:"operator,omitempty"`
}

func (m *ConfirmCommitReq) Reset()                    { *m = ConfirmCommitReq{} }
func (m *ConfirmCommitReq) String() string            { return proto.CompactTextString(m) }
func (*ConfirmCommitReq) ProtoMessage()               {}
func (*ConfirmCommitReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{74} }

func (m *ConfirmCommitReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *ConfirmCommitReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *ConfirmCommitReq) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

func (m *ConfirmCommitReq) GetCfgsetid() string {
	if m != nil {
		return m.Cfgsetid
	}
	return ""
}

func (m *ConfirmCommitReq) GetCommitid() string {
	if m != nil {
		return m.Commitid
	}
	return ""
}

func (m *ConfirmCommitReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

type ConfirmCommitResp struct {
	Seq     uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg  string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
}

func (m *ConfirmCommitResp) Reset()                    { *m = ConfirmCommitResp{} }
func (m *ConfirmCommitResp) String() string            { return proto.CompactTextString(m) }
func (*ConfirmCommitResp) ProtoMessage()               {}
func (*ConfirmCommitResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{75} }

func (m *ConfirmCommitResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *ConfirmCommitResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *ConfirmCommitResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type CreateMultiCommitReq struct {
	Seq           uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid           string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	MultiCommitid string `protobuf:"bytes,3,opt,name=multiCommitid" json:"multiCommitid,omitempty"`
	Appid         string `protobuf:"bytes,4,opt,name=appid" json:"appid,omitempty"`
	Memo          string `protobuf:"bytes,5,opt,name=memo" json:"memo,omitempty"`
	Operator      string `protobuf:"bytes,6,opt,name=operator" json:"operator,omitempty"`
}

func (m *CreateMultiCommitReq) Reset()                    { *m = CreateMultiCommitReq{} }
func (m *CreateMultiCommitReq) String() string            { return proto.CompactTextString(m) }
func (*CreateMultiCommitReq) ProtoMessage()               {}
func (*CreateMultiCommitReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{76} }

func (m *CreateMultiCommitReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *CreateMultiCommitReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *CreateMultiCommitReq) GetMultiCommitid() string {
	if m != nil {
		return m.MultiCommitid
	}
	return ""
}

func (m *CreateMultiCommitReq) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

func (m *CreateMultiCommitReq) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *CreateMultiCommitReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

type CreateMultiCommitResp struct {
	Seq           uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode       common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg        string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	MultiCommitid string         `protobuf:"bytes,4,opt,name=multiCommitid" json:"multiCommitid,omitempty"`
}

func (m *CreateMultiCommitResp) Reset()                    { *m = CreateMultiCommitResp{} }
func (m *CreateMultiCommitResp) String() string            { return proto.CompactTextString(m) }
func (*CreateMultiCommitResp) ProtoMessage()               {}
func (*CreateMultiCommitResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{77} }

func (m *CreateMultiCommitResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *CreateMultiCommitResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *CreateMultiCommitResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *CreateMultiCommitResp) GetMultiCommitid() string {
	if m != nil {
		return m.MultiCommitid
	}
	return ""
}

type QueryMultiCommitReq struct {
	Seq           uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid           string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	MultiCommitid string `protobuf:"bytes,3,opt,name=multiCommitid" json:"multiCommitid,omitempty"`
}

func (m *QueryMultiCommitReq) Reset()                    { *m = QueryMultiCommitReq{} }
func (m *QueryMultiCommitReq) String() string            { return proto.CompactTextString(m) }
func (*QueryMultiCommitReq) ProtoMessage()               {}
func (*QueryMultiCommitReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{78} }

func (m *QueryMultiCommitReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryMultiCommitReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *QueryMultiCommitReq) GetMultiCommitid() string {
	if m != nil {
		return m.MultiCommitid
	}
	return ""
}

type QueryMultiCommitResp struct {
	Seq         uint64              `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode     common.ErrCode      `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg      string              `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	MultiCommit *common.MultiCommit `protobuf:"bytes,4,opt,name=multiCommit" json:"multiCommit,omitempty"`
}

func (m *QueryMultiCommitResp) Reset()                    { *m = QueryMultiCommitResp{} }
func (m *QueryMultiCommitResp) String() string            { return proto.CompactTextString(m) }
func (*QueryMultiCommitResp) ProtoMessage()               {}
func (*QueryMultiCommitResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{79} }

func (m *QueryMultiCommitResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryMultiCommitResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *QueryMultiCommitResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *QueryMultiCommitResp) GetMultiCommit() *common.MultiCommit {
	if m != nil {
		return m.MultiCommit
	}
	return nil
}

type QueryHistoryMultiCommitsReq struct {
	Seq       uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid       string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Appid     string `protobuf:"bytes,3,opt,name=appid" json:"appid,omitempty"`
	Operator  string `protobuf:"bytes,4,opt,name=operator" json:"operator,omitempty"`
	QueryType int32  `protobuf:"varint,5,opt,name=queryType" json:"queryType,omitempty"`
	Index     int32  `protobuf:"varint,6,opt,name=index" json:"index,omitempty"`
	Limit     int32  `protobuf:"varint,7,opt,name=limit" json:"limit,omitempty"`
}

func (m *QueryHistoryMultiCommitsReq) Reset()                    { *m = QueryHistoryMultiCommitsReq{} }
func (m *QueryHistoryMultiCommitsReq) String() string            { return proto.CompactTextString(m) }
func (*QueryHistoryMultiCommitsReq) ProtoMessage()               {}
func (*QueryHistoryMultiCommitsReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{80} }

func (m *QueryHistoryMultiCommitsReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryHistoryMultiCommitsReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *QueryHistoryMultiCommitsReq) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

func (m *QueryHistoryMultiCommitsReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *QueryHistoryMultiCommitsReq) GetQueryType() int32 {
	if m != nil {
		return m.QueryType
	}
	return 0
}

func (m *QueryHistoryMultiCommitsReq) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *QueryHistoryMultiCommitsReq) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type QueryHistoryMultiCommitsResp struct {
	Seq          uint64                `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode      common.ErrCode        `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg       string                `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	MultiCommits []*common.MultiCommit `protobuf:"bytes,4,rep,name=multiCommits" json:"multiCommits,omitempty"`
}

func (m *QueryHistoryMultiCommitsResp) Reset()                    { *m = QueryHistoryMultiCommitsResp{} }
func (m *QueryHistoryMultiCommitsResp) String() string            { return proto.CompactTextString(m) }
func (*QueryHistoryMultiCommitsResp) ProtoMessage()               {}
func (*QueryHistoryMultiCommitsResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{81} }

func (m *QueryHistoryMultiCommitsResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryHistoryMultiCommitsResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *QueryHistoryMultiCommitsResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *QueryHistoryMultiCommitsResp) GetMultiCommits() []*common.MultiCommit {
	if m != nil {
		return m.MultiCommits
	}
	return nil
}

type QueryMultiCommitSubListReq struct {
	Seq           uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid           string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	MultiCommitid string `protobuf:"bytes,3,opt,name=multiCommitid" json:"multiCommitid,omitempty"`
}

func (m *QueryMultiCommitSubListReq) Reset()                    { *m = QueryMultiCommitSubListReq{} }
func (m *QueryMultiCommitSubListReq) String() string            { return proto.CompactTextString(m) }
func (*QueryMultiCommitSubListReq) ProtoMessage()               {}
func (*QueryMultiCommitSubListReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{82} }

func (m *QueryMultiCommitSubListReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryMultiCommitSubListReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *QueryMultiCommitSubListReq) GetMultiCommitid() string {
	if m != nil {
		return m.MultiCommitid
	}
	return ""
}

type QueryMultiCommitSubListResp struct {
	Seq       uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode   common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg    string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	Commitids []string       `protobuf:"bytes,4,rep,name=commitids" json:"commitids,omitempty"`
}

func (m *QueryMultiCommitSubListResp) Reset()                    { *m = QueryMultiCommitSubListResp{} }
func (m *QueryMultiCommitSubListResp) String() string            { return proto.CompactTextString(m) }
func (*QueryMultiCommitSubListResp) ProtoMessage()               {}
func (*QueryMultiCommitSubListResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{83} }

func (m *QueryMultiCommitSubListResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryMultiCommitSubListResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *QueryMultiCommitSubListResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *QueryMultiCommitSubListResp) GetCommitids() []string {
	if m != nil {
		return m.Commitids
	}
	return nil
}

type UpdateMultiCommitReq struct {
	Seq           uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid           string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	MultiCommitid string `protobuf:"bytes,3,opt,name=multiCommitid" json:"multiCommitid,omitempty"`
	Memo          string `protobuf:"bytes,4,opt,name=memo" json:"memo,omitempty"`
	Operator      string `protobuf:"bytes,5,opt,name=operator" json:"operator,omitempty"`
}

func (m *UpdateMultiCommitReq) Reset()                    { *m = UpdateMultiCommitReq{} }
func (m *UpdateMultiCommitReq) String() string            { return proto.CompactTextString(m) }
func (*UpdateMultiCommitReq) ProtoMessage()               {}
func (*UpdateMultiCommitReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{84} }

func (m *UpdateMultiCommitReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *UpdateMultiCommitReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *UpdateMultiCommitReq) GetMultiCommitid() string {
	if m != nil {
		return m.MultiCommitid
	}
	return ""
}

func (m *UpdateMultiCommitReq) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *UpdateMultiCommitReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

type UpdateMultiCommitResp struct {
	Seq     uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg  string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
}

func (m *UpdateMultiCommitResp) Reset()                    { *m = UpdateMultiCommitResp{} }
func (m *UpdateMultiCommitResp) String() string            { return proto.CompactTextString(m) }
func (*UpdateMultiCommitResp) ProtoMessage()               {}
func (*UpdateMultiCommitResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{85} }

func (m *UpdateMultiCommitResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *UpdateMultiCommitResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *UpdateMultiCommitResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type CancelMultiCommitReq struct {
	Seq           uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid           string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	MultiCommitid string `protobuf:"bytes,3,opt,name=multiCommitid" json:"multiCommitid,omitempty"`
	Operator      string `protobuf:"bytes,4,opt,name=operator" json:"operator,omitempty"`
}

func (m *CancelMultiCommitReq) Reset()                    { *m = CancelMultiCommitReq{} }
func (m *CancelMultiCommitReq) String() string            { return proto.CompactTextString(m) }
func (*CancelMultiCommitReq) ProtoMessage()               {}
func (*CancelMultiCommitReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{86} }

func (m *CancelMultiCommitReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *CancelMultiCommitReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *CancelMultiCommitReq) GetMultiCommitid() string {
	if m != nil {
		return m.MultiCommitid
	}
	return ""
}

func (m *CancelMultiCommitReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

type CancelMultiCommitResp struct {
	Seq     uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg  string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
}

func (m *CancelMultiCommitResp) Reset()                    { *m = CancelMultiCommitResp{} }
func (m *CancelMultiCommitResp) String() string            { return proto.CompactTextString(m) }
func (*CancelMultiCommitResp) ProtoMessage()               {}
func (*CancelMultiCommitResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{87} }

func (m *CancelMultiCommitResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *CancelMultiCommitResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *CancelMultiCommitResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type ConfirmMultiCommitReq struct {
	Seq           uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid           string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	MultiCommitid string `protobuf:"bytes,3,opt,name=multiCommitid" json:"multiCommitid,omitempty"`
	Operator      string `protobuf:"bytes,4,opt,name=operator" json:"operator,omitempty"`
}

func (m *ConfirmMultiCommitReq) Reset()                    { *m = ConfirmMultiCommitReq{} }
func (m *ConfirmMultiCommitReq) String() string            { return proto.CompactTextString(m) }
func (*ConfirmMultiCommitReq) ProtoMessage()               {}
func (*ConfirmMultiCommitReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{88} }

func (m *ConfirmMultiCommitReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *ConfirmMultiCommitReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *ConfirmMultiCommitReq) GetMultiCommitid() string {
	if m != nil {
		return m.MultiCommitid
	}
	return ""
}

func (m *ConfirmMultiCommitReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

type ConfirmMultiCommitResp struct {
	Seq     uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg  string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
}

func (m *ConfirmMultiCommitResp) Reset()                    { *m = ConfirmMultiCommitResp{} }
func (m *ConfirmMultiCommitResp) String() string            { return proto.CompactTextString(m) }
func (*ConfirmMultiCommitResp) ProtoMessage()               {}
func (*ConfirmMultiCommitResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{89} }

func (m *ConfirmMultiCommitResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *ConfirmMultiCommitResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *ConfirmMultiCommitResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type CreateReleaseReq struct {
	Seq        uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid        string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Releaseid  string `protobuf:"bytes,3,opt,name=releaseid" json:"releaseid,omitempty"`
	Name       string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	Appid      string `protobuf:"bytes,5,opt,name=appid" json:"appid,omitempty"`
	Cfgsetid   string `protobuf:"bytes,6,opt,name=cfgsetid" json:"cfgsetid,omitempty"`
	CfgsetName string `protobuf:"bytes,7,opt,name=cfgsetName" json:"cfgsetName,omitempty"`
	Strategyid string `protobuf:"bytes,8,opt,name=strategyid" json:"strategyid,omitempty"`
	Strategies string `protobuf:"bytes,9,opt,name=strategies" json:"strategies,omitempty"`
	Commitid   string `protobuf:"bytes,10,opt,name=commitid" json:"commitid,omitempty"`
	Memo       string `protobuf:"bytes,11,opt,name=memo" json:"memo,omitempty"`
	Creator    string `protobuf:"bytes,12,opt,name=creator" json:"creator,omitempty"`
	State      int32  `protobuf:"varint,13,opt,name=state" json:"state,omitempty"`
	// add fields here.
	CfgsetFpath    string `protobuf:"bytes,14,opt,name=cfgsetFpath" json:"cfgsetFpath,omitempty"`
	MultiReleaseid string `protobuf:"bytes,15,opt,name=multiReleaseid" json:"multiReleaseid,omitempty"`
}

func (m *CreateReleaseReq) Reset()                    { *m = CreateReleaseReq{} }
func (m *CreateReleaseReq) String() string            { return proto.CompactTextString(m) }
func (*CreateReleaseReq) ProtoMessage()               {}
func (*CreateReleaseReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{90} }

func (m *CreateReleaseReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *CreateReleaseReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *CreateReleaseReq) GetReleaseid() string {
	if m != nil {
		return m.Releaseid
	}
	return ""
}

func (m *CreateReleaseReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateReleaseReq) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

func (m *CreateReleaseReq) GetCfgsetid() string {
	if m != nil {
		return m.Cfgsetid
	}
	return ""
}

func (m *CreateReleaseReq) GetCfgsetName() string {
	if m != nil {
		return m.CfgsetName
	}
	return ""
}

func (m *CreateReleaseReq) GetStrategyid() string {
	if m != nil {
		return m.Strategyid
	}
	return ""
}

func (m *CreateReleaseReq) GetStrategies() string {
	if m != nil {
		return m.Strategies
	}
	return ""
}

func (m *CreateReleaseReq) GetCommitid() string {
	if m != nil {
		return m.Commitid
	}
	return ""
}

func (m *CreateReleaseReq) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *CreateReleaseReq) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *CreateReleaseReq) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *CreateReleaseReq) GetCfgsetFpath() string {
	if m != nil {
		return m.CfgsetFpath
	}
	return ""
}

func (m *CreateReleaseReq) GetMultiReleaseid() string {
	if m != nil {
		return m.MultiReleaseid
	}
	return ""
}

type CreateReleaseResp struct {
	Seq     uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg  string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
}

func (m *CreateReleaseResp) Reset()                    { *m = CreateReleaseResp{} }
func (m *CreateReleaseResp) String() string            { return proto.CompactTextString(m) }
func (*CreateReleaseResp) ProtoMessage()               {}
func (*CreateReleaseResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{91} }

func (m *CreateReleaseResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *CreateReleaseResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *CreateReleaseResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type QueryReleaseReq struct {
	Seq       uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid       string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Releaseid string `protobuf:"bytes,3,opt,name=releaseid" json:"releaseid,omitempty"`
}

func (m *QueryReleaseReq) Reset()                    { *m = QueryReleaseReq{} }
func (m *QueryReleaseReq) String() string            { return proto.CompactTextString(m) }
func (*QueryReleaseReq) ProtoMessage()               {}
func (*QueryReleaseReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{92} }

func (m *QueryReleaseReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryReleaseReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *QueryReleaseReq) GetReleaseid() string {
	if m != nil {
		return m.Releaseid
	}
	return ""
}

type QueryReleaseResp struct {
	Seq     uint64          `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode common.ErrCode  `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg  string          `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	Release *common.Release `protobuf:"bytes,4,opt,name=release" json:"release,omitempty"`
}

func (m *QueryReleaseResp) Reset()                    { *m = QueryReleaseResp{} }
func (m *QueryReleaseResp) String() string            { return proto.CompactTextString(m) }
func (*QueryReleaseResp) ProtoMessage()               {}
func (*QueryReleaseResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{93} }

func (m *QueryReleaseResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryReleaseResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *QueryReleaseResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *QueryReleaseResp) GetRelease() *common.Release {
	if m != nil {
		return m.Release
	}
	return nil
}

type QueryNewestReleasesReq struct {
	Seq            uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid            string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Cfgsetid       string `protobuf:"bytes,3,opt,name=cfgsetid" json:"cfgsetid,omitempty"`
	LocalReleaseid string `protobuf:"bytes,4,opt,name=localReleaseid" json:"localReleaseid,omitempty"`
	Index          int32  `protobuf:"varint,5,opt,name=index" json:"index,omitempty"`
	Limit          int32  `protobuf:"varint,6,opt,name=limit" json:"limit,omitempty"`
}

func (m *QueryNewestReleasesReq) Reset()                    { *m = QueryNewestReleasesReq{} }
func (m *QueryNewestReleasesReq) String() string            { return proto.CompactTextString(m) }
func (*QueryNewestReleasesReq) ProtoMessage()               {}
func (*QueryNewestReleasesReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{94} }

func (m *QueryNewestReleasesReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryNewestReleasesReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *QueryNewestReleasesReq) GetCfgsetid() string {
	if m != nil {
		return m.Cfgsetid
	}
	return ""
}

func (m *QueryNewestReleasesReq) GetLocalReleaseid() string {
	if m != nil {
		return m.LocalReleaseid
	}
	return ""
}

func (m *QueryNewestReleasesReq) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *QueryNewestReleasesReq) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type QueryNewestReleasesResp struct {
	Seq      uint64            `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode  common.ErrCode    `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg   string            `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	Releases []*common.Release `protobuf:"bytes,4,rep,name=releases" json:"releases,omitempty"`
}

func (m *QueryNewestReleasesResp) Reset()                    { *m = QueryNewestReleasesResp{} }
func (m *QueryNewestReleasesResp) String() string            { return proto.CompactTextString(m) }
func (*QueryNewestReleasesResp) ProtoMessage()               {}
func (*QueryNewestReleasesResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{95} }

func (m *QueryNewestReleasesResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryNewestReleasesResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *QueryNewestReleasesResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *QueryNewestReleasesResp) GetReleases() []*common.Release {
	if m != nil {
		return m.Releases
	}
	return nil
}

type QueryHistoryReleasesReq struct {
	Seq       uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid       string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Cfgsetid  string `protobuf:"bytes,3,opt,name=cfgsetid" json:"cfgsetid,omitempty"`
	Operator  string `protobuf:"bytes,4,opt,name=operator" json:"operator,omitempty"`
	QueryType int32  `protobuf:"varint,5,opt,name=queryType" json:"queryType,omitempty"`
	Index     int32  `protobuf:"varint,6,opt,name=index" json:"index,omitempty"`
	Limit     int32  `protobuf:"varint,7,opt,name=limit" json:"limit,omitempty"`
	// add new fields here.
	OrderType int32 `protobuf:"varint,8,opt,name=orderType" json:"orderType,omitempty"`
}

func (m *QueryHistoryReleasesReq) Reset()                    { *m = QueryHistoryReleasesReq{} }
func (m *QueryHistoryReleasesReq) String() string            { return proto.CompactTextString(m) }
func (*QueryHistoryReleasesReq) ProtoMessage()               {}
func (*QueryHistoryReleasesReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{96} }

func (m *QueryHistoryReleasesReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryHistoryReleasesReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *QueryHistoryReleasesReq) GetCfgsetid() string {
	if m != nil {
		return m.Cfgsetid
	}
	return ""
}

func (m *QueryHistoryReleasesReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *QueryHistoryReleasesReq) GetQueryType() int32 {
	if m != nil {
		return m.QueryType
	}
	return 0
}

func (m *QueryHistoryReleasesReq) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *QueryHistoryReleasesReq) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *QueryHistoryReleasesReq) GetOrderType() int32 {
	if m != nil {
		return m.OrderType
	}
	return 0
}

type QueryHistoryReleasesResp struct {
	Seq      uint64            `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode  common.ErrCode    `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg   string            `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	Releases []*common.Release `protobuf:"bytes,4,rep,name=releases" json:"releases,omitempty"`
}

func (m *QueryHistoryReleasesResp) Reset()                    { *m = QueryHistoryReleasesResp{} }
func (m *QueryHistoryReleasesResp) String() string            { return proto.CompactTextString(m) }
func (*QueryHistoryReleasesResp) ProtoMessage()               {}
func (*QueryHistoryReleasesResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{97} }

func (m *QueryHistoryReleasesResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryHistoryReleasesResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *QueryHistoryReleasesResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *QueryHistoryReleasesResp) GetReleases() []*common.Release {
	if m != nil {
		return m.Releases
	}
	return nil
}

type UpdateReleaseReq struct {
	Seq       uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid       string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Releaseid string `protobuf:"bytes,3,opt,name=releaseid" json:"releaseid,omitempty"`
	Name      string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	Memo      string `protobuf:"bytes,5,opt,name=memo" json:"memo,omitempty"`
	Operator  string `protobuf:"bytes,6,opt,name=operator" json:"operator,omitempty"`
}

func (m *UpdateReleaseReq) Reset()                    { *m = UpdateReleaseReq{} }
func (m *UpdateReleaseReq) String() string            { return proto.CompactTextString(m) }
func (*UpdateReleaseReq) ProtoMessage()               {}
func (*UpdateReleaseReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{98} }

func (m *UpdateReleaseReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *UpdateReleaseReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *UpdateReleaseReq) GetReleaseid() string {
	if m != nil {
		return m.Releaseid
	}
	return ""
}

func (m *UpdateReleaseReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateReleaseReq) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *UpdateReleaseReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

type UpdateReleaseResp struct {
	Seq     uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg  string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
}

func (m *UpdateReleaseResp) Reset()                    { *m = UpdateReleaseResp{} }
func (m *UpdateReleaseResp) String() string            { return proto.CompactTextString(m) }
func (*UpdateReleaseResp) ProtoMessage()               {}
func (*UpdateReleaseResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{99} }

func (m *UpdateReleaseResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *UpdateReleaseResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *UpdateReleaseResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type CancelReleaseReq struct {
	Seq       uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid       string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Releaseid string `protobuf:"bytes,3,opt,name=releaseid" json:"releaseid,omitempty"`
	Operator  string `protobuf:"bytes,4,opt,name=operator" json:"operator,omitempty"`
}

func (m *CancelReleaseReq) Reset()                    { *m = CancelReleaseReq{} }
func (m *CancelReleaseReq) String() string            { return proto.CompactTextString(m) }
func (*CancelReleaseReq) ProtoMessage()               {}
func (*CancelReleaseReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{100} }

func (m *CancelReleaseReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *CancelReleaseReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *CancelReleaseReq) GetReleaseid() string {
	if m != nil {
		return m.Releaseid
	}
	return ""
}

func (m *CancelReleaseReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

type CancelReleaseResp struct {
	Seq     uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg  string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
}

func (m *CancelReleaseResp) Reset()                    { *m = CancelReleaseResp{} }
func (m *CancelReleaseResp) String() string            { return proto.CompactTextString(m) }
func (*CancelReleaseResp) ProtoMessage()               {}
func (*CancelReleaseResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{101} }

func (m *CancelReleaseResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *CancelReleaseResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *CancelReleaseResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type RollbackReleaseReq struct {
	Seq       uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid       string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Releaseid string `protobuf:"bytes,3,opt,name=releaseid" json:"releaseid,omitempty"`
	Operator  string `protobuf:"bytes,4,opt,name=operator" json:"operator,omitempty"`
}

func (m *RollbackReleaseReq) Reset()                    { *m = RollbackReleaseReq{} }
func (m *RollbackReleaseReq) String() string            { return proto.CompactTextString(m) }
func (*RollbackReleaseReq) ProtoMessage()               {}
func (*RollbackReleaseReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{102} }

func (m *RollbackReleaseReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *RollbackReleaseReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *RollbackReleaseReq) GetReleaseid() string {
	if m != nil {
		return m.Releaseid
	}
	return ""
}

func (m *RollbackReleaseReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

type RollbackReleaseResp struct {
	Seq     uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg  string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
}

func (m *RollbackReleaseResp) Reset()                    { *m = RollbackReleaseResp{} }
func (m *RollbackReleaseResp) String() string            { return proto.CompactTextString(m) }
func (*RollbackReleaseResp) ProtoMessage()               {}
func (*RollbackReleaseResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{103} }

func (m *RollbackReleaseResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *RollbackReleaseResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *RollbackReleaseResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type PublishReleaseReq struct {
	Seq       uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid       string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Releaseid string `protobuf:"bytes,3,opt,name=releaseid" json:"releaseid,omitempty"`
	Operator  string `protobuf:"bytes,4,opt,name=operator" json:"operator,omitempty"`
}

func (m *PublishReleaseReq) Reset()                    { *m = PublishReleaseReq{} }
func (m *PublishReleaseReq) String() string            { return proto.CompactTextString(m) }
func (*PublishReleaseReq) ProtoMessage()               {}
func (*PublishReleaseReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{104} }

func (m *PublishReleaseReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *PublishReleaseReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *PublishReleaseReq) GetReleaseid() string {
	if m != nil {
		return m.Releaseid
	}
	return ""
}

func (m *PublishReleaseReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

type PublishReleaseResp struct {
	Seq     uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg  string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
}

func (m *PublishReleaseResp) Reset()                    { *m = PublishReleaseResp{} }
func (m *PublishReleaseResp) String() string            { return proto.CompactTextString(m) }
func (*PublishReleaseResp) ProtoMessage()               {}
func (*PublishReleaseResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{105} }

func (m *PublishReleaseResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *PublishReleaseResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *PublishReleaseResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type CreateMultiReleaseReq struct {
	Seq            uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid            string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Appid          string `protobuf:"bytes,3,opt,name=appid" json:"appid,omitempty"`
	MultiReleaseid string `protobuf:"bytes,4,opt,name=multiReleaseid" json:"multiReleaseid,omitempty"`
	Name           string `protobuf:"bytes,5,opt,name=name" json:"name,omitempty"`
	MultiCommitid  string `protobuf:"bytes,6,opt,name=multiCommitid" json:"multiCommitid,omitempty"`
	Strategyid     string `protobuf:"bytes,7,opt,name=strategyid" json:"strategyid,omitempty"`
	Strategies     string `protobuf:"bytes,8,opt,name=strategies" json:"strategies,omitempty"`
	Memo           string `protobuf:"bytes,9,opt,name=memo" json:"memo,omitempty"`
	Creator        string `protobuf:"bytes,10,opt,name=creator" json:"creator,omitempty"`
}

func (m *CreateMultiReleaseReq) Reset()                    { *m = CreateMultiReleaseReq{} }
func (m *CreateMultiReleaseReq) String() string            { return proto.CompactTextString(m) }
func (*CreateMultiReleaseReq) ProtoMessage()               {}
func (*CreateMultiReleaseReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{106} }

func (m *CreateMultiReleaseReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *CreateMultiReleaseReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *CreateMultiReleaseReq) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

func (m *CreateMultiReleaseReq) GetMultiReleaseid() string {
	if m != nil {
		return m.MultiReleaseid
	}
	return ""
}

func (m *CreateMultiReleaseReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateMultiReleaseReq) GetMultiCommitid() string {
	if m != nil {
		return m.MultiCommitid
	}
	return ""
}

func (m *CreateMultiReleaseReq) GetStrategyid() string {
	if m != nil {
		return m.Strategyid
	}
	return ""
}

func (m *CreateMultiReleaseReq) GetStrategies() string {
	if m != nil {
		return m.Strategies
	}
	return ""
}

func (m *CreateMultiReleaseReq) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *CreateMultiReleaseReq) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

type CreateMultiReleaseResp struct {
	Seq            uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode        common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg         string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	MultiReleaseid string         `protobuf:"bytes,4,opt,name=multiReleaseid" json:"multiReleaseid,omitempty"`
}

func (m *CreateMultiReleaseResp) Reset()                    { *m = CreateMultiReleaseResp{} }
func (m *CreateMultiReleaseResp) String() string            { return proto.CompactTextString(m) }
func (*CreateMultiReleaseResp) ProtoMessage()               {}
func (*CreateMultiReleaseResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{107} }

func (m *CreateMultiReleaseResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *CreateMultiReleaseResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *CreateMultiReleaseResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *CreateMultiReleaseResp) GetMultiReleaseid() string {
	if m != nil {
		return m.MultiReleaseid
	}
	return ""
}

type QueryMultiReleaseReq struct {
	Seq            uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid            string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	MultiReleaseid string `protobuf:"bytes,3,opt,name=multiReleaseid" json:"multiReleaseid,omitempty"`
}

func (m *QueryMultiReleaseReq) Reset()                    { *m = QueryMultiReleaseReq{} }
func (m *QueryMultiReleaseReq) String() string            { return proto.CompactTextString(m) }
func (*QueryMultiReleaseReq) ProtoMessage()               {}
func (*QueryMultiReleaseReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{108} }

func (m *QueryMultiReleaseReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryMultiReleaseReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *QueryMultiReleaseReq) GetMultiReleaseid() string {
	if m != nil {
		return m.MultiReleaseid
	}
	return ""
}

type QueryMultiReleaseResp struct {
	Seq          uint64               `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode      common.ErrCode       `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg       string               `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	MultiRelease *common.MultiRelease `protobuf:"bytes,4,opt,name=multiRelease" json:"multiRelease,omitempty"`
}

func (m *QueryMultiReleaseResp) Reset()                    { *m = QueryMultiReleaseResp{} }
func (m *QueryMultiReleaseResp) String() string            { return proto.CompactTextString(m) }
func (*QueryMultiReleaseResp) ProtoMessage()               {}
func (*QueryMultiReleaseResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{109} }

func (m *QueryMultiReleaseResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryMultiReleaseResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *QueryMultiReleaseResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *QueryMultiReleaseResp) GetMultiRelease() *common.MultiRelease {
	if m != nil {
		return m.MultiRelease
	}
	return nil
}

type QueryHistoryMultiReleasesReq struct {
	Seq       uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid       string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Appid     string `protobuf:"bytes,3,opt,name=appid" json:"appid,omitempty"`
	Operator  string `protobuf:"bytes,4,opt,name=operator" json:"operator,omitempty"`
	QueryType int32  `protobuf:"varint,5,opt,name=queryType" json:"queryType,omitempty"`
	OrderType int32  `protobuf:"varint,6,opt,name=orderType" json:"orderType,omitempty"`
	Index     int32  `protobuf:"varint,7,opt,name=index" json:"index,omitempty"`
	Limit     int32  `protobuf:"varint,8,opt,name=limit" json:"limit,omitempty"`
}

func (m *QueryHistoryMultiReleasesReq) Reset()                    { *m = QueryHistoryMultiReleasesReq{} }
func (m *QueryHistoryMultiReleasesReq) String() string            { return proto.CompactTextString(m) }
func (*QueryHistoryMultiReleasesReq) ProtoMessage()               {}
func (*QueryHistoryMultiReleasesReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{110} }

func (m *QueryHistoryMultiReleasesReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryHistoryMultiReleasesReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *QueryHistoryMultiReleasesReq) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

func (m *QueryHistoryMultiReleasesReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *QueryHistoryMultiReleasesReq) GetQueryType() int32 {
	if m != nil {
		return m.QueryType
	}
	return 0
}

func (m *QueryHistoryMultiReleasesReq) GetOrderType() int32 {
	if m != nil {
		return m.OrderType
	}
	return 0
}

func (m *QueryHistoryMultiReleasesReq) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *QueryHistoryMultiReleasesReq) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type QueryHistoryMultiReleasesResp struct {
	Seq           uint64                 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode       common.ErrCode         `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg        string                 `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	MultiReleases []*common.MultiRelease `protobuf:"bytes,4,rep,name=multiReleases" json:"multiReleases,omitempty"`
}

func (m *QueryHistoryMultiReleasesResp) Reset()         { *m = QueryHistoryMultiReleasesResp{} }
func (m *QueryHistoryMultiReleasesResp) String() string { return proto.CompactTextString(m) }
func (*QueryHistoryMultiReleasesResp) ProtoMessage()    {}
func (*QueryHistoryMultiReleasesResp) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{111}
}

func (m *QueryHistoryMultiReleasesResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryHistoryMultiReleasesResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *QueryHistoryMultiReleasesResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *QueryHistoryMultiReleasesResp) GetMultiReleases() []*common.MultiRelease {
	if m != nil {
		return m.MultiReleases
	}
	return nil
}

type UpdateMultiReleaseReq struct {
	Seq            uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid            string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	MultiReleaseid string `protobuf:"bytes,3,opt,name=multiReleaseid" json:"multiReleaseid,omitempty"`
	Name           string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	Memo           string `protobuf:"bytes,5,opt,name=memo" json:"memo,omitempty"`
	Operator       string `protobuf:"bytes,6,opt,name=operator" json:"operator,omitempty"`
}

func (m *UpdateMultiReleaseReq) Reset()                    { *m = UpdateMultiReleaseReq{} }
func (m *UpdateMultiReleaseReq) String() string            { return proto.CompactTextString(m) }
func (*UpdateMultiReleaseReq) ProtoMessage()               {}
func (*UpdateMultiReleaseReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{112} }

func (m *UpdateMultiReleaseReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *UpdateMultiReleaseReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *UpdateMultiReleaseReq) GetMultiReleaseid() string {
	if m != nil {
		return m.MultiReleaseid
	}
	return ""
}

func (m *UpdateMultiReleaseReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateMultiReleaseReq) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *UpdateMultiReleaseReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

type UpdateMultiReleaseResp struct {
	Seq     uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg  string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
}

func (m *UpdateMultiReleaseResp) Reset()                    { *m = UpdateMultiReleaseResp{} }
func (m *UpdateMultiReleaseResp) String() string            { return proto.CompactTextString(m) }
func (*UpdateMultiReleaseResp) ProtoMessage()               {}
func (*UpdateMultiReleaseResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{113} }

func (m *UpdateMultiReleaseResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *UpdateMultiReleaseResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *UpdateMultiReleaseResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type QueryMultiReleaseSubListReq struct {
	Seq            uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid            string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	MultiReleaseid string `protobuf:"bytes,3,opt,name=multiReleaseid" json:"multiReleaseid,omitempty"`
}

func (m *QueryMultiReleaseSubListReq) Reset()                    { *m = QueryMultiReleaseSubListReq{} }
func (m *QueryMultiReleaseSubListReq) String() string            { return proto.CompactTextString(m) }
func (*QueryMultiReleaseSubListReq) ProtoMessage()               {}
func (*QueryMultiReleaseSubListReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{114} }

func (m *QueryMultiReleaseSubListReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryMultiReleaseSubListReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *QueryMultiReleaseSubListReq) GetMultiReleaseid() string {
	if m != nil {
		return m.MultiReleaseid
	}
	return ""
}

type QueryMultiReleaseSubListResp struct {
	Seq        uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode    common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg     string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	Releaseids []string       `protobuf:"bytes,4,rep,name=releaseids" json:"releaseids,omitempty"`
}

func (m *QueryMultiReleaseSubListResp) Reset()                    { *m = QueryMultiReleaseSubListResp{} }
func (m *QueryMultiReleaseSubListResp) String() string            { return proto.CompactTextString(m) }
func (*QueryMultiReleaseSubListResp) ProtoMessage()               {}
func (*QueryMultiReleaseSubListResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{115} }

func (m *QueryMultiReleaseSubListResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryMultiReleaseSubListResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *QueryMultiReleaseSubListResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *QueryMultiReleaseSubListResp) GetReleaseids() []string {
	if m != nil {
		return m.Releaseids
	}
	return nil
}

type CancelMultiReleaseReq struct {
	Seq            uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid            string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	MultiReleaseid string `protobuf:"bytes,3,opt,name=multiReleaseid" json:"multiReleaseid,omitempty"`
	Operator       string `protobuf:"bytes,4,opt,name=operator" json:"operator,omitempty"`
}

func (m *CancelMultiReleaseReq) Reset()                    { *m = CancelMultiReleaseReq{} }
func (m *CancelMultiReleaseReq) String() string            { return proto.CompactTextString(m) }
func (*CancelMultiReleaseReq) ProtoMessage()               {}
func (*CancelMultiReleaseReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{116} }

func (m *CancelMultiReleaseReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *CancelMultiReleaseReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *CancelMultiReleaseReq) GetMultiReleaseid() string {
	if m != nil {
		return m.MultiReleaseid
	}
	return ""
}

func (m *CancelMultiReleaseReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

type CancelMultiReleaseResp struct {
	Seq     uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg  string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
}

func (m *CancelMultiReleaseResp) Reset()                    { *m = CancelMultiReleaseResp{} }
func (m *CancelMultiReleaseResp) String() string            { return proto.CompactTextString(m) }
func (*CancelMultiReleaseResp) ProtoMessage()               {}
func (*CancelMultiReleaseResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{117} }

func (m *CancelMultiReleaseResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *CancelMultiReleaseResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *CancelMultiReleaseResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type PublishMultiReleaseReq struct {
	Seq            uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid            string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	MultiReleaseid string `protobuf:"bytes,3,opt,name=multiReleaseid" json:"multiReleaseid,omitempty"`
	Operator       string `protobuf:"bytes,4,opt,name=operator" json:"operator,omitempty"`
}

func (m *PublishMultiReleaseReq) Reset()                    { *m = PublishMultiReleaseReq{} }
func (m *PublishMultiReleaseReq) String() string            { return proto.CompactTextString(m) }
func (*PublishMultiReleaseReq) ProtoMessage()               {}
func (*PublishMultiReleaseReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{118} }

func (m *PublishMultiReleaseReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *PublishMultiReleaseReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *PublishMultiReleaseReq) GetMultiReleaseid() string {
	if m != nil {
		return m.MultiReleaseid
	}
	return ""
}

func (m *PublishMultiReleaseReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

type PublishMultiReleaseResp struct {
	Seq     uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg  string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
}

func (m *PublishMultiReleaseResp) Reset()                    { *m = PublishMultiReleaseResp{} }
func (m *PublishMultiReleaseResp) String() string            { return proto.CompactTextString(m) }
func (*PublishMultiReleaseResp) ProtoMessage()               {}
func (*PublishMultiReleaseResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{119} }

func (m *PublishMultiReleaseResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *PublishMultiReleaseResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *PublishMultiReleaseResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type RollbackMultiReleaseReq struct {
	Seq            uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid            string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	MultiReleaseid string `protobuf:"bytes,3,opt,name=multiReleaseid" json:"multiReleaseid,omitempty"`
	Operator       string `protobuf:"bytes,4,opt,name=operator" json:"operator,omitempty"`
}

func (m *RollbackMultiReleaseReq) Reset()                    { *m = RollbackMultiReleaseReq{} }
func (m *RollbackMultiReleaseReq) String() string            { return proto.CompactTextString(m) }
func (*RollbackMultiReleaseReq) ProtoMessage()               {}
func (*RollbackMultiReleaseReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{120} }

func (m *RollbackMultiReleaseReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *RollbackMultiReleaseReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *RollbackMultiReleaseReq) GetMultiReleaseid() string {
	if m != nil {
		return m.MultiReleaseid
	}
	return ""
}

func (m *RollbackMultiReleaseReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

type RollbackMultiReleaseResp struct {
	Seq     uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg  string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
}

func (m *RollbackMultiReleaseResp) Reset()                    { *m = RollbackMultiReleaseResp{} }
func (m *RollbackMultiReleaseResp) String() string            { return proto.CompactTextString(m) }
func (*RollbackMultiReleaseResp) ProtoMessage()               {}
func (*RollbackMultiReleaseResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{121} }

func (m *RollbackMultiReleaseResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *RollbackMultiReleaseResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *RollbackMultiReleaseResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type CreateAppInstanceReq struct {
	Seq       uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid       string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Appid     string `protobuf:"bytes,3,opt,name=appid" json:"appid,omitempty"`
	Clusterid string `protobuf:"bytes,4,opt,name=clusterid" json:"clusterid,omitempty"`
	Zoneid    string `protobuf:"bytes,5,opt,name=zoneid" json:"zoneid,omitempty"`
	Dc        string `protobuf:"bytes,6,opt,name=dc" json:"dc,omitempty"`
	IP        string `protobuf:"bytes,7,opt,name=IP" json:"IP,omitempty"`
	Labels    string `protobuf:"bytes,8,opt,name=labels" json:"labels,omitempty"`
	State     int32  `protobuf:"varint,9,opt,name=state" json:"state,omitempty"`
}

func (m *CreateAppInstanceReq) Reset()                    { *m = CreateAppInstanceReq{} }
func (m *CreateAppInstanceReq) String() string            { return proto.CompactTextString(m) }
func (*CreateAppInstanceReq) ProtoMessage()               {}
func (*CreateAppInstanceReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{122} }

func (m *CreateAppInstanceReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *CreateAppInstanceReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *CreateAppInstanceReq) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

func (m *CreateAppInstanceReq) GetClusterid() string {
	if m != nil {
		return m.Clusterid
	}
	return ""
}

func (m *CreateAppInstanceReq) GetZoneid() string {
	if m != nil {
		return m.Zoneid
	}
	return ""
}

func (m *CreateAppInstanceReq) GetDc() string {
	if m != nil {
		return m.Dc
	}
	return ""
}

func (m *CreateAppInstanceReq) GetIP() string {
	if m != nil {
		return m.IP
	}
	return ""
}

func (m *CreateAppInstanceReq) GetLabels() string {
	if m != nil {
		return m.Labels
	}
	return ""
}

func (m *CreateAppInstanceReq) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

type CreateAppInstanceResp struct {
	Seq     uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg  string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
}

func (m *CreateAppInstanceResp) Reset()                    { *m = CreateAppInstanceResp{} }
func (m *CreateAppInstanceResp) String() string            { return proto.CompactTextString(m) }
func (*CreateAppInstanceResp) ProtoMessage()               {}
func (*CreateAppInstanceResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{123} }

func (m *CreateAppInstanceResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *CreateAppInstanceResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *CreateAppInstanceResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type QueryHistoryAppInstancesReq struct {
	Seq       uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid       string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Appid     string `protobuf:"bytes,3,opt,name=appid" json:"appid,omitempty"`
	Clusterid string `protobuf:"bytes,4,opt,name=clusterid" json:"clusterid,omitempty"`
	Zoneid    string `protobuf:"bytes,5,opt,name=zoneid" json:"zoneid,omitempty"`
	QueryType int32  `protobuf:"varint,6,opt,name=queryType" json:"queryType,omitempty"`
	Index     int32  `protobuf:"varint,7,opt,name=index" json:"index,omitempty"`
	Limit     int32  `protobuf:"varint,8,opt,name=limit" json:"limit,omitempty"`
}

func (m *QueryHistoryAppInstancesReq) Reset()                    { *m = QueryHistoryAppInstancesReq{} }
func (m *QueryHistoryAppInstancesReq) String() string            { return proto.CompactTextString(m) }
func (*QueryHistoryAppInstancesReq) ProtoMessage()               {}
func (*QueryHistoryAppInstancesReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{124} }

func (m *QueryHistoryAppInstancesReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryHistoryAppInstancesReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *QueryHistoryAppInstancesReq) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

func (m *QueryHistoryAppInstancesReq) GetClusterid() string {
	if m != nil {
		return m.Clusterid
	}
	return ""
}

func (m *QueryHistoryAppInstancesReq) GetZoneid() string {
	if m != nil {
		return m.Zoneid
	}
	return ""
}

func (m *QueryHistoryAppInstancesReq) GetQueryType() int32 {
	if m != nil {
		return m.QueryType
	}
	return 0
}

func (m *QueryHistoryAppInstancesReq) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *QueryHistoryAppInstancesReq) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type QueryHistoryAppInstancesResp struct {
	Seq       uint64                `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode   common.ErrCode        `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg    string                `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	Instances []*common.AppInstance `protobuf:"bytes,4,rep,name=instances" json:"instances,omitempty"`
}

func (m *QueryHistoryAppInstancesResp) Reset()                    { *m = QueryHistoryAppInstancesResp{} }
func (m *QueryHistoryAppInstancesResp) String() string            { return proto.CompactTextString(m) }
func (*QueryHistoryAppInstancesResp) ProtoMessage()               {}
func (*QueryHistoryAppInstancesResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{125} }

func (m *QueryHistoryAppInstancesResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryHistoryAppInstancesResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *QueryHistoryAppInstancesResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *QueryHistoryAppInstancesResp) GetInstances() []*common.AppInstance {
	if m != nil {
		return m.Instances
	}
	return nil
}

type QueryReachableAppInstancesReq struct {
	Seq       uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid       string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Appid     string `protobuf:"bytes,3,opt,name=appid" json:"appid,omitempty"`
	Clusterid string `protobuf:"bytes,4,opt,name=clusterid" json:"clusterid,omitempty"`
	Zoneid    string `protobuf:"bytes,5,opt,name=zoneid" json:"zoneid,omitempty"`
	Index     int32  `protobuf:"varint,6,opt,name=index" json:"index,omitempty"`
	Limit     int32  `protobuf:"varint,7,opt,name=limit" json:"limit,omitempty"`
}

func (m *QueryReachableAppInstancesReq) Reset()         { *m = QueryReachableAppInstancesReq{} }
func (m *QueryReachableAppInstancesReq) String() string { return proto.CompactTextString(m) }
func (*QueryReachableAppInstancesReq) ProtoMessage()    {}
func (*QueryReachableAppInstancesReq) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{126}
}

func (m *QueryReachableAppInstancesReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryReachableAppInstancesReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *QueryReachableAppInstancesReq) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

func (m *QueryReachableAppInstancesReq) GetClusterid() string {
	if m != nil {
		return m.Clusterid
	}
	return ""
}

func (m *QueryReachableAppInstancesReq) GetZoneid() string {
	if m != nil {
		return m.Zoneid
	}
	return ""
}

func (m *QueryReachableAppInstancesReq) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *QueryReachableAppInstancesReq) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type QueryReachableAppInstancesResp struct {
	Seq       uint64                `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode   common.ErrCode        `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg    string                `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	Instances []*common.AppInstance `protobuf:"bytes,4,rep,name=instances" json:"instances,omitempty"`
}

func (m *QueryReachableAppInstancesResp) Reset()         { *m = QueryReachableAppInstancesResp{} }
func (m *QueryReachableAppInstancesResp) String() string { return proto.CompactTextString(m) }
func (*QueryReachableAppInstancesResp) ProtoMessage()    {}
func (*QueryReachableAppInstancesResp) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{127}
}

func (m *QueryReachableAppInstancesResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryReachableAppInstancesResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *QueryReachableAppInstancesResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *QueryReachableAppInstancesResp) GetInstances() []*common.AppInstance {
	if m != nil {
		return m.Instances
	}
	return nil
}

type UpdateAppInstanceReq struct {
	Seq       uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid       string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Appid     string `protobuf:"bytes,3,opt,name=appid" json:"appid,omitempty"`
	Clusterid string `protobuf:"bytes,4,opt,name=clusterid" json:"clusterid,omitempty"`
	Zoneid    string `protobuf:"bytes,5,opt,name=zoneid" json:"zoneid,omitempty"`
	Dc        string `protobuf:"bytes,6,opt,name=dc" json:"dc,omitempty"`
	IP        string `protobuf:"bytes,7,opt,name=IP" json:"IP,omitempty"`
	Labels    string `protobuf:"bytes,8,opt,name=labels" json:"labels,omitempty"`
	State     int32  `protobuf:"varint,9,opt,name=state" json:"state,omitempty"`
}

func (m *UpdateAppInstanceReq) Reset()                    { *m = UpdateAppInstanceReq{} }
func (m *UpdateAppInstanceReq) String() string            { return proto.CompactTextString(m) }
func (*UpdateAppInstanceReq) ProtoMessage()               {}
func (*UpdateAppInstanceReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{128} }

func (m *UpdateAppInstanceReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *UpdateAppInstanceReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *UpdateAppInstanceReq) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

func (m *UpdateAppInstanceReq) GetClusterid() string {
	if m != nil {
		return m.Clusterid
	}
	return ""
}

func (m *UpdateAppInstanceReq) GetZoneid() string {
	if m != nil {
		return m.Zoneid
	}
	return ""
}

func (m *UpdateAppInstanceReq) GetDc() string {
	if m != nil {
		return m.Dc
	}
	return ""
}

func (m *UpdateAppInstanceReq) GetIP() string {
	if m != nil {
		return m.IP
	}
	return ""
}

func (m *UpdateAppInstanceReq) GetLabels() string {
	if m != nil {
		return m.Labels
	}
	return ""
}

func (m *UpdateAppInstanceReq) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

type UpdateAppInstanceResp struct {
	Seq     uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg  string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
}

func (m *UpdateAppInstanceResp) Reset()                    { *m = UpdateAppInstanceResp{} }
func (m *UpdateAppInstanceResp) String() string            { return proto.CompactTextString(m) }
func (*UpdateAppInstanceResp) ProtoMessage()               {}
func (*UpdateAppInstanceResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{129} }

func (m *UpdateAppInstanceResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *UpdateAppInstanceResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *UpdateAppInstanceResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type CreateAppInstanceReleaseReq struct {
	Seq       uint64               `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid       string               `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Appid     string               `protobuf:"bytes,3,opt,name=appid" json:"appid,omitempty"`
	Clusterid string               `protobuf:"bytes,4,opt,name=clusterid" json:"clusterid,omitempty"`
	Zoneid    string               `protobuf:"bytes,5,opt,name=zoneid" json:"zoneid,omitempty"`
	Dc        string               `protobuf:"bytes,6,opt,name=dc" json:"dc,omitempty"`
	IP        string               `protobuf:"bytes,7,opt,name=IP" json:"IP,omitempty"`
	Labels    string               `protobuf:"bytes,8,opt,name=labels" json:"labels,omitempty"`
	Infos     []*common.ReportInfo `protobuf:"bytes,9,rep,name=infos" json:"infos,omitempty"`
}

func (m *CreateAppInstanceReleaseReq) Reset()                    { *m = CreateAppInstanceReleaseReq{} }
func (m *CreateAppInstanceReleaseReq) String() string            { return proto.CompactTextString(m) }
func (*CreateAppInstanceReleaseReq) ProtoMessage()               {}
func (*CreateAppInstanceReleaseReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{130} }

func (m *CreateAppInstanceReleaseReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *CreateAppInstanceReleaseReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *CreateAppInstanceReleaseReq) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

func (m *CreateAppInstanceReleaseReq) GetClusterid() string {
	if m != nil {
		return m.Clusterid
	}
	return ""
}

func (m *CreateAppInstanceReleaseReq) GetZoneid() string {
	if m != nil {
		return m.Zoneid
	}
	return ""
}

func (m *CreateAppInstanceReleaseReq) GetDc() string {
	if m != nil {
		return m.Dc
	}
	return ""
}

func (m *CreateAppInstanceReleaseReq) GetIP() string {
	if m != nil {
		return m.IP
	}
	return ""
}

func (m *CreateAppInstanceReleaseReq) GetLabels() string {
	if m != nil {
		return m.Labels
	}
	return ""
}

func (m *CreateAppInstanceReleaseReq) GetInfos() []*common.ReportInfo {
	if m != nil {
		return m.Infos
	}
	return nil
}

type CreateAppInstanceReleaseResp struct {
	Seq     uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg  string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
}

func (m *CreateAppInstanceReleaseResp) Reset()                    { *m = CreateAppInstanceReleaseResp{} }
func (m *CreateAppInstanceReleaseResp) String() string            { return proto.CompactTextString(m) }
func (*CreateAppInstanceReleaseResp) ProtoMessage()               {}
func (*CreateAppInstanceReleaseResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{131} }

func (m *CreateAppInstanceReleaseResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *CreateAppInstanceReleaseResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *CreateAppInstanceReleaseResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type QueryAppInstanceReleaseReq struct {
	Seq       uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid       string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Appid     string `protobuf:"bytes,3,opt,name=appid" json:"appid,omitempty"`
	Clusterid string `protobuf:"bytes,4,opt,name=clusterid" json:"clusterid,omitempty"`
	Zoneid    string `protobuf:"bytes,5,opt,name=zoneid" json:"zoneid,omitempty"`
	Dc        string `protobuf:"bytes,6,opt,name=dc" json:"dc,omitempty"`
	IP        string `protobuf:"bytes,7,opt,name=IP" json:"IP,omitempty"`
	Cfgsetid  string `protobuf:"bytes,8,opt,name=cfgsetid" json:"cfgsetid,omitempty"`
}

func (m *QueryAppInstanceReleaseReq) Reset()                    { *m = QueryAppInstanceReleaseReq{} }
func (m *QueryAppInstanceReleaseReq) String() string            { return proto.CompactTextString(m) }
func (*QueryAppInstanceReleaseReq) ProtoMessage()               {}
func (*QueryAppInstanceReleaseReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{132} }

func (m *QueryAppInstanceReleaseReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryAppInstanceReleaseReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *QueryAppInstanceReleaseReq) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

func (m *QueryAppInstanceReleaseReq) GetClusterid() string {
	if m != nil {
		return m.Clusterid
	}
	return ""
}

func (m *QueryAppInstanceReleaseReq) GetZoneid() string {
	if m != nil {
		return m.Zoneid
	}
	return ""
}

func (m *QueryAppInstanceReleaseReq) GetDc() string {
	if m != nil {
		return m.Dc
	}
	return ""
}

func (m *QueryAppInstanceReleaseReq) GetIP() string {
	if m != nil {
		return m.IP
	}
	return ""
}

func (m *QueryAppInstanceReleaseReq) GetCfgsetid() string {
	if m != nil {
		return m.Cfgsetid
	}
	return ""
}

type QueryAppInstanceReleaseResp struct {
	Seq       uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode   common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg    string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	Releaseid string         `protobuf:"bytes,4,opt,name=releaseid" json:"releaseid,omitempty"`
	Commitid  string         `protobuf:"bytes,5,opt,name=commitid" json:"commitid,omitempty"`
	Cid       string         `protobuf:"bytes,6,opt,name=cid" json:"cid,omitempty"`
	CfgLink   string         `protobuf:"bytes,7,opt,name=cfgLink" json:"cfgLink,omitempty"`
	Content   []byte         `protobuf:"bytes,8,opt,name=content,proto3" json:"content,omitempty"`
}

func (m *QueryAppInstanceReleaseResp) Reset()                    { *m = QueryAppInstanceReleaseResp{} }
func (m *QueryAppInstanceReleaseResp) String() string            { return proto.CompactTextString(m) }
func (*QueryAppInstanceReleaseResp) ProtoMessage()               {}
func (*QueryAppInstanceReleaseResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{133} }

func (m *QueryAppInstanceReleaseResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryAppInstanceReleaseResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *QueryAppInstanceReleaseResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *QueryAppInstanceReleaseResp) GetReleaseid() string {
	if m != nil {
		return m.Releaseid
	}
	return ""
}

func (m *QueryAppInstanceReleaseResp) GetCommitid() string {
	if m != nil {
		return m.Commitid
	}
	return ""
}

func (m *QueryAppInstanceReleaseResp) GetCid() string {
	if m != nil {
		return m.Cid
	}
	return ""
}

func (m *QueryAppInstanceReleaseResp) GetCfgLink() string {
	if m != nil {
		return m.CfgLink
	}
	return ""
}

func (m *QueryAppInstanceReleaseResp) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

type QueryMatchedAppInstancesReq struct {
	Seq        uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid        string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Appid      string `protobuf:"bytes,3,opt,name=appid" json:"appid,omitempty"`
	Strategyid string `protobuf:"bytes,4,opt,name=strategyid" json:"strategyid,omitempty"`
	Index      int32  `protobuf:"varint,5,opt,name=index" json:"index,omitempty"`
	Limit      int32  `protobuf:"varint,6,opt,name=limit" json:"limit,omitempty"`
}

func (m *QueryMatchedAppInstancesReq) Reset()                    { *m = QueryMatchedAppInstancesReq{} }
func (m *QueryMatchedAppInstancesReq) String() string            { return proto.CompactTextString(m) }
func (*QueryMatchedAppInstancesReq) ProtoMessage()               {}
func (*QueryMatchedAppInstancesReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{134} }

func (m *QueryMatchedAppInstancesReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryMatchedAppInstancesReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *QueryMatchedAppInstancesReq) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

func (m *QueryMatchedAppInstancesReq) GetStrategyid() string {
	if m != nil {
		return m.Strategyid
	}
	return ""
}

func (m *QueryMatchedAppInstancesReq) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *QueryMatchedAppInstancesReq) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type QueryMatchedAppInstancesResp struct {
	Seq       uint64                `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode   common.ErrCode        `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg    string                `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	Instances []*common.AppInstance `protobuf:"bytes,4,rep,name=instances" json:"instances,omitempty"`
}

func (m *QueryMatchedAppInstancesResp) Reset()                    { *m = QueryMatchedAppInstancesResp{} }
func (m *QueryMatchedAppInstancesResp) String() string            { return proto.CompactTextString(m) }
func (*QueryMatchedAppInstancesResp) ProtoMessage()               {}
func (*QueryMatchedAppInstancesResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{135} }

func (m *QueryMatchedAppInstancesResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryMatchedAppInstancesResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *QueryMatchedAppInstancesResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *QueryMatchedAppInstancesResp) GetInstances() []*common.AppInstance {
	if m != nil {
		return m.Instances
	}
	return nil
}

type QueryEffectedAppInstancesReq struct {
	Seq       uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid       string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Cfgsetid  string `protobuf:"bytes,3,opt,name=cfgsetid" json:"cfgsetid,omitempty"`
	Releaseid string `protobuf:"bytes,4,opt,name=releaseid" json:"releaseid,omitempty"`
	Index     int32  `protobuf:"varint,5,opt,name=index" json:"index,omitempty"`
	Limit     int32  `protobuf:"varint,6,opt,name=limit" json:"limit,omitempty"`
}

func (m *QueryEffectedAppInstancesReq) Reset()                    { *m = QueryEffectedAppInstancesReq{} }
func (m *QueryEffectedAppInstancesReq) String() string            { return proto.CompactTextString(m) }
func (*QueryEffectedAppInstancesReq) ProtoMessage()               {}
func (*QueryEffectedAppInstancesReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{136} }

func (m *QueryEffectedAppInstancesReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryEffectedAppInstancesReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *QueryEffectedAppInstancesReq) GetCfgsetid() string {
	if m != nil {
		return m.Cfgsetid
	}
	return ""
}

func (m *QueryEffectedAppInstancesReq) GetReleaseid() string {
	if m != nil {
		return m.Releaseid
	}
	return ""
}

func (m *QueryEffectedAppInstancesReq) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *QueryEffectedAppInstancesReq) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type QueryEffectedAppInstancesResp struct {
	Seq       uint64                `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode   common.ErrCode        `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg    string                `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	Instances []*common.AppInstance `protobuf:"bytes,4,rep,name=instances" json:"instances,omitempty"`
}

func (m *QueryEffectedAppInstancesResp) Reset()         { *m = QueryEffectedAppInstancesResp{} }
func (m *QueryEffectedAppInstancesResp) String() string { return proto.CompactTextString(m) }
func (*QueryEffectedAppInstancesResp) ProtoMessage()    {}
func (*QueryEffectedAppInstancesResp) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{137}
}

func (m *QueryEffectedAppInstancesResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryEffectedAppInstancesResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *QueryEffectedAppInstancesResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *QueryEffectedAppInstancesResp) GetInstances() []*common.AppInstance {
	if m != nil {
		return m.Instances
	}
	return nil
}

type CreateStrategyReq struct {
	Seq        uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid        string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Appid      string `protobuf:"bytes,3,opt,name=appid" json:"appid,omitempty"`
	Strategyid string `protobuf:"bytes,4,opt,name=strategyid" json:"strategyid,omitempty"`
	Name       string `protobuf:"bytes,5,opt,name=name" json:"name,omitempty"`
	Content    string `protobuf:"bytes,6,opt,name=content" json:"content,omitempty"`
	Memo       string `protobuf:"bytes,7,opt,name=memo" json:"memo,omitempty"`
	Creator    string `protobuf:"bytes,8,opt,name=creator" json:"creator,omitempty"`
}

func (m *CreateStrategyReq) Reset()                    { *m = CreateStrategyReq{} }
func (m *CreateStrategyReq) String() string            { return proto.CompactTextString(m) }
func (*CreateStrategyReq) ProtoMessage()               {}
func (*CreateStrategyReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{138} }

func (m *CreateStrategyReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *CreateStrategyReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *CreateStrategyReq) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

func (m *CreateStrategyReq) GetStrategyid() string {
	if m != nil {
		return m.Strategyid
	}
	return ""
}

func (m *CreateStrategyReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateStrategyReq) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *CreateStrategyReq) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *CreateStrategyReq) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

type CreateStrategyResp struct {
	Seq        uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode    common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg     string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	Strategyid string         `protobuf:"bytes,4,opt,name=strategyid" json:"strategyid,omitempty"`
}

func (m *CreateStrategyResp) Reset()                    { *m = CreateStrategyResp{} }
func (m *CreateStrategyResp) String() string            { return proto.CompactTextString(m) }
func (*CreateStrategyResp) ProtoMessage()               {}
func (*CreateStrategyResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{139} }

func (m *CreateStrategyResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *CreateStrategyResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *CreateStrategyResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *CreateStrategyResp) GetStrategyid() string {
	if m != nil {
		return m.Strategyid
	}
	return ""
}

type QueryStrategyReq struct {
	Seq        uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid        string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Appid      string `protobuf:"bytes,3,opt,name=appid" json:"appid,omitempty"`
	Strategyid string `protobuf:"bytes,4,opt,name=strategyid" json:"strategyid,omitempty"`
	Name       string `protobuf:"bytes,5,opt,name=name" json:"name,omitempty"`
}

func (m *QueryStrategyReq) Reset()                    { *m = QueryStrategyReq{} }
func (m *QueryStrategyReq) String() string            { return proto.CompactTextString(m) }
func (*QueryStrategyReq) ProtoMessage()               {}
func (*QueryStrategyReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{140} }

func (m *QueryStrategyReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryStrategyReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *QueryStrategyReq) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

func (m *QueryStrategyReq) GetStrategyid() string {
	if m != nil {
		return m.Strategyid
	}
	return ""
}

func (m *QueryStrategyReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type QueryStrategyResp struct {
	Seq      uint64           `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode  common.ErrCode   `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg   string           `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	Strategy *common.Strategy `protobuf:"bytes,4,opt,name=strategy" json:"strategy,omitempty"`
}

func (m *QueryStrategyResp) Reset()                    { *m = QueryStrategyResp{} }
func (m *QueryStrategyResp) String() string            { return proto.CompactTextString(m) }
func (*QueryStrategyResp) ProtoMessage()               {}
func (*QueryStrategyResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{141} }

func (m *QueryStrategyResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryStrategyResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *QueryStrategyResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *QueryStrategyResp) GetStrategy() *common.Strategy {
	if m != nil {
		return m.Strategy
	}
	return nil
}

type QueryStrategyListReq struct {
	Seq     uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid     string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Appid   string `protobuf:"bytes,3,opt,name=appid" json:"appid,omitempty"`
	AppName string `protobuf:"bytes,4,opt,name=appName" json:"appName,omitempty"`
	Index   int32  `protobuf:"varint,5,opt,name=index" json:"index,omitempty"`
	Limit   int32  `protobuf:"varint,6,opt,name=limit" json:"limit,omitempty"`
}

func (m *QueryStrategyListReq) Reset()                    { *m = QueryStrategyListReq{} }
func (m *QueryStrategyListReq) String() string            { return proto.CompactTextString(m) }
func (*QueryStrategyListReq) ProtoMessage()               {}
func (*QueryStrategyListReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{142} }

func (m *QueryStrategyListReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryStrategyListReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *QueryStrategyListReq) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

func (m *QueryStrategyListReq) GetAppName() string {
	if m != nil {
		return m.AppName
	}
	return ""
}

func (m *QueryStrategyListReq) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *QueryStrategyListReq) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type QueryStrategyListResp struct {
	Seq        uint64             `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode    common.ErrCode     `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg     string             `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	Strategies []*common.Strategy `protobuf:"bytes,4,rep,name=strategies" json:"strategies,omitempty"`
}

func (m *QueryStrategyListResp) Reset()                    { *m = QueryStrategyListResp{} }
func (m *QueryStrategyListResp) String() string            { return proto.CompactTextString(m) }
func (*QueryStrategyListResp) ProtoMessage()               {}
func (*QueryStrategyListResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{143} }

func (m *QueryStrategyListResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryStrategyListResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *QueryStrategyListResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *QueryStrategyListResp) GetStrategies() []*common.Strategy {
	if m != nil {
		return m.Strategies
	}
	return nil
}

type DeleteStrategyReq struct {
	Seq        uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid        string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Strategyid string `protobuf:"bytes,3,opt,name=strategyid" json:"strategyid,omitempty"`
	Operator   string `protobuf:"bytes,4,opt,name=operator" json:"operator,omitempty"`
}

func (m *DeleteStrategyReq) Reset()                    { *m = DeleteStrategyReq{} }
func (m *DeleteStrategyReq) String() string            { return proto.CompactTextString(m) }
func (*DeleteStrategyReq) ProtoMessage()               {}
func (*DeleteStrategyReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{144} }

func (m *DeleteStrategyReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *DeleteStrategyReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *DeleteStrategyReq) GetStrategyid() string {
	if m != nil {
		return m.Strategyid
	}
	return ""
}

func (m *DeleteStrategyReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

type DeleteStrategyResp struct {
	Seq     uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg  string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
}

func (m *DeleteStrategyResp) Reset()                    { *m = DeleteStrategyResp{} }
func (m *DeleteStrategyResp) String() string            { return proto.CompactTextString(m) }
func (*DeleteStrategyResp) ProtoMessage()               {}
func (*DeleteStrategyResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{145} }

func (m *DeleteStrategyResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *DeleteStrategyResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *DeleteStrategyResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type CreateShardingDBReq struct {
	Seq      uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Dbid     string `protobuf:"bytes,2,opt,name=dbid" json:"dbid,omitempty"`
	Host     string `protobuf:"bytes,3,opt,name=host" json:"host,omitempty"`
	Port     int32  `protobuf:"varint,4,opt,name=port" json:"port,omitempty"`
	User     string `protobuf:"bytes,5,opt,name=user" json:"user,omitempty"`
	Password string `protobuf:"bytes,6,opt,name=password" json:"password,omitempty"`
	Memo     string `protobuf:"bytes,7,opt,name=memo" json:"memo,omitempty"`
	State    int32  `protobuf:"varint,8,opt,name=state" json:"state,omitempty"`
}

func (m *CreateShardingDBReq) Reset()                    { *m = CreateShardingDBReq{} }
func (m *CreateShardingDBReq) String() string            { return proto.CompactTextString(m) }
func (*CreateShardingDBReq) ProtoMessage()               {}
func (*CreateShardingDBReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{146} }

func (m *CreateShardingDBReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *CreateShardingDBReq) GetDbid() string {
	if m != nil {
		return m.Dbid
	}
	return ""
}

func (m *CreateShardingDBReq) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *CreateShardingDBReq) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *CreateShardingDBReq) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *CreateShardingDBReq) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *CreateShardingDBReq) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *CreateShardingDBReq) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

type CreateShardingDBResp struct {
	Seq     uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg  string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
}

func (m *CreateShardingDBResp) Reset()                    { *m = CreateShardingDBResp{} }
func (m *CreateShardingDBResp) String() string            { return proto.CompactTextString(m) }
func (*CreateShardingDBResp) ProtoMessage()               {}
func (*CreateShardingDBResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{147} }

func (m *CreateShardingDBResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *CreateShardingDBResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *CreateShardingDBResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type QueryShardingDBReq struct {
	Seq  uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Dbid string `protobuf:"bytes,2,opt,name=dbid" json:"dbid,omitempty"`
}

func (m *QueryShardingDBReq) Reset()                    { *m = QueryShardingDBReq{} }
func (m *QueryShardingDBReq) String() string            { return proto.CompactTextString(m) }
func (*QueryShardingDBReq) ProtoMessage()               {}
func (*QueryShardingDBReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{148} }

func (m *QueryShardingDBReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryShardingDBReq) GetDbid() string {
	if m != nil {
		return m.Dbid
	}
	return ""
}

type QueryShardingDBResp struct {
	Seq        uint64             `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode    common.ErrCode     `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg     string             `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	ShardingDB *common.ShardingDB `protobuf:"bytes,4,opt,name=shardingDB" json:"shardingDB,omitempty"`
}

func (m *QueryShardingDBResp) Reset()                    { *m = QueryShardingDBResp{} }
func (m *QueryShardingDBResp) String() string            { return proto.CompactTextString(m) }
func (*QueryShardingDBResp) ProtoMessage()               {}
func (*QueryShardingDBResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{149} }

func (m *QueryShardingDBResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryShardingDBResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *QueryShardingDBResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *QueryShardingDBResp) GetShardingDB() *common.ShardingDB {
	if m != nil {
		return m.ShardingDB
	}
	return nil
}

type QueryShardingDBListReq struct {
	Seq uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
}

func (m *QueryShardingDBListReq) Reset()                    { *m = QueryShardingDBListReq{} }
func (m *QueryShardingDBListReq) String() string            { return proto.CompactTextString(m) }
func (*QueryShardingDBListReq) ProtoMessage()               {}
func (*QueryShardingDBListReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{150} }

func (m *QueryShardingDBListReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

type QueryShardingDBListResp struct {
	Seq         uint64               `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode     common.ErrCode       `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg      string               `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	ShardingDBs []*common.ShardingDB `protobuf:"bytes,4,rep,name=shardingDBs" json:"shardingDBs,omitempty"`
}

func (m *QueryShardingDBListResp) Reset()                    { *m = QueryShardingDBListResp{} }
func (m *QueryShardingDBListResp) String() string            { return proto.CompactTextString(m) }
func (*QueryShardingDBListResp) ProtoMessage()               {}
func (*QueryShardingDBListResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{151} }

func (m *QueryShardingDBListResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryShardingDBListResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *QueryShardingDBListResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *QueryShardingDBListResp) GetShardingDBs() []*common.ShardingDB {
	if m != nil {
		return m.ShardingDBs
	}
	return nil
}

type UpdateShardingDBReq struct {
	Seq      uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Dbid     string `protobuf:"bytes,2,opt,name=dbid" json:"dbid,omitempty"`
	Host     string `protobuf:"bytes,3,opt,name=host" json:"host,omitempty"`
	Port     int32  `protobuf:"varint,4,opt,name=port" json:"port,omitempty"`
	User     string `protobuf:"bytes,5,opt,name=user" json:"user,omitempty"`
	Password string `protobuf:"bytes,6,opt,name=password" json:"password,omitempty"`
	Memo     string `protobuf:"bytes,7,opt,name=memo" json:"memo,omitempty"`
	State    int32  `protobuf:"varint,8,opt,name=state" json:"state,omitempty"`
}

func (m *UpdateShardingDBReq) Reset()                    { *m = UpdateShardingDBReq{} }
func (m *UpdateShardingDBReq) String() string            { return proto.CompactTextString(m) }
func (*UpdateShardingDBReq) ProtoMessage()               {}
func (*UpdateShardingDBReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{152} }

func (m *UpdateShardingDBReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *UpdateShardingDBReq) GetDbid() string {
	if m != nil {
		return m.Dbid
	}
	return ""
}

func (m *UpdateShardingDBReq) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *UpdateShardingDBReq) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *UpdateShardingDBReq) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *UpdateShardingDBReq) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *UpdateShardingDBReq) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *UpdateShardingDBReq) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

type UpdateShardingDBResp struct {
	Seq     uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg  string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
}

func (m *UpdateShardingDBResp) Reset()                    { *m = UpdateShardingDBResp{} }
func (m *UpdateShardingDBResp) String() string            { return proto.CompactTextString(m) }
func (*UpdateShardingDBResp) ProtoMessage()               {}
func (*UpdateShardingDBResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{153} }

func (m *UpdateShardingDBResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *UpdateShardingDBResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *UpdateShardingDBResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type CreateShardingReq struct {
	Seq    uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Key    string `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
	Dbid   string `protobuf:"bytes,3,opt,name=dbid" json:"dbid,omitempty"`
	Dbname string `protobuf:"bytes,4,opt,name=dbname" json:"dbname,omitempty"`
	Memo   string `protobuf:"bytes,5,opt,name=memo" json:"memo,omitempty"`
	State  int32  `protobuf:"varint,6,opt,name=state" json:"state,omitempty"`
}

func (m *CreateShardingReq) Reset()                    { *m = CreateShardingReq{} }
func (m *CreateShardingReq) String() string            { return proto.CompactTextString(m) }
func (*CreateShardingReq) ProtoMessage()               {}
func (*CreateShardingReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{154} }

func (m *CreateShardingReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *CreateShardingReq) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *CreateShardingReq) GetDbid() string {
	if m != nil {
		return m.Dbid
	}
	return ""
}

func (m *CreateShardingReq) GetDbname() string {
	if m != nil {
		return m.Dbname
	}
	return ""
}

func (m *CreateShardingReq) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *CreateShardingReq) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

type CreateShardingResp struct {
	Seq     uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg  string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
}

func (m *CreateShardingResp) Reset()                    { *m = CreateShardingResp{} }
func (m *CreateShardingResp) String() string            { return proto.CompactTextString(m) }
func (*CreateShardingResp) ProtoMessage()               {}
func (*CreateShardingResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{155} }

func (m *CreateShardingResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *CreateShardingResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *CreateShardingResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type QueryShardingReq struct {
	Seq uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Key string `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
}

func (m *QueryShardingReq) Reset()                    { *m = QueryShardingReq{} }
func (m *QueryShardingReq) String() string            { return proto.CompactTextString(m) }
func (*QueryShardingReq) ProtoMessage()               {}
func (*QueryShardingReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{156} }

func (m *QueryShardingReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryShardingReq) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type QueryShardingResp struct {
	Seq      uint64           `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode  common.ErrCode   `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg   string           `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	Sharding *common.Sharding `protobuf:"bytes,4,opt,name=sharding" json:"sharding,omitempty"`
}

func (m *QueryShardingResp) Reset()                    { *m = QueryShardingResp{} }
func (m *QueryShardingResp) String() string            { return proto.CompactTextString(m) }
func (*QueryShardingResp) ProtoMessage()               {}
func (*QueryShardingResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{157} }

func (m *QueryShardingResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryShardingResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *QueryShardingResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *QueryShardingResp) GetSharding() *common.Sharding {
	if m != nil {
		return m.Sharding
	}
	return nil
}

type UpdateShardingReq struct {
	Seq    uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Key    string `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
	Dbid   string `protobuf:"bytes,3,opt,name=dbid" json:"dbid,omitempty"`
	Dbname string `protobuf:"bytes,4,opt,name=dbname" json:"dbname,omitempty"`
	Memo   string `protobuf:"bytes,5,opt,name=memo" json:"memo,omitempty"`
	State  int32  `protobuf:"varint,6,opt,name=state" json:"state,omitempty"`
}

func (m *UpdateShardingReq) Reset()                    { *m = UpdateShardingReq{} }
func (m *UpdateShardingReq) String() string            { return proto.CompactTextString(m) }
func (*UpdateShardingReq) ProtoMessage()               {}
func (*UpdateShardingReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{158} }

func (m *UpdateShardingReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *UpdateShardingReq) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *UpdateShardingReq) GetDbid() string {
	if m != nil {
		return m.Dbid
	}
	return ""
}

func (m *UpdateShardingReq) GetDbname() string {
	if m != nil {
		return m.Dbname
	}
	return ""
}

func (m *UpdateShardingReq) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *UpdateShardingReq) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

type UpdateShardingResp struct {
	Seq     uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg  string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
}

func (m *UpdateShardingResp) Reset()                    { *m = UpdateShardingResp{} }
func (m *UpdateShardingResp) String() string            { return proto.CompactTextString(m) }
func (*UpdateShardingResp) ProtoMessage()               {}
func (*UpdateShardingResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{159} }

func (m *UpdateShardingResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *UpdateShardingResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *UpdateShardingResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type CreateAuditReq struct {
	Seq        uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	SourceType int32  `protobuf:"varint,2,opt,name=sourceType" json:"sourceType,omitempty"`
	OpType     int32  `protobuf:"varint,3,opt,name=opType" json:"opType,omitempty"`
	Bid        string `protobuf:"bytes,4,opt,name=bid" json:"bid,omitempty"`
	Sourceid   string `protobuf:"bytes,5,opt,name=sourceid" json:"sourceid,omitempty"`
	Operator   string `protobuf:"bytes,6,opt,name=operator" json:"operator,omitempty"`
	Memo       string `protobuf:"bytes,7,opt,name=memo" json:"memo,omitempty"`
	State      int32  `protobuf:"varint,8,opt,name=state" json:"state,omitempty"`
}

func (m *CreateAuditReq) Reset()                    { *m = CreateAuditReq{} }
func (m *CreateAuditReq) String() string            { return proto.CompactTextString(m) }
func (*CreateAuditReq) ProtoMessage()               {}
func (*CreateAuditReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{160} }

func (m *CreateAuditReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *CreateAuditReq) GetSourceType() int32 {
	if m != nil {
		return m.SourceType
	}
	return 0
}

func (m *CreateAuditReq) GetOpType() int32 {
	if m != nil {
		return m.OpType
	}
	return 0
}

func (m *CreateAuditReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *CreateAuditReq) GetSourceid() string {
	if m != nil {
		return m.Sourceid
	}
	return ""
}

func (m *CreateAuditReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *CreateAuditReq) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *CreateAuditReq) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

type CreateAuditResp struct {
	Seq     uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg  string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
}

func (m *CreateAuditResp) Reset()                    { *m = CreateAuditResp{} }
func (m *CreateAuditResp) String() string            { return proto.CompactTextString(m) }
func (*CreateAuditResp) ProtoMessage()               {}
func (*CreateAuditResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{161} }

func (m *CreateAuditResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *CreateAuditResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *CreateAuditResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type QueryAuditListReq struct {
	Seq        uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid        string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	SourceType int32  `protobuf:"varint,3,opt,name=sourceType" json:"sourceType,omitempty"`
	OpType     int32  `protobuf:"varint,4,opt,name=opType" json:"opType,omitempty"`
	Sourceid   string `protobuf:"bytes,5,opt,name=sourceid" json:"sourceid,omitempty"`
	Operator   string `protobuf:"bytes,6,opt,name=operator" json:"operator,omitempty"`
	Index      int32  `protobuf:"varint,7,opt,name=index" json:"index,omitempty"`
	Limit      int32  `protobuf:"varint,8,opt,name=limit" json:"limit,omitempty"`
}

func (m *QueryAuditListReq) Reset()                    { *m = QueryAuditListReq{} }
func (m *QueryAuditListReq) String() string            { return proto.CompactTextString(m) }
func (*QueryAuditListReq) ProtoMessage()               {}
func (*QueryAuditListReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{162} }

func (m *QueryAuditListReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryAuditListReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *QueryAuditListReq) GetSourceType() int32 {
	if m != nil {
		return m.SourceType
	}
	return 0
}

func (m *QueryAuditListReq) GetOpType() int32 {
	if m != nil {
		return m.OpType
	}
	return 0
}

func (m *QueryAuditListReq) GetSourceid() string {
	if m != nil {
		return m.Sourceid
	}
	return ""
}

func (m *QueryAuditListReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *QueryAuditListReq) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *QueryAuditListReq) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type QueryAuditListResp struct {
	Seq     uint64          `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode common.ErrCode  `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg  string          `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	Audits  []*common.Audit `protobuf:"bytes,4,rep,name=audits" json:"audits,omitempty"`
}

func (m *QueryAuditListResp) Reset()                    { *m = QueryAuditListResp{} }
func (m *QueryAuditListResp) String() string            { return proto.CompactTextString(m) }
func (*QueryAuditListResp) ProtoMessage()               {}
func (*QueryAuditListResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{163} }

func (m *QueryAuditListResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryAuditListResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *QueryAuditListResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *QueryAuditListResp) GetAudits() []*common.Audit {
	if m != nil {
		return m.Audits
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryAuthInfoReq)(nil), "datamanager.QueryAuthInfoReq")
	proto.RegisterType((*QueryAuthInfoResp)(nil), "datamanager.QueryAuthInfoResp")
	proto.RegisterType((*QueryAppMetadataReq)(nil), "datamanager.QueryAppMetadataReq")
	proto.RegisterType((*QueryAppMetadataResp)(nil), "datamanager.QueryAppMetadataResp")
	proto.RegisterType((*CreateBusinessReq)(nil), "datamanager.CreateBusinessReq")
	proto.RegisterType((*CreateBusinessResp)(nil), "datamanager.CreateBusinessResp")
	proto.RegisterType((*QueryBusinessReq)(nil), "datamanager.QueryBusinessReq")
	proto.RegisterType((*QueryBusinessResp)(nil), "datamanager.QueryBusinessResp")
	proto.RegisterType((*QueryBusinessListReq)(nil), "datamanager.QueryBusinessListReq")
	proto.RegisterType((*QueryBusinessListResp)(nil), "datamanager.QueryBusinessListResp")
	proto.RegisterType((*UpdateBusinessReq)(nil), "datamanager.UpdateBusinessReq")
	proto.RegisterType((*UpdateBusinessResp)(nil), "datamanager.UpdateBusinessResp")
	proto.RegisterType((*CreateAppReq)(nil), "datamanager.CreateAppReq")
	proto.RegisterType((*CreateAppResp)(nil), "datamanager.CreateAppResp")
	proto.RegisterType((*QueryAppReq)(nil), "datamanager.QueryAppReq")
	proto.RegisterType((*QueryAppResp)(nil), "datamanager.QueryAppResp")
	proto.RegisterType((*QueryAppListReq)(nil), "datamanager.QueryAppListReq")
	proto.RegisterType((*QueryAppListResp)(nil), "datamanager.QueryAppListResp")
	proto.RegisterType((*UpdateAppReq)(nil), "datamanager.UpdateAppReq")
	proto.RegisterType((*UpdateAppResp)(nil), "datamanager.UpdateAppResp")
	proto.RegisterType((*DeleteAppReq)(nil), "datamanager.DeleteAppReq")
	proto.RegisterType((*DeleteAppResp)(nil), "datamanager.DeleteAppResp")
	proto.RegisterType((*CreateClusterReq)(nil), "datamanager.CreateClusterReq")
	proto.RegisterType((*CreateClusterResp)(nil), "datamanager.CreateClusterResp")
	proto.RegisterType((*QueryClusterReq)(nil), "datamanager.QueryClusterReq")
	proto.RegisterType((*QueryClusterResp)(nil), "datamanager.QueryClusterResp")
	proto.RegisterType((*QueryClusterListReq)(nil), "datamanager.QueryClusterListReq")
	proto.RegisterType((*QueryClusterListResp)(nil), "datamanager.QueryClusterListResp")
	proto.RegisterType((*UpdateClusterReq)(nil), "datamanager.UpdateClusterReq")
	proto.RegisterType((*UpdateClusterResp)(nil), "datamanager.UpdateClusterResp")
	proto.RegisterType((*DeleteClusterReq)(nil), "datamanager.DeleteClusterReq")
	proto.RegisterType((*DeleteClusterResp)(nil), "datamanager.DeleteClusterResp")
	proto.RegisterType((*CreateZoneReq)(nil), "datamanager.CreateZoneReq")
	proto.RegisterType((*CreateZoneResp)(nil), "datamanager.CreateZoneResp")
	proto.RegisterType((*QueryZoneReq)(nil), "datamanager.QueryZoneReq")
	proto.RegisterType((*QueryZoneResp)(nil), "datamanager.QueryZoneResp")
	proto.RegisterType((*QueryZoneListReq)(nil), "datamanager.QueryZoneListReq")
	proto.RegisterType((*QueryZoneListResp)(nil), "datamanager.QueryZoneListResp")
	proto.RegisterType((*UpdateZoneReq)(nil), "datamanager.UpdateZoneReq")
	proto.RegisterType((*UpdateZoneResp)(nil), "datamanager.UpdateZoneResp")
	proto.RegisterType((*DeleteZoneReq)(nil), "datamanager.DeleteZoneReq")
	proto.RegisterType((*DeleteZoneResp)(nil), "datamanager.DeleteZoneResp")
	proto.RegisterType((*CreateConfigSetReq)(nil), "datamanager.CreateConfigSetReq")
	proto.RegisterType((*CreateConfigSetResp)(nil), "datamanager.CreateConfigSetResp")
	proto.RegisterType((*QueryConfigSetReq)(nil), "datamanager.QueryConfigSetReq")
	proto.RegisterType((*QueryConfigSetResp)(nil), "datamanager.QueryConfigSetResp")
	proto.RegisterType((*QueryConfigSetListReq)(nil), "datamanager.QueryConfigSetListReq")
	proto.RegisterType((*QueryConfigSetListResp)(nil), "datamanager.QueryConfigSetListResp")
	proto.RegisterType((*UpdateConfigSetReq)(nil), "datamanager.UpdateConfigSetReq")
	proto.RegisterType((*UpdateConfigSetResp)(nil), "datamanager.UpdateConfigSetResp")
	proto.RegisterType((*DeleteConfigSetReq)(nil), "datamanager.DeleteConfigSetReq")
	proto.RegisterType((*DeleteConfigSetResp)(nil), "datamanager.DeleteConfigSetResp")
	proto.RegisterType((*LockConfigSetReq)(nil), "datamanager.LockConfigSetReq")
	proto.RegisterType((*LockConfigSetResp)(nil), "datamanager.LockConfigSetResp")
	proto.RegisterType((*UnlockConfigSetReq)(nil), "datamanager.UnlockConfigSetReq")
	proto.RegisterType((*UnlockConfigSetResp)(nil), "datamanager.UnlockConfigSetResp")
	proto.RegisterType((*CreateConfigsReq)(nil), "datamanager.CreateConfigsReq")
	proto.RegisterType((*CreateConfigsResp)(nil), "datamanager.CreateConfigsResp")
	proto.RegisterType((*QueryConfigsReq)(nil), "datamanager.QueryConfigsReq")
	proto.RegisterType((*QueryConfigsResp)(nil), "datamanager.QueryConfigsResp")
	proto.RegisterType((*QueryReleaseConfigsReq)(nil), "datamanager.QueryReleaseConfigsReq")
	proto.RegisterType((*QueryReleaseConfigsResp)(nil), "datamanager.QueryReleaseConfigsResp")
	proto.RegisterType((*QueryConfigsListReq)(nil), "datamanager.QueryConfigsListReq")
	proto.RegisterType((*QueryConfigsListResp)(nil), "datamanager.QueryConfigsListResp")
	proto.RegisterType((*CreateCommitReq)(nil), "datamanager.CreateCommitReq")
	proto.RegisterType((*CreateCommitResp)(nil), "datamanager.CreateCommitResp")
	proto.RegisterType((*QueryCommitReq)(nil), "datamanager.QueryCommitReq")
	proto.RegisterType((*QueryCommitResp)(nil), "datamanager.QueryCommitResp")
	proto.RegisterType((*QueryHistoryCommitsReq)(nil), "datamanager.QueryHistoryCommitsReq")
	proto.RegisterType((*QueryHistoryCommitsResp)(nil), "datamanager.QueryHistoryCommitsResp")
	proto.RegisterType((*UpdateCommitReq)(nil), "datamanager.UpdateCommitReq")
	proto.RegisterType((*UpdateCommitResp)(nil), "datamanager.UpdateCommitResp")
	proto.RegisterType((*CancelCommitReq)(nil), "datamanager.CancelCommitReq")
	proto.RegisterType((*CancelCommitResp)(nil), "datamanager.CancelCommitResp")
	proto.RegisterType((*ConfirmCommitReq)(nil), "datamanager.ConfirmCommitReq")
	proto.RegisterType((*ConfirmCommitResp)(nil), "datamanager.ConfirmCommitResp")
	proto.RegisterType((*CreateMultiCommitReq)(nil), "datamanager.CreateMultiCommitReq")
	proto.RegisterType((*CreateMultiCommitResp)(nil), "datamanager.CreateMultiCommitResp")
	proto.RegisterType((*QueryMultiCommitReq)(nil), "datamanager.QueryMultiCommitReq")
	proto.RegisterType((*QueryMultiCommitResp)(nil), "datamanager.QueryMultiCommitResp")
	proto.RegisterType((*QueryHistoryMultiCommitsReq)(nil), "datamanager.QueryHistoryMultiCommitsReq")
	proto.RegisterType((*QueryHistoryMultiCommitsResp)(nil), "datamanager.QueryHistoryMultiCommitsResp")
	proto.RegisterType((*QueryMultiCommitSubListReq)(nil), "datamanager.QueryMultiCommitSubListReq")
	proto.RegisterType((*QueryMultiCommitSubListResp)(nil), "datamanager.QueryMultiCommitSubListResp")
	proto.RegisterType((*UpdateMultiCommitReq)(nil), "datamanager.UpdateMultiCommitReq")
	proto.RegisterType((*UpdateMultiCommitResp)(nil), "datamanager.UpdateMultiCommitResp")
	proto.RegisterType((*CancelMultiCommitReq)(nil), "datamanager.CancelMultiCommitReq")
	proto.RegisterType((*CancelMultiCommitResp)(nil), "datamanager.CancelMultiCommitResp")
	proto.RegisterType((*ConfirmMultiCommitReq)(nil), "datamanager.ConfirmMultiCommitReq")
	proto.RegisterType((*ConfirmMultiCommitResp)(nil), "datamanager.ConfirmMultiCommitResp")
	proto.RegisterType((*CreateReleaseReq)(nil), "datamanager.CreateReleaseReq")
	proto.RegisterType((*CreateReleaseResp)(nil), "datamanager.CreateReleaseResp")
	proto.RegisterType((*QueryReleaseReq)(nil), "datamanager.QueryReleaseReq")
	proto.RegisterType((*QueryReleaseResp)(nil), "datamanager.QueryReleaseResp")
	proto.RegisterType((*QueryNewestReleasesReq)(nil), "datamanager.QueryNewestReleasesReq")
	proto.RegisterType((*QueryNewestReleasesResp)(nil), "datamanager.QueryNewestReleasesResp")
	proto.RegisterType((*QueryHistoryReleasesReq)(nil), "datamanager.QueryHistoryReleasesReq")
	proto.RegisterType((*QueryHistoryReleasesResp)(nil), "datamanager.QueryHistoryReleasesResp")
	proto.RegisterType((*UpdateReleaseReq)(nil), "datamanager.UpdateReleaseReq")
	proto.RegisterType((*UpdateReleaseResp)(nil), "datamanager.UpdateReleaseResp")
	proto.RegisterType((*CancelReleaseReq)(nil), "datamanager.CancelReleaseReq")
	proto.RegisterType((*CancelReleaseResp)(nil), "datamanager.CancelReleaseResp")
	proto.RegisterType((*RollbackReleaseReq)(nil), "datamanager.RollbackReleaseReq")
	proto.RegisterType((*RollbackReleaseResp)(nil), "datamanager.RollbackReleaseResp")
	proto.RegisterType((*PublishReleaseReq)(nil), "datamanager.PublishReleaseReq")
	proto.RegisterType((*PublishReleaseResp)(nil), "datamanager.PublishReleaseResp")
	proto.RegisterType((*CreateMultiReleaseReq)(nil), "datamanager.CreateMultiReleaseReq")
	proto.RegisterType((*CreateMultiReleaseResp)(nil), "datamanager.CreateMultiReleaseResp")
	proto.RegisterType((*QueryMultiReleaseReq)(nil), "datamanager.QueryMultiReleaseReq")
	proto.RegisterType((*QueryMultiReleaseResp)(nil), "datamanager.QueryMultiReleaseResp")
	proto.RegisterType((*QueryHistoryMultiReleasesReq)(nil), "datamanager.QueryHistoryMultiReleasesReq")
	proto.RegisterType((*QueryHistoryMultiReleasesResp)(nil), "datamanager.QueryHistoryMultiReleasesResp")
	proto.RegisterType((*UpdateMultiReleaseReq)(nil), "datamanager.UpdateMultiReleaseReq")
	proto.RegisterType((*UpdateMultiReleaseResp)(nil), "datamanager.UpdateMultiReleaseResp")
	proto.RegisterType((*QueryMultiReleaseSubListReq)(nil), "datamanager.QueryMultiReleaseSubListReq")
	proto.RegisterType((*QueryMultiReleaseSubListResp)(nil), "datamanager.QueryMultiReleaseSubListResp")
	proto.RegisterType((*CancelMultiReleaseReq)(nil), "datamanager.CancelMultiReleaseReq")
	proto.RegisterType((*CancelMultiReleaseResp)(nil), "datamanager.CancelMultiReleaseResp")
	proto.RegisterType((*PublishMultiReleaseReq)(nil), "datamanager.PublishMultiReleaseReq")
	proto.RegisterType((*PublishMultiReleaseResp)(nil), "datamanager.PublishMultiReleaseResp")
	proto.RegisterType((*RollbackMultiReleaseReq)(nil), "datamanager.RollbackMultiReleaseReq")
	proto.RegisterType((*RollbackMultiReleaseResp)(nil), "datamanager.RollbackMultiReleaseResp")
	proto.RegisterType((*CreateAppInstanceReq)(nil), "datamanager.CreateAppInstanceReq")
	proto.RegisterType((*CreateAppInstanceResp)(nil), "datamanager.CreateAppInstanceResp")
	proto.RegisterType((*QueryHistoryAppInstancesReq)(nil), "datamanager.QueryHistoryAppInstancesReq")
	proto.RegisterType((*QueryHistoryAppInstancesResp)(nil), "datamanager.QueryHistoryAppInstancesResp")
	proto.RegisterType((*QueryReachableAppInstancesReq)(nil), "datamanager.QueryReachableAppInstancesReq")
	proto.RegisterType((*QueryReachableAppInstancesResp)(nil), "datamanager.QueryReachableAppInstancesResp")
	proto.RegisterType((*UpdateAppInstanceReq)(nil), "datamanager.UpdateAppInstanceReq")
	proto.RegisterType((*UpdateAppInstanceResp)(nil), "datamanager.UpdateAppInstanceResp")
	proto.RegisterType((*CreateAppInstanceReleaseReq)(nil), "datamanager.CreateAppInstanceReleaseReq")
	proto.RegisterType((*CreateAppInstanceReleaseResp)(nil), "datamanager.CreateAppInstanceReleaseResp")
	proto.RegisterType((*QueryAppInstanceReleaseReq)(nil), "datamanager.QueryAppInstanceReleaseReq")
	proto.RegisterType((*QueryAppInstanceReleaseResp)(nil), "datamanager.QueryAppInstanceReleaseResp")
	proto.RegisterType((*QueryMatchedAppInstancesReq)(nil), "datamanager.QueryMatchedAppInstancesReq")
	proto.RegisterType((*QueryMatchedAppInstancesResp)(nil), "datamanager.QueryMatchedAppInstancesResp")
	proto.RegisterType((*QueryEffectedAppInstancesReq)(nil), "datamanager.QueryEffectedAppInstancesReq")
	proto.RegisterType((*QueryEffectedAppInstancesResp)(nil), "datamanager.QueryEffectedAppInstancesResp")
	proto.RegisterType((*CreateStrategyReq)(nil), "datamanager.CreateStrategyReq")
	proto.RegisterType((*CreateStrategyResp)(nil), "datamanager.CreateStrategyResp")
	proto.RegisterType((*QueryStrategyReq)(nil), "datamanager.QueryStrategyReq")
	proto.RegisterType((*QueryStrategyResp)(nil), "datamanager.QueryStrategyResp")
	proto.RegisterType((*QueryStrategyListReq)(nil), "datamanager.QueryStrategyListReq")
	proto.RegisterType((*QueryStrategyListResp)(nil), "datamanager.QueryStrategyListResp")
	proto.RegisterType((*DeleteStrategyReq)(nil), "datamanager.DeleteStrategyReq")
	proto.RegisterType((*DeleteStrategyResp)(nil), "datamanager.DeleteStrategyResp")
	proto.RegisterType((*CreateShardingDBReq)(nil), "datamanager.CreateShardingDBReq")
	proto.RegisterType((*CreateShardingDBResp)(nil), "datamanager.CreateShardingDBResp")
	proto.RegisterType((*QueryShardingDBReq)(nil), "datamanager.QueryShardingDBReq")
	proto.RegisterType((*QueryShardingDBResp)(nil), "datamanager.QueryShardingDBResp")
	proto.RegisterType((*QueryShardingDBListReq)(nil), "datamanager.QueryShardingDBListReq")
	proto.RegisterType((*QueryShardingDBListResp)(nil), "datamanager.QueryShardingDBListResp")
	proto.RegisterType((*UpdateShardingDBReq)(nil), "datamanager.UpdateShardingDBReq")
	proto.RegisterType((*UpdateShardingDBResp)(nil), "datamanager.UpdateShardingDBResp")
	proto.RegisterType((*CreateShardingReq)(nil), "datamanager.CreateShardingReq")
	proto.RegisterType((*CreateShardingResp)(nil), "datamanager.CreateShardingResp")
	proto.RegisterType((*QueryShardingReq)(nil), "datamanager.QueryShardingReq")
	proto.RegisterType((*QueryShardingResp)(nil), "datamanager.QueryShardingResp")
	proto.RegisterType((*UpdateShardingReq)(nil), "datamanager.UpdateShardingReq")
	proto.RegisterType((*UpdateShardingResp)(nil), "datamanager.UpdateShardingResp")
	proto.RegisterType((*CreateAuditReq)(nil), "datamanager.CreateAuditReq")
	proto.RegisterType((*CreateAuditResp)(nil), "datamanager.CreateAuditResp")
	proto.RegisterType((*QueryAuditListReq)(nil), "datamanager.QueryAuditListReq")
	proto.RegisterType((*QueryAuditListResp)(nil), "datamanager.QueryAuditListResp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DataManager service

type DataManagerClient interface {
	QueryAuthInfo(ctx context.Context, in *QueryAuthInfoReq, opts ...grpc.CallOption) (*QueryAuthInfoResp, error)
	QueryAppMetadata(ctx context.Context, in *QueryAppMetadataReq, opts ...grpc.CallOption) (*QueryAppMetadataResp, error)
	CreateBusiness(ctx context.Context, in *CreateBusinessReq, opts ...grpc.CallOption) (*CreateBusinessResp, error)
	QueryBusiness(ctx context.Context, in *QueryBusinessReq, opts ...grpc.CallOption) (*QueryBusinessResp, error)
	QueryBusinessList(ctx context.Context, in *QueryBusinessListReq, opts ...grpc.CallOption) (*QueryBusinessListResp, error)
	UpdateBusiness(ctx context.Context, in *UpdateBusinessReq, opts ...grpc.CallOption) (*UpdateBusinessResp, error)
	CreateApp(ctx context.Context, in *CreateAppReq, opts ...grpc.CallOption) (*CreateAppResp, error)
	QueryApp(ctx context.Context, in *QueryAppReq, opts ...grpc.CallOption) (*QueryAppResp, error)
	QueryAppList(ctx context.Context, in *QueryAppListReq, opts ...grpc.CallOption) (*QueryAppListResp, error)
	UpdateApp(ctx context.Context, in *UpdateAppReq, opts ...grpc.CallOption) (*UpdateAppResp, error)
	DeleteApp(ctx context.Context, in *DeleteAppReq, opts ...grpc.CallOption) (*DeleteAppResp, error)
	CreateCluster(ctx context.Context, in *CreateClusterReq, opts ...grpc.CallOption) (*CreateClusterResp, error)
	QueryCluster(ctx context.Context, in *QueryClusterReq, opts ...grpc.CallOption) (*QueryClusterResp, error)
	QueryClusterList(ctx context.Context, in *QueryClusterListReq, opts ...grpc.CallOption) (*QueryClusterListResp, error)
	UpdateCluster(ctx context.Context, in *UpdateClusterReq, opts ...grpc.CallOption) (*UpdateClusterResp, error)
	DeleteCluster(ctx context.Context, in *DeleteClusterReq, opts ...grpc.CallOption) (*DeleteClusterResp, error)
	CreateZone(ctx context.Context, in *CreateZoneReq, opts ...grpc.CallOption) (*CreateZoneResp, error)
	QueryZone(ctx context.Context, in *QueryZoneReq, opts ...grpc.CallOption) (*QueryZoneResp, error)
	QueryZoneList(ctx context.Context, in *QueryZoneListReq, opts ...grpc.CallOption) (*QueryZoneListResp, error)
	UpdateZone(ctx context.Context, in *UpdateZoneReq, opts ...grpc.CallOption) (*UpdateZoneResp, error)
	DeleteZone(ctx context.Context, in *DeleteZoneReq, opts ...grpc.CallOption) (*DeleteZoneResp, error)
	CreateConfigSet(ctx context.Context, in *CreateConfigSetReq, opts ...grpc.CallOption) (*CreateConfigSetResp, error)
	QueryConfigSet(ctx context.Context, in *QueryConfigSetReq, opts ...grpc.CallOption) (*QueryConfigSetResp, error)
	QueryConfigSetList(ctx context.Context, in *QueryConfigSetListReq, opts ...grpc.CallOption) (*QueryConfigSetListResp, error)
	UpdateConfigSet(ctx context.Context, in *UpdateConfigSetReq, opts ...grpc.CallOption) (*UpdateConfigSetResp, error)
	DeleteConfigSet(ctx context.Context, in *DeleteConfigSetReq, opts ...grpc.CallOption) (*DeleteConfigSetResp, error)
	LockConfigSet(ctx context.Context, in *LockConfigSetReq, opts ...grpc.CallOption) (*LockConfigSetResp, error)
	UnlockConfigSet(ctx context.Context, in *UnlockConfigSetReq, opts ...grpc.CallOption) (*UnlockConfigSetResp, error)
	CreateConfigs(ctx context.Context, in *CreateConfigsReq, opts ...grpc.CallOption) (*CreateConfigsResp, error)
	QueryConfigs(ctx context.Context, in *QueryConfigsReq, opts ...grpc.CallOption) (*QueryConfigsResp, error)
	QueryConfigsList(ctx context.Context, in *QueryConfigsListReq, opts ...grpc.CallOption) (*QueryConfigsListResp, error)
	QueryReleaseConfigs(ctx context.Context, in *QueryReleaseConfigsReq, opts ...grpc.CallOption) (*QueryReleaseConfigsResp, error)
	CreateCommit(ctx context.Context, in *CreateCommitReq, opts ...grpc.CallOption) (*CreateCommitResp, error)
	QueryCommit(ctx context.Context, in *QueryCommitReq, opts ...grpc.CallOption) (*QueryCommitResp, error)
	QueryHistoryCommits(ctx context.Context, in *QueryHistoryCommitsReq, opts ...grpc.CallOption) (*QueryHistoryCommitsResp, error)
	UpdateCommit(ctx context.Context, in *UpdateCommitReq, opts ...grpc.CallOption) (*UpdateCommitResp, error)
	CancelCommit(ctx context.Context, in *CancelCommitReq, opts ...grpc.CallOption) (*CancelCommitResp, error)
	ConfirmCommit(ctx context.Context, in *ConfirmCommitReq, opts ...grpc.CallOption) (*ConfirmCommitResp, error)
	CreateMultiCommit(ctx context.Context, in *CreateMultiCommitReq, opts ...grpc.CallOption) (*CreateMultiCommitResp, error)
	QueryMultiCommit(ctx context.Context, in *QueryMultiCommitReq, opts ...grpc.CallOption) (*QueryMultiCommitResp, error)
	QueryHistoryMultiCommits(ctx context.Context, in *QueryHistoryMultiCommitsReq, opts ...grpc.CallOption) (*QueryHistoryMultiCommitsResp, error)
	QueryMultiCommitSubList(ctx context.Context, in *QueryMultiCommitSubListReq, opts ...grpc.CallOption) (*QueryMultiCommitSubListResp, error)
	UpdateMultiCommit(ctx context.Context, in *UpdateMultiCommitReq, opts ...grpc.CallOption) (*UpdateMultiCommitResp, error)
	CancelMultiCommit(ctx context.Context, in *CancelMultiCommitReq, opts ...grpc.CallOption) (*CancelMultiCommitResp, error)
	ConfirmMultiCommit(ctx context.Context, in *ConfirmMultiCommitReq, opts ...grpc.CallOption) (*ConfirmMultiCommitResp, error)
	CreateRelease(ctx context.Context, in *CreateReleaseReq, opts ...grpc.CallOption) (*CreateReleaseResp, error)
	QueryRelease(ctx context.Context, in *QueryReleaseReq, opts ...grpc.CallOption) (*QueryReleaseResp, error)
	QueryNewestReleases(ctx context.Context, in *QueryNewestReleasesReq, opts ...grpc.CallOption) (*QueryNewestReleasesResp, error)
	QueryHistoryReleases(ctx context.Context, in *QueryHistoryReleasesReq, opts ...grpc.CallOption) (*QueryHistoryReleasesResp, error)
	UpdateRelease(ctx context.Context, in *UpdateReleaseReq, opts ...grpc.CallOption) (*UpdateReleaseResp, error)
	CancelRelease(ctx context.Context, in *CancelReleaseReq, opts ...grpc.CallOption) (*CancelReleaseResp, error)
	RollbackRelease(ctx context.Context, in *RollbackReleaseReq, opts ...grpc.CallOption) (*RollbackReleaseResp, error)
	PublishRelease(ctx context.Context, in *PublishReleaseReq, opts ...grpc.CallOption) (*PublishReleaseResp, error)
	CreateMultiRelease(ctx context.Context, in *CreateMultiReleaseReq, opts ...grpc.CallOption) (*CreateMultiReleaseResp, error)
	QueryMultiRelease(ctx context.Context, in *QueryMultiReleaseReq, opts ...grpc.CallOption) (*QueryMultiReleaseResp, error)
	QueryMultiReleaseSubList(ctx context.Context, in *QueryMultiReleaseSubListReq, opts ...grpc.CallOption) (*QueryMultiReleaseSubListResp, error)
	UpdateMultiRelease(ctx context.Context, in *UpdateMultiReleaseReq, opts ...grpc.CallOption) (*UpdateMultiReleaseResp, error)
	CancelMultiRelease(ctx context.Context, in *CancelMultiReleaseReq, opts ...grpc.CallOption) (*CancelMultiReleaseResp, error)
	PublishMultiRelease(ctx context.Context, in *PublishMultiReleaseReq, opts ...grpc.CallOption) (*PublishMultiReleaseResp, error)
	RollbackMultiRelease(ctx context.Context, in *RollbackMultiReleaseReq, opts ...grpc.CallOption) (*RollbackMultiReleaseResp, error)
	QueryHistoryMultiReleases(ctx context.Context, in *QueryHistoryMultiReleasesReq, opts ...grpc.CallOption) (*QueryHistoryMultiReleasesResp, error)
	CreateAppInstance(ctx context.Context, in *CreateAppInstanceReq, opts ...grpc.CallOption) (*CreateAppInstanceResp, error)
	QueryHistoryAppInstances(ctx context.Context, in *QueryHistoryAppInstancesReq, opts ...grpc.CallOption) (*QueryHistoryAppInstancesResp, error)
	QueryReachableAppInstances(ctx context.Context, in *QueryReachableAppInstancesReq, opts ...grpc.CallOption) (*QueryReachableAppInstancesResp, error)
	UpdateAppInstance(ctx context.Context, in *UpdateAppInstanceReq, opts ...grpc.CallOption) (*UpdateAppInstanceResp, error)
	CreateAppInstanceRelease(ctx context.Context, in *CreateAppInstanceReleaseReq, opts ...grpc.CallOption) (*CreateAppInstanceReleaseResp, error)
	QueryAppInstanceRelease(ctx context.Context, in *QueryAppInstanceReleaseReq, opts ...grpc.CallOption) (*QueryAppInstanceReleaseResp, error)
	QueryEffectedAppInstances(ctx context.Context, in *QueryEffectedAppInstancesReq, opts ...grpc.CallOption) (*QueryEffectedAppInstancesResp, error)
	QueryMatchedAppInstances(ctx context.Context, in *QueryMatchedAppInstancesReq, opts ...grpc.CallOption) (*QueryMatchedAppInstancesResp, error)
	CreateStrategy(ctx context.Context, in *CreateStrategyReq, opts ...grpc.CallOption) (*CreateStrategyResp, error)
	QueryStrategy(ctx context.Context, in *QueryStrategyReq, opts ...grpc.CallOption) (*QueryStrategyResp, error)
	QueryStrategyList(ctx context.Context, in *QueryStrategyListReq, opts ...grpc.CallOption) (*QueryStrategyListResp, error)
	DeleteStrategy(ctx context.Context, in *DeleteStrategyReq, opts ...grpc.CallOption) (*DeleteStrategyResp, error)
	CreateShardingDB(ctx context.Context, in *CreateShardingDBReq, opts ...grpc.CallOption) (*CreateShardingDBResp, error)
	QueryShardingDB(ctx context.Context, in *QueryShardingDBReq, opts ...grpc.CallOption) (*QueryShardingDBResp, error)
	QueryShardingDBList(ctx context.Context, in *QueryShardingDBListReq, opts ...grpc.CallOption) (*QueryShardingDBListResp, error)
	UpdateShardingDB(ctx context.Context, in *UpdateShardingDBReq, opts ...grpc.CallOption) (*UpdateShardingDBResp, error)
	CreateSharding(ctx context.Context, in *CreateShardingReq, opts ...grpc.CallOption) (*CreateShardingResp, error)
	QuerySharding(ctx context.Context, in *QueryShardingReq, opts ...grpc.CallOption) (*QueryShardingResp, error)
	UpdateSharding(ctx context.Context, in *UpdateShardingReq, opts ...grpc.CallOption) (*UpdateShardingResp, error)
	CreateAudit(ctx context.Context, in *CreateAuditReq, opts ...grpc.CallOption) (*CreateAuditResp, error)
	QueryAuditList(ctx context.Context, in *QueryAuditListReq, opts ...grpc.CallOption) (*QueryAuditListResp, error)
}

type dataManagerClient struct {
	cc *grpc.ClientConn
}

func NewDataManagerClient(cc *grpc.ClientConn) DataManagerClient {
	return &dataManagerClient{cc}
}

func (c *dataManagerClient) QueryAuthInfo(ctx context.Context, in *QueryAuthInfoReq, opts ...grpc.CallOption) (*QueryAuthInfoResp, error) {
	out := new(QueryAuthInfoResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/QueryAuthInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) QueryAppMetadata(ctx context.Context, in *QueryAppMetadataReq, opts ...grpc.CallOption) (*QueryAppMetadataResp, error) {
	out := new(QueryAppMetadataResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/QueryAppMetadata", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) CreateBusiness(ctx context.Context, in *CreateBusinessReq, opts ...grpc.CallOption) (*CreateBusinessResp, error) {
	out := new(CreateBusinessResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/CreateBusiness", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) QueryBusiness(ctx context.Context, in *QueryBusinessReq, opts ...grpc.CallOption) (*QueryBusinessResp, error) {
	out := new(QueryBusinessResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/QueryBusiness", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) QueryBusinessList(ctx context.Context, in *QueryBusinessListReq, opts ...grpc.CallOption) (*QueryBusinessListResp, error) {
	out := new(QueryBusinessListResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/QueryBusinessList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) UpdateBusiness(ctx context.Context, in *UpdateBusinessReq, opts ...grpc.CallOption) (*UpdateBusinessResp, error) {
	out := new(UpdateBusinessResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/UpdateBusiness", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) CreateApp(ctx context.Context, in *CreateAppReq, opts ...grpc.CallOption) (*CreateAppResp, error) {
	out := new(CreateAppResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/CreateApp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) QueryApp(ctx context.Context, in *QueryAppReq, opts ...grpc.CallOption) (*QueryAppResp, error) {
	out := new(QueryAppResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/QueryApp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) QueryAppList(ctx context.Context, in *QueryAppListReq, opts ...grpc.CallOption) (*QueryAppListResp, error) {
	out := new(QueryAppListResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/QueryAppList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) UpdateApp(ctx context.Context, in *UpdateAppReq, opts ...grpc.CallOption) (*UpdateAppResp, error) {
	out := new(UpdateAppResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/UpdateApp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) DeleteApp(ctx context.Context, in *DeleteAppReq, opts ...grpc.CallOption) (*DeleteAppResp, error) {
	out := new(DeleteAppResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/DeleteApp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) CreateCluster(ctx context.Context, in *CreateClusterReq, opts ...grpc.CallOption) (*CreateClusterResp, error) {
	out := new(CreateClusterResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/CreateCluster", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) QueryCluster(ctx context.Context, in *QueryClusterReq, opts ...grpc.CallOption) (*QueryClusterResp, error) {
	out := new(QueryClusterResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/QueryCluster", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) QueryClusterList(ctx context.Context, in *QueryClusterListReq, opts ...grpc.CallOption) (*QueryClusterListResp, error) {
	out := new(QueryClusterListResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/QueryClusterList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) UpdateCluster(ctx context.Context, in *UpdateClusterReq, opts ...grpc.CallOption) (*UpdateClusterResp, error) {
	out := new(UpdateClusterResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/UpdateCluster", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) DeleteCluster(ctx context.Context, in *DeleteClusterReq, opts ...grpc.CallOption) (*DeleteClusterResp, error) {
	out := new(DeleteClusterResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/DeleteCluster", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) CreateZone(ctx context.Context, in *CreateZoneReq, opts ...grpc.CallOption) (*CreateZoneResp, error) {
	out := new(CreateZoneResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/CreateZone", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) QueryZone(ctx context.Context, in *QueryZoneReq, opts ...grpc.CallOption) (*QueryZoneResp, error) {
	out := new(QueryZoneResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/QueryZone", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) QueryZoneList(ctx context.Context, in *QueryZoneListReq, opts ...grpc.CallOption) (*QueryZoneListResp, error) {
	out := new(QueryZoneListResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/QueryZoneList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) UpdateZone(ctx context.Context, in *UpdateZoneReq, opts ...grpc.CallOption) (*UpdateZoneResp, error) {
	out := new(UpdateZoneResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/UpdateZone", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) DeleteZone(ctx context.Context, in *DeleteZoneReq, opts ...grpc.CallOption) (*DeleteZoneResp, error) {
	out := new(DeleteZoneResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/DeleteZone", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) CreateConfigSet(ctx context.Context, in *CreateConfigSetReq, opts ...grpc.CallOption) (*CreateConfigSetResp, error) {
	out := new(CreateConfigSetResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/CreateConfigSet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) QueryConfigSet(ctx context.Context, in *QueryConfigSetReq, opts ...grpc.CallOption) (*QueryConfigSetResp, error) {
	out := new(QueryConfigSetResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/QueryConfigSet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) QueryConfigSetList(ctx context.Context, in *QueryConfigSetListReq, opts ...grpc.CallOption) (*QueryConfigSetListResp, error) {
	out := new(QueryConfigSetListResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/QueryConfigSetList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) UpdateConfigSet(ctx context.Context, in *UpdateConfigSetReq, opts ...grpc.CallOption) (*UpdateConfigSetResp, error) {
	out := new(UpdateConfigSetResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/UpdateConfigSet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) DeleteConfigSet(ctx context.Context, in *DeleteConfigSetReq, opts ...grpc.CallOption) (*DeleteConfigSetResp, error) {
	out := new(DeleteConfigSetResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/DeleteConfigSet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) LockConfigSet(ctx context.Context, in *LockConfigSetReq, opts ...grpc.CallOption) (*LockConfigSetResp, error) {
	out := new(LockConfigSetResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/LockConfigSet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) UnlockConfigSet(ctx context.Context, in *UnlockConfigSetReq, opts ...grpc.CallOption) (*UnlockConfigSetResp, error) {
	out := new(UnlockConfigSetResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/UnlockConfigSet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) CreateConfigs(ctx context.Context, in *CreateConfigsReq, opts ...grpc.CallOption) (*CreateConfigsResp, error) {
	out := new(CreateConfigsResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/CreateConfigs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) QueryConfigs(ctx context.Context, in *QueryConfigsReq, opts ...grpc.CallOption) (*QueryConfigsResp, error) {
	out := new(QueryConfigsResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/QueryConfigs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) QueryConfigsList(ctx context.Context, in *QueryConfigsListReq, opts ...grpc.CallOption) (*QueryConfigsListResp, error) {
	out := new(QueryConfigsListResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/QueryConfigsList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) QueryReleaseConfigs(ctx context.Context, in *QueryReleaseConfigsReq, opts ...grpc.CallOption) (*QueryReleaseConfigsResp, error) {
	out := new(QueryReleaseConfigsResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/QueryReleaseConfigs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) CreateCommit(ctx context.Context, in *CreateCommitReq, opts ...grpc.CallOption) (*CreateCommitResp, error) {
	out := new(CreateCommitResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/CreateCommit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) QueryCommit(ctx context.Context, in *QueryCommitReq, opts ...grpc.CallOption) (*QueryCommitResp, error) {
	out := new(QueryCommitResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/QueryCommit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) QueryHistoryCommits(ctx context.Context, in *QueryHistoryCommitsReq, opts ...grpc.CallOption) (*QueryHistoryCommitsResp, error) {
	out := new(QueryHistoryCommitsResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/QueryHistoryCommits", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) UpdateCommit(ctx context.Context, in *UpdateCommitReq, opts ...grpc.CallOption) (*UpdateCommitResp, error) {
	out := new(UpdateCommitResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/UpdateCommit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) CancelCommit(ctx context.Context, in *CancelCommitReq, opts ...grpc.CallOption) (*CancelCommitResp, error) {
	out := new(CancelCommitResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/CancelCommit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) ConfirmCommit(ctx context.Context, in *ConfirmCommitReq, opts ...grpc.CallOption) (*ConfirmCommitResp, error) {
	out := new(ConfirmCommitResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/ConfirmCommit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) CreateMultiCommit(ctx context.Context, in *CreateMultiCommitReq, opts ...grpc.CallOption) (*CreateMultiCommitResp, error) {
	out := new(CreateMultiCommitResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/CreateMultiCommit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) QueryMultiCommit(ctx context.Context, in *QueryMultiCommitReq, opts ...grpc.CallOption) (*QueryMultiCommitResp, error) {
	out := new(QueryMultiCommitResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/QueryMultiCommit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) QueryHistoryMultiCommits(ctx context.Context, in *QueryHistoryMultiCommitsReq, opts ...grpc.CallOption) (*QueryHistoryMultiCommitsResp, error) {
	out := new(QueryHistoryMultiCommitsResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/QueryHistoryMultiCommits", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) QueryMultiCommitSubList(ctx context.Context, in *QueryMultiCommitSubListReq, opts ...grpc.CallOption) (*QueryMultiCommitSubListResp, error) {
	out := new(QueryMultiCommitSubListResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/QueryMultiCommitSubList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) UpdateMultiCommit(ctx context.Context, in *UpdateMultiCommitReq, opts ...grpc.CallOption) (*UpdateMultiCommitResp, error) {
	out := new(UpdateMultiCommitResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/UpdateMultiCommit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) CancelMultiCommit(ctx context.Context, in *CancelMultiCommitReq, opts ...grpc.CallOption) (*CancelMultiCommitResp, error) {
	out := new(CancelMultiCommitResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/CancelMultiCommit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) ConfirmMultiCommit(ctx context.Context, in *ConfirmMultiCommitReq, opts ...grpc.CallOption) (*ConfirmMultiCommitResp, error) {
	out := new(ConfirmMultiCommitResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/ConfirmMultiCommit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) CreateRelease(ctx context.Context, in *CreateReleaseReq, opts ...grpc.CallOption) (*CreateReleaseResp, error) {
	out := new(CreateReleaseResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/CreateRelease", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) QueryRelease(ctx context.Context, in *QueryReleaseReq, opts ...grpc.CallOption) (*QueryReleaseResp, error) {
	out := new(QueryReleaseResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/QueryRelease", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) QueryNewestReleases(ctx context.Context, in *QueryNewestReleasesReq, opts ...grpc.CallOption) (*QueryNewestReleasesResp, error) {
	out := new(QueryNewestReleasesResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/QueryNewestReleases", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) QueryHistoryReleases(ctx context.Context, in *QueryHistoryReleasesReq, opts ...grpc.CallOption) (*QueryHistoryReleasesResp, error) {
	out := new(QueryHistoryReleasesResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/QueryHistoryReleases", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) UpdateRelease(ctx context.Context, in *UpdateReleaseReq, opts ...grpc.CallOption) (*UpdateReleaseResp, error) {
	out := new(UpdateReleaseResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/UpdateRelease", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) CancelRelease(ctx context.Context, in *CancelReleaseReq, opts ...grpc.CallOption) (*CancelReleaseResp, error) {
	out := new(CancelReleaseResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/CancelRelease", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) RollbackRelease(ctx context.Context, in *RollbackReleaseReq, opts ...grpc.CallOption) (*RollbackReleaseResp, error) {
	out := new(RollbackReleaseResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/RollbackRelease", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) PublishRelease(ctx context.Context, in *PublishReleaseReq, opts ...grpc.CallOption) (*PublishReleaseResp, error) {
	out := new(PublishReleaseResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/PublishRelease", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) CreateMultiRelease(ctx context.Context, in *CreateMultiReleaseReq, opts ...grpc.CallOption) (*CreateMultiReleaseResp, error) {
	out := new(CreateMultiReleaseResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/CreateMultiRelease", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) QueryMultiRelease(ctx context.Context, in *QueryMultiReleaseReq, opts ...grpc.CallOption) (*QueryMultiReleaseResp, error) {
	out := new(QueryMultiReleaseResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/QueryMultiRelease", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) QueryMultiReleaseSubList(ctx context.Context, in *QueryMultiReleaseSubListReq, opts ...grpc.CallOption) (*QueryMultiReleaseSubListResp, error) {
	out := new(QueryMultiReleaseSubListResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/QueryMultiReleaseSubList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) UpdateMultiRelease(ctx context.Context, in *UpdateMultiReleaseReq, opts ...grpc.CallOption) (*UpdateMultiReleaseResp, error) {
	out := new(UpdateMultiReleaseResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/UpdateMultiRelease", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) CancelMultiRelease(ctx context.Context, in *CancelMultiReleaseReq, opts ...grpc.CallOption) (*CancelMultiReleaseResp, error) {
	out := new(CancelMultiReleaseResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/CancelMultiRelease", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) PublishMultiRelease(ctx context.Context, in *PublishMultiReleaseReq, opts ...grpc.CallOption) (*PublishMultiReleaseResp, error) {
	out := new(PublishMultiReleaseResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/PublishMultiRelease", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) RollbackMultiRelease(ctx context.Context, in *RollbackMultiReleaseReq, opts ...grpc.CallOption) (*RollbackMultiReleaseResp, error) {
	out := new(RollbackMultiReleaseResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/RollbackMultiRelease", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) QueryHistoryMultiReleases(ctx context.Context, in *QueryHistoryMultiReleasesReq, opts ...grpc.CallOption) (*QueryHistoryMultiReleasesResp, error) {
	out := new(QueryHistoryMultiReleasesResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/QueryHistoryMultiReleases", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) CreateAppInstance(ctx context.Context, in *CreateAppInstanceReq, opts ...grpc.CallOption) (*CreateAppInstanceResp, error) {
	out := new(CreateAppInstanceResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/CreateAppInstance", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) QueryHistoryAppInstances(ctx context.Context, in *QueryHistoryAppInstancesReq, opts ...grpc.CallOption) (*QueryHistoryAppInstancesResp, error) {
	out := new(QueryHistoryAppInstancesResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/QueryHistoryAppInstances", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) QueryReachableAppInstances(ctx context.Context, in *QueryReachableAppInstancesReq, opts ...grpc.CallOption) (*QueryReachableAppInstancesResp, error) {
	out := new(QueryReachableAppInstancesResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/QueryReachableAppInstances", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) UpdateAppInstance(ctx context.Context, in *UpdateAppInstanceReq, opts ...grpc.CallOption) (*UpdateAppInstanceResp, error) {
	out := new(UpdateAppInstanceResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/UpdateAppInstance", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) CreateAppInstanceRelease(ctx context.Context, in *CreateAppInstanceReleaseReq, opts ...grpc.CallOption) (*CreateAppInstanceReleaseResp, error) {
	out := new(CreateAppInstanceReleaseResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/CreateAppInstanceRelease", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) QueryAppInstanceRelease(ctx context.Context, in *QueryAppInstanceReleaseReq, opts ...grpc.CallOption) (*QueryAppInstanceReleaseResp, error) {
	out := new(QueryAppInstanceReleaseResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/QueryAppInstanceRelease", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) QueryEffectedAppInstances(ctx context.Context, in *QueryEffectedAppInstancesReq, opts ...grpc.CallOption) (*QueryEffectedAppInstancesResp, error) {
	out := new(QueryEffectedAppInstancesResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/QueryEffectedAppInstances", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) QueryMatchedAppInstances(ctx context.Context, in *QueryMatchedAppInstancesReq, opts ...grpc.CallOption) (*QueryMatchedAppInstancesResp, error) {
	out := new(QueryMatchedAppInstancesResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/QueryMatchedAppInstances", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) CreateStrategy(ctx context.Context, in *CreateStrategyReq, opts ...grpc.CallOption) (*CreateStrategyResp, error) {
	out := new(CreateStrategyResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/CreateStrategy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) QueryStrategy(ctx context.Context, in *QueryStrategyReq, opts ...grpc.CallOption) (*QueryStrategyResp, error) {
	out := new(QueryStrategyResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/QueryStrategy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) QueryStrategyList(ctx context.Context, in *QueryStrategyListReq, opts ...grpc.CallOption) (*QueryStrategyListResp, error) {
	out := new(QueryStrategyListResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/QueryStrategyList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) DeleteStrategy(ctx context.Context, in *DeleteStrategyReq, opts ...grpc.CallOption) (*DeleteStrategyResp, error) {
	out := new(DeleteStrategyResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/DeleteStrategy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) CreateShardingDB(ctx context.Context, in *CreateShardingDBReq, opts ...grpc.CallOption) (*CreateShardingDBResp, error) {
	out := new(CreateShardingDBResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/CreateShardingDB", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) QueryShardingDB(ctx context.Context, in *QueryShardingDBReq, opts ...grpc.CallOption) (*QueryShardingDBResp, error) {
	out := new(QueryShardingDBResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/QueryShardingDB", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) QueryShardingDBList(ctx context.Context, in *QueryShardingDBListReq, opts ...grpc.CallOption) (*QueryShardingDBListResp, error) {
	out := new(QueryShardingDBListResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/QueryShardingDBList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) UpdateShardingDB(ctx context.Context, in *UpdateShardingDBReq, opts ...grpc.CallOption) (*UpdateShardingDBResp, error) {
	out := new(UpdateShardingDBResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/UpdateShardingDB", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) CreateSharding(ctx context.Context, in *CreateShardingReq, opts ...grpc.CallOption) (*CreateShardingResp, error) {
	out := new(CreateShardingResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/CreateSharding", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) QuerySharding(ctx context.Context, in *QueryShardingReq, opts ...grpc.CallOption) (*QueryShardingResp, error) {
	out := new(QueryShardingResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/QuerySharding", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) UpdateSharding(ctx context.Context, in *UpdateShardingReq, opts ...grpc.CallOption) (*UpdateShardingResp, error) {
	out := new(UpdateShardingResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/UpdateSharding", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) CreateAudit(ctx context.Context, in *CreateAuditReq, opts ...grpc.CallOption) (*CreateAuditResp, error) {
	out := new(CreateAuditResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/CreateAudit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) QueryAuditList(ctx context.Context, in *QueryAuditListReq, opts ...grpc.CallOption) (*QueryAuditListResp, error) {
	out := new(QueryAuditListResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/QueryAuditList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DataManager service

type DataManagerServer interface {
	QueryAuthInfo(context.Context, *QueryAuthInfoReq) (*QueryAuthInfoResp, error)
	QueryAppMetadata(context.Context, *QueryAppMetadataReq) (*QueryAppMetadataResp, error)
	CreateBusiness(context.Context, *CreateBusinessReq) (*CreateBusinessResp, error)
	QueryBusiness(context.Context, *QueryBusinessReq) (*QueryBusinessResp, error)
	QueryBusinessList(context.Context, *QueryBusinessListReq) (*QueryBusinessListResp, error)
	UpdateBusiness(context.Context, *UpdateBusinessReq) (*UpdateBusinessResp, error)
	CreateApp(context.Context, *CreateAppReq) (*CreateAppResp, error)
	QueryApp(context.Context, *QueryAppReq) (*QueryAppResp, error)
	QueryAppList(context.Context, *QueryAppListReq) (*QueryAppListResp, error)
	UpdateApp(context.Context, *UpdateAppReq) (*UpdateAppResp, error)
	DeleteApp(context.Context, *DeleteAppReq) (*DeleteAppResp, error)
	CreateCluster(context.Context, *CreateClusterReq) (*CreateClusterResp, error)
	QueryCluster(context.Context, *QueryClusterReq) (*QueryClusterResp, error)
	QueryClusterList(context.Context, *QueryClusterListReq) (*QueryClusterListResp, error)
	UpdateCluster(context.Context, *UpdateClusterReq) (*UpdateClusterResp, error)
	DeleteCluster(context.Context, *DeleteClusterReq) (*DeleteClusterResp, error)
	CreateZone(context.Context, *CreateZoneReq) (*CreateZoneResp, error)
	QueryZone(context.Context, *QueryZoneReq) (*QueryZoneResp, error)
	QueryZoneList(context.Context, *QueryZoneListReq) (*QueryZoneListResp, error)
	UpdateZone(context.Context, *UpdateZoneReq) (*UpdateZoneResp, error)
	DeleteZone(context.Context, *DeleteZoneReq) (*DeleteZoneResp, error)
	CreateConfigSet(context.Context, *CreateConfigSetReq) (*CreateConfigSetResp, error)
	QueryConfigSet(context.Context, *QueryConfigSetReq) (*QueryConfigSetResp, error)
	QueryConfigSetList(context.Context, *QueryConfigSetListReq) (*QueryConfigSetListResp, error)
	UpdateConfigSet(context.Context, *UpdateConfigSetReq) (*UpdateConfigSetResp, error)
	DeleteConfigSet(context.Context, *DeleteConfigSetReq) (*DeleteConfigSetResp, error)
	LockConfigSet(context.Context, *LockConfigSetReq) (*LockConfigSetResp, error)
	UnlockConfigSet(context.Context, *UnlockConfigSetReq) (*UnlockConfigSetResp, error)
	CreateConfigs(context.Context, *CreateConfigsReq) (*CreateConfigsResp, error)
	QueryConfigs(context.Context, *QueryConfigsReq) (*QueryConfigsResp, error)
	QueryConfigsList(context.Context, *QueryConfigsListReq) (*QueryConfigsListResp, error)
	QueryReleaseConfigs(context.Context, *QueryReleaseConfigsReq) (*QueryReleaseConfigsResp, error)
	CreateCommit(context.Context, *CreateCommitReq) (*CreateCommitResp, error)
	QueryCommit(context.Context, *QueryCommitReq) (*QueryCommitResp, error)
	QueryHistoryCommits(context.Context, *QueryHistoryCommitsReq) (*QueryHistoryCommitsResp, error)
	UpdateCommit(context.Context, *UpdateCommitReq) (*UpdateCommitResp, error)
	CancelCommit(context.Context, *CancelCommitReq) (*CancelCommitResp, error)
	ConfirmCommit(context.Context, *ConfirmCommitReq) (*ConfirmCommitResp, error)
	CreateMultiCommit(context.Context, *CreateMultiCommitReq) (*CreateMultiCommitResp, error)
	QueryMultiCommit(context.Context, *QueryMultiCommitReq) (*QueryMultiCommitResp, error)
	QueryHistoryMultiCommits(context.Context, *QueryHistoryMultiCommitsReq) (*QueryHistoryMultiCommitsResp, error)
	QueryMultiCommitSubList(context.Context, *QueryMultiCommitSubListReq) (*QueryMultiCommitSubListResp, error)
	UpdateMultiCommit(context.Context, *UpdateMultiCommitReq) (*UpdateMultiCommitResp, error)
	CancelMultiCommit(context.Context, *CancelMultiCommitReq) (*CancelMultiCommitResp, error)
	ConfirmMultiCommit(context.Context, *ConfirmMultiCommitReq) (*ConfirmMultiCommitResp, error)
	CreateRelease(context.Context, *CreateReleaseReq) (*CreateReleaseResp, error)
	QueryRelease(context.Context, *QueryReleaseReq) (*QueryReleaseResp, error)
	QueryNewestReleases(context.Context, *QueryNewestReleasesReq) (*QueryNewestReleasesResp, error)
	QueryHistoryReleases(context.Context, *QueryHistoryReleasesReq) (*QueryHistoryReleasesResp, error)
	UpdateRelease(context.Context, *UpdateReleaseReq) (*UpdateReleaseResp, error)
	CancelRelease(context.Context, *CancelReleaseReq) (*CancelReleaseResp, error)
	RollbackRelease(context.Context, *RollbackReleaseReq) (*RollbackReleaseResp, error)
	PublishRelease(context.Context, *PublishReleaseReq) (*PublishReleaseResp, error)
	CreateMultiRelease(context.Context, *CreateMultiReleaseReq) (*CreateMultiReleaseResp, error)
	QueryMultiRelease(context.Context, *QueryMultiReleaseReq) (*QueryMultiReleaseResp, error)
	QueryMultiReleaseSubList(context.Context, *QueryMultiReleaseSubListReq) (*QueryMultiReleaseSubListResp, error)
	UpdateMultiRelease(context.Context, *UpdateMultiReleaseReq) (*UpdateMultiReleaseResp, error)
	CancelMultiRelease(context.Context, *CancelMultiReleaseReq) (*CancelMultiReleaseResp, error)
	PublishMultiRelease(context.Context, *PublishMultiReleaseReq) (*PublishMultiReleaseResp, error)
	RollbackMultiRelease(context.Context, *RollbackMultiReleaseReq) (*RollbackMultiReleaseResp, error)
	QueryHistoryMultiReleases(context.Context, *QueryHistoryMultiReleasesReq) (*QueryHistoryMultiReleasesResp, error)
	CreateAppInstance(context.Context, *CreateAppInstanceReq) (*CreateAppInstanceResp, error)
	QueryHistoryAppInstances(context.Context, *QueryHistoryAppInstancesReq) (*QueryHistoryAppInstancesResp, error)
	QueryReachableAppInstances(context.Context, *QueryReachableAppInstancesReq) (*QueryReachableAppInstancesResp, error)
	UpdateAppInstance(context.Context, *UpdateAppInstanceReq) (*UpdateAppInstanceResp, error)
	CreateAppInstanceRelease(context.Context, *CreateAppInstanceReleaseReq) (*CreateAppInstanceReleaseResp, error)
	QueryAppInstanceRelease(context.Context, *QueryAppInstanceReleaseReq) (*QueryAppInstanceReleaseResp, error)
	QueryEffectedAppInstances(context.Context, *QueryEffectedAppInstancesReq) (*QueryEffectedAppInstancesResp, error)
	QueryMatchedAppInstances(context.Context, *QueryMatchedAppInstancesReq) (*QueryMatchedAppInstancesResp, error)
	CreateStrategy(context.Context, *CreateStrategyReq) (*CreateStrategyResp, error)
	QueryStrategy(context.Context, *QueryStrategyReq) (*QueryStrategyResp, error)
	QueryStrategyList(context.Context, *QueryStrategyListReq) (*QueryStrategyListResp, error)
	DeleteStrategy(context.Context, *DeleteStrategyReq) (*DeleteStrategyResp, error)
	CreateShardingDB(context.Context, *CreateShardingDBReq) (*CreateShardingDBResp, error)
	QueryShardingDB(context.Context, *QueryShardingDBReq) (*QueryShardingDBResp, error)
	QueryShardingDBList(context.Context, *QueryShardingDBListReq) (*QueryShardingDBListResp, error)
	UpdateShardingDB(context.Context, *UpdateShardingDBReq) (*UpdateShardingDBResp, error)
	CreateSharding(context.Context, *CreateShardingReq) (*CreateShardingResp, error)
	QuerySharding(context.Context, *QueryShardingReq) (*QueryShardingResp, error)
	UpdateSharding(context.Context, *UpdateShardingReq) (*UpdateShardingResp, error)
	CreateAudit(context.Context, *CreateAuditReq) (*CreateAuditResp, error)
	QueryAuditList(context.Context, *QueryAuditListReq) (*QueryAuditListResp, error)
}

func RegisterDataManagerServer(s *grpc.Server, srv DataManagerServer) {
	s.RegisterService(&_DataManager_serviceDesc, srv)
}

func _DataManager_QueryAuthInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAuthInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).QueryAuthInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/QueryAuthInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).QueryAuthInfo(ctx, req.(*QueryAuthInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_QueryAppMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAppMetadataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).QueryAppMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/QueryAppMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).QueryAppMetadata(ctx, req.(*QueryAppMetadataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_CreateBusiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBusinessReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).CreateBusiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/CreateBusiness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).CreateBusiness(ctx, req.(*CreateBusinessReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_QueryBusiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBusinessReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).QueryBusiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/QueryBusiness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).QueryBusiness(ctx, req.(*QueryBusinessReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_QueryBusinessList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBusinessListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).QueryBusinessList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/QueryBusinessList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).QueryBusinessList(ctx, req.(*QueryBusinessListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_UpdateBusiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBusinessReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).UpdateBusiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/UpdateBusiness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).UpdateBusiness(ctx, req.(*UpdateBusinessReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_CreateApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).CreateApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/CreateApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).CreateApp(ctx, req.(*CreateAppReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_QueryApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAppReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).QueryApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/QueryApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).QueryApp(ctx, req.(*QueryAppReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_QueryAppList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAppListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).QueryAppList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/QueryAppList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).QueryAppList(ctx, req.(*QueryAppListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_UpdateApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).UpdateApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/UpdateApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).UpdateApp(ctx, req.(*UpdateAppReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_DeleteApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAppReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).DeleteApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/DeleteApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).DeleteApp(ctx, req.(*DeleteAppReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_CreateCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateClusterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).CreateCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/CreateCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).CreateCluster(ctx, req.(*CreateClusterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_QueryCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryClusterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).QueryCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/QueryCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).QueryCluster(ctx, req.(*QueryClusterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_QueryClusterList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryClusterListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).QueryClusterList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/QueryClusterList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).QueryClusterList(ctx, req.(*QueryClusterListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_UpdateCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateClusterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).UpdateCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/UpdateCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).UpdateCluster(ctx, req.(*UpdateClusterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_DeleteCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteClusterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).DeleteCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/DeleteCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).DeleteCluster(ctx, req.(*DeleteClusterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_CreateZone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateZoneReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).CreateZone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/CreateZone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).CreateZone(ctx, req.(*CreateZoneReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_QueryZone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryZoneReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).QueryZone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/QueryZone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).QueryZone(ctx, req.(*QueryZoneReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_QueryZoneList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryZoneListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).QueryZoneList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/QueryZoneList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).QueryZoneList(ctx, req.(*QueryZoneListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_UpdateZone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateZoneReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).UpdateZone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/UpdateZone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).UpdateZone(ctx, req.(*UpdateZoneReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_DeleteZone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteZoneReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).DeleteZone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/DeleteZone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).DeleteZone(ctx, req.(*DeleteZoneReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_CreateConfigSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConfigSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).CreateConfigSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/CreateConfigSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).CreateConfigSet(ctx, req.(*CreateConfigSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_QueryConfigSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryConfigSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).QueryConfigSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/QueryConfigSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).QueryConfigSet(ctx, req.(*QueryConfigSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_QueryConfigSetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryConfigSetListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).QueryConfigSetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/QueryConfigSetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).QueryConfigSetList(ctx, req.(*QueryConfigSetListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_UpdateConfigSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConfigSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).UpdateConfigSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/UpdateConfigSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).UpdateConfigSet(ctx, req.(*UpdateConfigSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_DeleteConfigSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConfigSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).DeleteConfigSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/DeleteConfigSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).DeleteConfigSet(ctx, req.(*DeleteConfigSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_LockConfigSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockConfigSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).LockConfigSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/LockConfigSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).LockConfigSet(ctx, req.(*LockConfigSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_UnlockConfigSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlockConfigSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).UnlockConfigSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/UnlockConfigSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).UnlockConfigSet(ctx, req.(*UnlockConfigSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_CreateConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConfigsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).CreateConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/CreateConfigs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).CreateConfigs(ctx, req.(*CreateConfigsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_QueryConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryConfigsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).QueryConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/QueryConfigs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).QueryConfigs(ctx, req.(*QueryConfigsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_QueryConfigsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryConfigsListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).QueryConfigsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/QueryConfigsList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).QueryConfigsList(ctx, req.(*QueryConfigsListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_QueryReleaseConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryReleaseConfigsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).QueryReleaseConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/QueryReleaseConfigs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).QueryReleaseConfigs(ctx, req.(*QueryReleaseConfigsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_CreateCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCommitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).CreateCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/CreateCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).CreateCommit(ctx, req.(*CreateCommitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_QueryCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCommitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).QueryCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/QueryCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).QueryCommit(ctx, req.(*QueryCommitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_QueryHistoryCommits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryHistoryCommitsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).QueryHistoryCommits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/QueryHistoryCommits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).QueryHistoryCommits(ctx, req.(*QueryHistoryCommitsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_UpdateCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCommitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).UpdateCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/UpdateCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).UpdateCommit(ctx, req.(*UpdateCommitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_CancelCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelCommitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).CancelCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/CancelCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).CancelCommit(ctx, req.(*CancelCommitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_ConfirmCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmCommitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).ConfirmCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/ConfirmCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).ConfirmCommit(ctx, req.(*ConfirmCommitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_CreateMultiCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMultiCommitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).CreateMultiCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/CreateMultiCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).CreateMultiCommit(ctx, req.(*CreateMultiCommitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_QueryMultiCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMultiCommitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).QueryMultiCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/QueryMultiCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).QueryMultiCommit(ctx, req.(*QueryMultiCommitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_QueryHistoryMultiCommits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryHistoryMultiCommitsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).QueryHistoryMultiCommits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/QueryHistoryMultiCommits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).QueryHistoryMultiCommits(ctx, req.(*QueryHistoryMultiCommitsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_QueryMultiCommitSubList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMultiCommitSubListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).QueryMultiCommitSubList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/QueryMultiCommitSubList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).QueryMultiCommitSubList(ctx, req.(*QueryMultiCommitSubListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_UpdateMultiCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMultiCommitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).UpdateMultiCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/UpdateMultiCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).UpdateMultiCommit(ctx, req.(*UpdateMultiCommitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_CancelMultiCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelMultiCommitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).CancelMultiCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/CancelMultiCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).CancelMultiCommit(ctx, req.(*CancelMultiCommitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_ConfirmMultiCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmMultiCommitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).ConfirmMultiCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/ConfirmMultiCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).ConfirmMultiCommit(ctx, req.(*ConfirmMultiCommitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_CreateRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReleaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).CreateRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/CreateRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).CreateRelease(ctx, req.(*CreateReleaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_QueryRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryReleaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).QueryRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/QueryRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).QueryRelease(ctx, req.(*QueryReleaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_QueryNewestReleases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryNewestReleasesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).QueryNewestReleases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/QueryNewestReleases",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).QueryNewestReleases(ctx, req.(*QueryNewestReleasesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_QueryHistoryReleases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryHistoryReleasesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).QueryHistoryReleases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/QueryHistoryReleases",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).QueryHistoryReleases(ctx, req.(*QueryHistoryReleasesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_UpdateRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReleaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).UpdateRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/UpdateRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).UpdateRelease(ctx, req.(*UpdateReleaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_CancelRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelReleaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).CancelRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/CancelRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).CancelRelease(ctx, req.(*CancelReleaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_RollbackRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RollbackReleaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).RollbackRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/RollbackRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).RollbackRelease(ctx, req.(*RollbackReleaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_PublishRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishReleaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).PublishRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/PublishRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).PublishRelease(ctx, req.(*PublishReleaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_CreateMultiRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMultiReleaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).CreateMultiRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/CreateMultiRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).CreateMultiRelease(ctx, req.(*CreateMultiReleaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_QueryMultiRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMultiReleaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).QueryMultiRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/QueryMultiRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).QueryMultiRelease(ctx, req.(*QueryMultiReleaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_QueryMultiReleaseSubList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMultiReleaseSubListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).QueryMultiReleaseSubList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/QueryMultiReleaseSubList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).QueryMultiReleaseSubList(ctx, req.(*QueryMultiReleaseSubListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_UpdateMultiRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMultiReleaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).UpdateMultiRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/UpdateMultiRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).UpdateMultiRelease(ctx, req.(*UpdateMultiReleaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_CancelMultiRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelMultiReleaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).CancelMultiRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/CancelMultiRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).CancelMultiRelease(ctx, req.(*CancelMultiReleaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_PublishMultiRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishMultiReleaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).PublishMultiRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/PublishMultiRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).PublishMultiRelease(ctx, req.(*PublishMultiReleaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_RollbackMultiRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RollbackMultiReleaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).RollbackMultiRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/RollbackMultiRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).RollbackMultiRelease(ctx, req.(*RollbackMultiReleaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_QueryHistoryMultiReleases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryHistoryMultiReleasesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).QueryHistoryMultiReleases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/QueryHistoryMultiReleases",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).QueryHistoryMultiReleases(ctx, req.(*QueryHistoryMultiReleasesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_CreateAppInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppInstanceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).CreateAppInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/CreateAppInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).CreateAppInstance(ctx, req.(*CreateAppInstanceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_QueryHistoryAppInstances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryHistoryAppInstancesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).QueryHistoryAppInstances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/QueryHistoryAppInstances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).QueryHistoryAppInstances(ctx, req.(*QueryHistoryAppInstancesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_QueryReachableAppInstances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryReachableAppInstancesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).QueryReachableAppInstances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/QueryReachableAppInstances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).QueryReachableAppInstances(ctx, req.(*QueryReachableAppInstancesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_UpdateAppInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppInstanceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).UpdateAppInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/UpdateAppInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).UpdateAppInstance(ctx, req.(*UpdateAppInstanceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_CreateAppInstanceRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppInstanceReleaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).CreateAppInstanceRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/CreateAppInstanceRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).CreateAppInstanceRelease(ctx, req.(*CreateAppInstanceReleaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_QueryAppInstanceRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAppInstanceReleaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).QueryAppInstanceRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/QueryAppInstanceRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).QueryAppInstanceRelease(ctx, req.(*QueryAppInstanceReleaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_QueryEffectedAppInstances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryEffectedAppInstancesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).QueryEffectedAppInstances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/QueryEffectedAppInstances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).QueryEffectedAppInstances(ctx, req.(*QueryEffectedAppInstancesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_QueryMatchedAppInstances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMatchedAppInstancesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).QueryMatchedAppInstances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/QueryMatchedAppInstances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).QueryMatchedAppInstances(ctx, req.(*QueryMatchedAppInstancesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_CreateStrategy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStrategyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).CreateStrategy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/CreateStrategy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).CreateStrategy(ctx, req.(*CreateStrategyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_QueryStrategy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStrategyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).QueryStrategy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/QueryStrategy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).QueryStrategy(ctx, req.(*QueryStrategyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_QueryStrategyList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStrategyListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).QueryStrategyList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/QueryStrategyList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).QueryStrategyList(ctx, req.(*QueryStrategyListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_DeleteStrategy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStrategyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).DeleteStrategy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/DeleteStrategy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).DeleteStrategy(ctx, req.(*DeleteStrategyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_CreateShardingDB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateShardingDBReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).CreateShardingDB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/CreateShardingDB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).CreateShardingDB(ctx, req.(*CreateShardingDBReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_QueryShardingDB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryShardingDBReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).QueryShardingDB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/QueryShardingDB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).QueryShardingDB(ctx, req.(*QueryShardingDBReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_QueryShardingDBList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryShardingDBListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).QueryShardingDBList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/QueryShardingDBList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).QueryShardingDBList(ctx, req.(*QueryShardingDBListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_UpdateShardingDB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateShardingDBReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).UpdateShardingDB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/UpdateShardingDB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).UpdateShardingDB(ctx, req.(*UpdateShardingDBReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_CreateSharding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateShardingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).CreateSharding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/CreateSharding",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).CreateSharding(ctx, req.(*CreateShardingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_QuerySharding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryShardingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).QuerySharding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/QuerySharding",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).QuerySharding(ctx, req.(*QueryShardingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_UpdateSharding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateShardingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).UpdateSharding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/UpdateSharding",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).UpdateSharding(ctx, req.(*UpdateShardingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_CreateAudit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAuditReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).CreateAudit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/CreateAudit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).CreateAudit(ctx, req.(*CreateAuditReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_QueryAuditList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAuditListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).QueryAuditList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/QueryAuditList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).QueryAuditList(ctx, req.(*QueryAuditListReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _DataManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "datamanager.DataManager",
	HandlerType: (*DataManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryAuthInfo",
			Handler:    _DataManager_QueryAuthInfo_Handler,
		},
		{
			MethodName: "QueryAppMetadata",
			Handler:    _DataManager_QueryAppMetadata_Handler,
		},
		{
			MethodName: "CreateBusiness",
			Handler:    _DataManager_CreateBusiness_Handler,
		},
		{
			MethodName: "QueryBusiness",
			Handler:    _DataManager_QueryBusiness_Handler,
		},
		{
			MethodName: "QueryBusinessList",
			Handler:    _DataManager_QueryBusinessList_Handler,
		},
		{
			MethodName: "UpdateBusiness",
			Handler:    _DataManager_UpdateBusiness_Handler,
		},
		{
			MethodName: "CreateApp",
			Handler:    _DataManager_CreateApp_Handler,
		},
		{
			MethodName: "QueryApp",
			Handler:    _DataManager_QueryApp_Handler,
		},
		{
			MethodName: "QueryAppList",
			Handler:    _DataManager_QueryAppList_Handler,
		},
		{
			MethodName: "UpdateApp",
			Handler:    _DataManager_UpdateApp_Handler,
		},
		{
			MethodName: "DeleteApp",
			Handler:    _DataManager_DeleteApp_Handler,
		},
		{
			MethodName: "CreateCluster",
			Handler:    _DataManager_CreateCluster_Handler,
		},
		{
			MethodName: "QueryCluster",
			Handler:    _DataManager_QueryCluster_Handler,
		},
		{
			MethodName: "QueryClusterList",
			Handler:    _DataManager_QueryClusterList_Handler,
		},
		{
			MethodName: "UpdateCluster",
			Handler:    _DataManager_UpdateCluster_Handler,
		},
		{
			MethodName: "DeleteCluster",
			Handler:    _DataManager_DeleteCluster_Handler,
		},
		{
			MethodName: "CreateZone",
			Handler:    _DataManager_CreateZone_Handler,
		},
		{
			MethodName: "QueryZone",
			Handler:    _DataManager_QueryZone_Handler,
		},
		{
			MethodName: "QueryZoneList",
			Handler:    _DataManager_QueryZoneList_Handler,
		},
		{
			MethodName: "UpdateZone",
			Handler:    _DataManager_UpdateZone_Handler,
		},
		{
			MethodName: "DeleteZone",
			Handler:    _DataManager_DeleteZone_Handler,
		},
		{
			MethodName: "CreateConfigSet",
			Handler:    _DataManager_CreateConfigSet_Handler,
		},
		{
			MethodName: "QueryConfigSet",
			Handler:    _DataManager_QueryConfigSet_Handler,
		},
		{
			MethodName: "QueryConfigSetList",
			Handler:    _DataManager_QueryConfigSetList_Handler,
		},
		{
			MethodName: "UpdateConfigSet",
			Handler:    _DataManager_UpdateConfigSet_Handler,
		},
		{
			MethodName: "DeleteConfigSet",
			Handler:    _DataManager_DeleteConfigSet_Handler,
		},
		{
			MethodName: "LockConfigSet",
			Handler:    _DataManager_LockConfigSet_Handler,
		},
		{
			MethodName: "UnlockConfigSet",
			Handler:    _DataManager_UnlockConfigSet_Handler,
		},
		{
			MethodName: "CreateConfigs",
			Handler:    _DataManager_CreateConfigs_Handler,
		},
		{
			MethodName: "QueryConfigs",
			Handler:    _DataManager_QueryConfigs_Handler,
		},
		{
			MethodName: "QueryConfigsList",
			Handler:    _DataManager_QueryConfigsList_Handler,
		},
		{
			MethodName: "QueryReleaseConfigs",
			Handler:    _DataManager_QueryReleaseConfigs_Handler,
		},
		{
			MethodName: "CreateCommit",
			Handler:    _DataManager_CreateCommit_Handler,
		},
		{
			MethodName: "QueryCommit",
			Handler:    _DataManager_QueryCommit_Handler,
		},
		{
			MethodName: "QueryHistoryCommits",
			Handler:    _DataManager_QueryHistoryCommits_Handler,
		},
		{
			MethodName: "UpdateCommit",
			Handler:    _DataManager_UpdateCommit_Handler,
		},
		{
			MethodName: "CancelCommit",
			Handler:    _DataManager_CancelCommit_Handler,
		},
		{
			MethodName: "ConfirmCommit",
			Handler:    _DataManager_ConfirmCommit_Handler,
		},
		{
			MethodName: "CreateMultiCommit",
			Handler:    _DataManager_CreateMultiCommit_Handler,
		},
		{
			MethodName: "QueryMultiCommit",
			Handler:    _DataManager_QueryMultiCommit_Handler,
		},
		{
			MethodName: "QueryHistoryMultiCommits",
			Handler:    _DataManager_QueryHistoryMultiCommits_Handler,
		},
		{
			MethodName: "QueryMultiCommitSubList",
			Handler:    _DataManager_QueryMultiCommitSubList_Handler,
		},
		{
			MethodName: "UpdateMultiCommit",
			Handler:    _DataManager_UpdateMultiCommit_Handler,
		},
		{
			MethodName: "CancelMultiCommit",
			Handler:    _DataManager_CancelMultiCommit_Handler,
		},
		{
			MethodName: "ConfirmMultiCommit",
			Handler:    _DataManager_ConfirmMultiCommit_Handler,
		},
		{
			MethodName: "CreateRelease",
			Handler:    _DataManager_CreateRelease_Handler,
		},
		{
			MethodName: "QueryRelease",
			Handler:    _DataManager_QueryRelease_Handler,
		},
		{
			MethodName: "QueryNewestReleases",
			Handler:    _DataManager_QueryNewestReleases_Handler,
		},
		{
			MethodName: "QueryHistoryReleases",
			Handler:    _DataManager_QueryHistoryReleases_Handler,
		},
		{
			MethodName: "UpdateRelease",
			Handler:    _DataManager_UpdateRelease_Handler,
		},
		{
			MethodName: "CancelRelease",
			Handler:    _DataManager_CancelRelease_Handler,
		},
		{
			MethodName: "RollbackRelease",
			Handler:    _DataManager_RollbackRelease_Handler,
		},
		{
			MethodName: "PublishRelease",
			Handler:    _DataManager_PublishRelease_Handler,
		},
		{
			MethodName: "CreateMultiRelease",
			Handler:    _DataManager_CreateMultiRelease_Handler,
		},
		{
			MethodName: "QueryMultiRelease",
			Handler:    _DataManager_QueryMultiRelease_Handler,
		},
		{
			MethodName: "QueryMultiReleaseSubList",
			Handler:    _DataManager_QueryMultiReleaseSubList_Handler,
		},
		{
			MethodName: "UpdateMultiRelease",
			Handler:    _DataManager_UpdateMultiRelease_Handler,
		},
		{
			MethodName: "CancelMultiRelease",
			Handler:    _DataManager_CancelMultiRelease_Handler,
		},
		{
			MethodName: "PublishMultiRelease",
			Handler:    _DataManager_PublishMultiRelease_Handler,
		},
		{
			MethodName: "RollbackMultiRelease",
			Handler:    _DataManager_RollbackMultiRelease_Handler,
		},
		{
			MethodName: "QueryHistoryMultiReleases",
			Handler:    _DataManager_QueryHistoryMultiReleases_Handler,
		},
		{
			MethodName: "CreateAppInstance",
			Handler:    _DataManager_CreateAppInstance_Handler,
		},
		{
			MethodName: "QueryHistoryAppInstances",
			Handler:    _DataManager_QueryHistoryAppInstances_Handler,
		},
		{
			MethodName: "QueryReachableAppInstances",
			Handler:    _DataManager_QueryReachableAppInstances_Handler,
		},
		{
			MethodName: "UpdateAppInstance",
			Handler:    _DataManager_UpdateAppInstance_Handler,
		},
		{
			MethodName: "CreateAppInstanceRelease",
			Handler:    _DataManager_CreateAppInstanceRelease_Handler,
		},
		{
			MethodName: "QueryAppInstanceRelease",
			Handler:    _DataManager_QueryAppInstanceRelease_Handler,
		},
		{
			MethodName: "QueryEffectedAppInstances",
			Handler:    _DataManager_QueryEffectedAppInstances_Handler,
		},
		{
			MethodName: "QueryMatchedAppInstances",
			Handler:    _DataManager_QueryMatchedAppInstances_Handler,
		},
		{
			MethodName: "CreateStrategy",
			Handler:    _DataManager_CreateStrategy_Handler,
		},
		{
			MethodName: "QueryStrategy",
			Handler:    _DataManager_QueryStrategy_Handler,
		},
		{
			MethodName: "QueryStrategyList",
			Handler:    _DataManager_QueryStrategyList_Handler,
		},
		{
			MethodName: "DeleteStrategy",
			Handler:    _DataManager_DeleteStrategy_Handler,
		},
		{
			MethodName: "CreateShardingDB",
			Handler:    _DataManager_CreateShardingDB_Handler,
		},
		{
			MethodName: "QueryShardingDB",
			Handler:    _DataManager_QueryShardingDB_Handler,
		},
		{
			MethodName: "QueryShardingDBList",
			Handler:    _DataManager_QueryShardingDBList_Handler,
		},
		{
			MethodName: "UpdateShardingDB",
			Handler:    _DataManager_UpdateShardingDB_Handler,
		},
		{
			MethodName: "CreateSharding",
			Handler:    _DataManager_CreateSharding_Handler,
		},
		{
			MethodName: "QuerySharding",
			Handler:    _DataManager_QuerySharding_Handler,
		},
		{
			MethodName: "UpdateSharding",
			Handler:    _DataManager_UpdateSharding_Handler,
		},
		{
			MethodName: "CreateAudit",
			Handler:    _DataManager_CreateAudit_Handler,
		},
		{
			MethodName: "QueryAuditList",
			Handler:    _DataManager_QueryAuditList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "datamanager.proto",
}

func init() { proto.RegisterFile("datamanager.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 4529 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xdc, 0x5d, 0xdb, 0x6f, 0x24, 0x47,
	0xd5, 0x77, 0x7b, 0x2e, 0x1e, 0x1f, 0x5f, 0xd6, 0x6e, 0x7b, 0x77, 0x9d, 0x59, 0xdb, 0xf1, 0x56,
	0x6e, 0xde, 0xdc, 0xf6, 0xfb, 0xf6, 0xbb, 0x92, 0xb7, 0xcd, 0x6e, 0x80, 0x8d, 0x76, 0xa3, 0x65,
	0x36, 0x41, 0x0a, 0x20, 0x45, 0xed, 0x99, 0xb6, 0x3d, 0xf1, 0x78, 0xa6, 0x77, 0xba, 0xad, 0xb0,
	0x21, 0x11, 0x10, 0x24, 0x04, 0x12, 0xa0, 0x28, 0x51, 0x20, 0x40, 0x40, 0x01, 0x42, 0x92, 0x07,
	0x1e, 0x78, 0x45, 0x28, 0x12, 0x42, 0x3c, 0x10, 0x1e, 0xe0, 0x81, 0x48, 0x20, 0x04, 0x3c, 0x21,
	0x5e, 0x91, 0xf2, 0x17, 0xa0, 0xba, 0x76, 0x55, 0xf5, 0xe9, 0x9e, 0x99, 0x65, 0xca, 0xde, 0xe5,
	0xc9, 0x53, 0x97, 0xae, 0xaa, 0xf3, 0xab, 0x53, 0xa7, 0x4e, 0x9d, 0x3a, 0x75, 0x0c, 0x8b, 0xad,
	0x20, 0x09, 0xf6, 0x83, 0x6e, 0xb0, 0x13, 0xf6, 0x1f, 0x8e, 0xfa, 0xbd, 0xa4, 0xe7, 0xcf, 0x68,
	0x59, 0xf5, 0x87, 0xb6, 0xf6, 0x1e, 0xda, 0x8a, 0x9b, 0xd1, 0xd9, 0x76, 0x37, 0x09, 0xfb, 0xdd,
	0xa0, 0x73, 0x96, 0x55, 0x6a, 0xf6, 0x3a, 0x67, 0x9b, 0xbd, 0xfd, 0xfd, 0x5e, 0x57, 0xfc, 0xe1,
	0xdf, 0x92, 0xff, 0x85, 0x85, 0x4f, 0x1c, 0x84, 0xfd, 0x1b, 0xe7, 0x0f, 0x92, 0xdd, 0x4b, 0xdd,
	0xed, 0x5e, 0x23, 0xbc, 0xee, 0x2f, 0x40, 0x29, 0x0e, 0xaf, 0xaf, 0x78, 0x1b, 0xde, 0x66, 0xb9,
	0x41, 0x7f, 0xd2, 0x9c, 0xad, 0x76, 0x6b, 0x65, 0x72, 0xc3, 0xdb, 0x9c, 0x6e, 0xd0, 0x9f, 0xe4,
	0x05, 0x58, 0xb4, 0xbe, 0x8b, 0x23, 0xe4, 0xc3, 0x33, 0x30, 0x15, 0xf6, 0xfb, 0x17, 0x7a, 0xad,
	0x90, 0x7d, 0x3c, 0x7f, 0xee, 0xd8, 0xc3, 0xa2, 0xfb, 0xc7, 0x78, 0x76, 0x43, 0x96, 0xfb, 0x27,
	0xa0, 0x1a, 0xf6, 0xfb, 0x57, 0xe2, 0x9d, 0x95, 0x12, 0xeb, 0x46, 0xa4, 0x7c, 0x1f, 0xca, 0xc1,
	0x41, 0xb2, 0xbb, 0x52, 0x66, 0xb9, 0xec, 0x37, 0x79, 0xdf, 0x83, 0x25, 0xde, 0x7d, 0x14, 0x5d,
	0x09, 0x93, 0x80, 0x02, 0x80, 0x8f, 0x9c, 0xc0, 0xec, 0xd6, 0x41, 0xdc, 0xee, 0x86, 0x71, 0xfc,
	0x44, 0xb0, 0x1f, 0x0a, 0x12, 0x8c, 0x3c, 0x7f, 0x05, 0xa6, 0x82, 0x28, 0x62, 0xc5, 0xbc, 0x6b,
	0x99, 0xf4, 0x37, 0x60, 0xa6, 0xd9, 0x39, 0x88, 0x93, 0xb0, 0xcf, 0x4a, 0xf9, 0x10, 0xf4, 0x2c,
	0xbf, 0x0e, 0xb5, 0xe7, 0x7b, 0xdd, 0x90, 0x15, 0x57, 0x58, 0xb1, 0x4a, 0xfb, 0x77, 0xc3, 0x9c,
	0xa8, 0x7a, 0x39, 0xd8, 0x0a, 0x3b, 0xf1, 0x4a, 0x95, 0x55, 0x30, 0x33, 0x29, 0x2d, 0xcb, 0x59,
	0x5a, 0x5c, 0xa1, 0x29, 0x66, 0xb2, 0xac, 0x66, 0xd2, 0x5f, 0x86, 0x4a, 0x10, 0x45, 0xed, 0x96,
	0x18, 0x3e, 0x4f, 0xf8, 0xab, 0x30, 0x2d, 0x86, 0xd9, 0x6e, 0x89, 0x71, 0xa7, 0x19, 0xb4, 0x75,
	0x4a, 0x65, 0xbb, 0xb5, 0x32, 0xc5, 0x5b, 0xe7, 0x29, 0xf2, 0x33, 0x0f, 0x16, 0x2f, 0xf4, 0xc3,
	0x20, 0x09, 0x1f, 0x15, 0x00, 0x0f, 0xc9, 0x4f, 0x74, 0x96, 0xbb, 0xe9, 0x04, 0xb0, 0xdf, 0x74,
	0x64, 0xad, 0x30, 0x52, 0xa3, 0xe5, 0x09, 0x9a, 0x1b, 0x27, 0x41, 0xc2, 0xe1, 0xae, 0x34, 0x78,
	0x82, 0xce, 0x61, 0x93, 0x76, 0xdc, 0xeb, 0x8b, 0xd1, 0xca, 0x24, 0x6d, 0x79, 0x3f, 0xdc, 0xef,
	0x89, 0x91, 0xb2, 0xdf, 0x8a, 0xa7, 0x6a, 0x1a, 0x4f, 0x7d, 0x0e, 0x7c, 0x7b, 0xe8, 0x87, 0x36,
	0x09, 0xe4, 0x71, 0xb1, 0x0c, 0xc7, 0x00, 0x1b, 0xf9, 0xa6, 0x27, 0xd6, 0xa6, 0x7b, 0x42, 0x1e,
	0x84, 0x9a, 0x5c, 0x49, 0x8c, 0x9a, 0x99, 0x73, 0x0b, 0xb2, 0x0d, 0xd5, 0xb9, 0xaa, 0x41, 0x9e,
	0x14, 0x8c, 0x2e, 0x8b, 0x2e, 0xb7, 0xe3, 0x04, 0x27, 0x74, 0x19, 0x2a, 0xed, 0x6e, 0x2b, 0xfc,
	0x2c, 0x1b, 0x58, 0xa5, 0xc1, 0x13, 0x34, 0xb7, 0xd3, 0xde, 0x6f, 0x27, 0x6c, 0x10, 0x95, 0x06,
	0x4f, 0x90, 0xef, 0x7b, 0x70, 0x1c, 0x69, 0xd6, 0x15, 0xc9, 0xff, 0x01, 0x20, 0x09, 0x0a, 0x29,
	0xd1, 0x25, 0x94, 0x68, 0xad, 0x0e, 0x79, 0xc7, 0x83, 0xc5, 0xa7, 0xa2, 0x96, 0xd3, 0x45, 0x21,
	0x99, 0xbc, 0xa2, 0x31, 0xb9, 0x5a, 0x28, 0x55, 0x7d, 0xa1, 0xd4, 0xa1, 0xd6, 0x8b, 0xc2, 0x3e,
	0x5b, 0x29, 0x7c, 0x49, 0xa8, 0x34, 0x69, 0x83, 0x6f, 0x0f, 0xd4, 0x11, 0x8c, 0xe4, 0x17, 0x1e,
	0xcc, 0xf2, 0xe5, 0x76, 0x3e, 0x8a, 0x86, 0xc5, 0x43, 0x89, 0xaa, 0x92, 0x2e, 0xaa, 0x24, 0x4a,
	0x65, 0x0d, 0xa5, 0x75, 0x80, 0x56, 0x18, 0x75, 0x7a, 0x37, 0x9e, 0xbc, 0x11, 0x49, 0x49, 0xa1,
	0xe5, 0xe4, 0x60, 0xa3, 0x09, 0x91, 0x29, 0x5c, 0x88, 0xd4, 0x52, 0x7c, 0xc9, 0xf3, 0x30, 0xa7,
	0x51, 0xe0, 0x8a, 0xdf, 0x14, 0xcd, 0x65, 0x8d, 0x66, 0xf2, 0x69, 0x98, 0x91, 0x7b, 0xc6, 0xd8,
	0xc1, 0x23, 0x2f, 0x79, 0x30, 0x9b, 0xb6, 0xee, 0x8a, 0xb0, 0x35, 0x28, 0x05, 0x51, 0x24, 0xc4,
	0xc6, 0x8c, 0xfc, 0x9c, 0x76, 0x49, 0xf3, 0x49, 0x00, 0xc7, 0xe4, 0x18, 0xf2, 0xe5, 0x04, 0x4a,
	0x25, 0x97, 0x1c, 0x25, 0x54, 0x72, 0x94, 0x75, 0xc9, 0xf1, 0x15, 0x4f, 0x2a, 0x3f, 0xb2, 0x0f,
	0x57, 0xb4, 0xde, 0x09, 0xe5, 0x20, 0x8a, 0xa4, 0xb8, 0x30, 0x88, 0x65, 0x05, 0xe4, 0x97, 0x1e,
	0xcc, 0xf2, 0xa5, 0x77, 0x24, 0xcb, 0x41, 0xb2, 0x77, 0x15, 0x13, 0x1f, 0x53, 0x79, 0xe2, 0xa3,
	0x66, 0x89, 0x8f, 0x16, 0xcc, 0x69, 0x34, 0xb8, 0x92, 0x1c, 0x2d, 0x98, 0xbd, 0x18, 0x76, 0xc2,
	0x31, 0x20, 0xa5, 0xd3, 0x52, 0xce, 0xd2, 0xa2, 0xf5, 0xe2, 0x8a, 0x96, 0xbf, 0x79, 0xb0, 0xc0,
	0x65, 0xc8, 0x05, 0xae, 0x5b, 0x0d, 0x4b, 0x90, 0xa1, 0x9e, 0x95, 0x6c, 0xf5, 0x0c, 0x63, 0x01,
	0x5c, 0xcd, 0x5b, 0x07, 0xe8, 0x5f, 0xb0, 0xf4, 0x3c, 0x2d, 0x67, 0x34, 0x89, 0x48, 0xc9, 0xec,
	0x70, 0x4d, 0x77, 0x9a, 0x93, 0xc9, 0x53, 0xe4, 0xcb, 0x4a, 0x2d, 0x54, 0x64, 0xba, 0x5a, 0x69,
	0x06, 0x30, 0x65, 0x0b, 0x18, 0xf2, 0x9a, 0x27, 0xa4, 0xca, 0x88, 0x70, 0xe3, 0xfc, 0x53, 0xd8,
	0x97, 0x9a, 0x84, 0x8a, 0x36, 0x09, 0x29, 0x40, 0x55, 0x03, 0xa0, 0x57, 0xa4, 0x24, 0x72, 0x8e,
	0xcf, 0x19, 0x98, 0x12, 0x43, 0x14, 0x92, 0x57, 0x35, 0x21, 0xbb, 0x96, 0xe5, 0x14, 0xac, 0x25,
	0x7d, 0x50, 0x23, 0x8a, 0x61, 0x04, 0x30, 0xed, 0xa0, 0x55, 0x36, 0x0f, 0x5a, 0x4a, 0x6c, 0x57,
	0x50, 0xb1, 0x5d, 0xd5, 0xc5, 0xf6, 0xeb, 0xf2, 0xc0, 0x64, 0x8c, 0xcb, 0x15, 0x60, 0x0f, 0x40,
	0x4d, 0x00, 0x22, 0xc5, 0x77, 0x06, 0x31, 0x55, 0x81, 0xfc, 0xdd, 0x83, 0x05, 0x2e, 0x02, 0x9d,
	0xaf, 0x67, 0x73, 0xe5, 0x56, 0x32, 0x2b, 0x77, 0x2c, 0x22, 0x3d, 0x77, 0x45, 0xef, 0x4a, 0x95,
	0xd6, 0x35, 0xc3, 0x92, 0x08, 0x16, 0xb8, 0x20, 0x1e, 0x2b, 0xa2, 0x45, 0xa2, 0x7f, 0x17, 0x16,
	0xad, 0x1e, 0x5d, 0xd1, 0xf6, 0x07, 0x4f, 0xaa, 0x90, 0x9f, 0xea, 0x75, 0xc3, 0x61, 0x29, 0x4b,
	0x0f, 0xdf, 0x25, 0xfd, 0xf0, 0x3d, 0x82, 0xd4, 0x2f, 0x3e, 0xdc, 0xe3, 0x5c, 0xa2, 0xed, 0x04,
	0x35, 0x7c, 0x27, 0x98, 0xd6, 0x74, 0xe3, 0x17, 0x61, 0x5e, 0x27, 0xcc, 0xd5, 0xe2, 0x4c, 0xa1,
	0x28, 0x1b, 0x76, 0x88, 0x44, 0x28, 0xb0, 0xa3, 0xc0, 0x8a, 0x8b, 0xac, 0x9c, 0x1e, 0x30, 0xe9,
	0x4e, 0xb7, 0xb9, 0x39, 0xad, 0x5b, 0x57, 0x44, 0x6f, 0x40, 0x99, 0x0e, 0x42, 0xc8, 0xef, 0x59,
	0xf9, 0x3d, 0xeb, 0x94, 0x95, 0x90, 0xbf, 0xca, 0xed, 0x84, 0xe6, 0xfd, 0xeb, 0x62, 0x7b, 0xb0,
	0x15, 0xcc, 0x60, 0xa8, 0x0a, 0xc2, 0x50, 0x5c, 0xb8, 0x57, 0x51, 0xe1, 0x3e, 0xa5, 0x09, 0xf7,
	0xac, 0xcd, 0xac, 0x86, 0xd9, 0xcc, 0xbe, 0x26, 0x4d, 0x1c, 0x29, 0x81, 0xae, 0xd0, 0x26, 0x50,
	0xa1, 0x98, 0x4a, 0xe1, 0x6f, 0xc2, 0xcd, 0x8b, 0xc8, 0x8f, 0x3d, 0xa9, 0xf9, 0xba, 0x5a, 0xc7,
	0xe3, 0x39, 0xdf, 0x87, 0x30, 0xaf, 0x0f, 0xd3, 0x95, 0x58, 0xdb, 0x91, 0xba, 0xf3, 0x38, 0xd0,
	0x28, 0x92, 0xd4, 0x21, 0xcc, 0xeb, 0x1d, 0xb9, 0xa2, 0xe7, 0x8f, 0x9e, 0x34, 0x0d, 0x5e, 0xe8,
	0x75, 0xb7, 0xdb, 0x3b, 0xd7, 0xc2, 0xa1, 0x17, 0x54, 0x1d, 0x6a, 0xcd, 0xed, 0x9d, 0x38, 0x4c,
	0x14, 0x5d, 0x2a, 0x3d, 0x82, 0xbc, 0x1e, 0x83, 0xb5, 0x82, 0xb6, 0xb1, 0x1d, 0x05, 0xc9, 0xae,
	0x10, 0xd3, 0x3c, 0x41, 0x45, 0xd6, 0x52, 0x86, 0x34, 0x57, 0x4b, 0x49, 0x07, 0xa3, 0x6c, 0x82,
	0x41, 0x5e, 0x95, 0x2b, 0x7a, 0x64, 0x88, 0x73, 0xcf, 0x76, 0x79, 0x7d, 0xa1, 0x9a, 0xb9, 0x82,
	0xa7, 0xaa, 0xc3, 0xf3, 0x1d, 0x0f, 0x7c, 0x7b, 0x54, 0xae, 0xd0, 0x39, 0x0b, 0xd3, 0x4d, 0xd9,
	0x8b, 0x90, 0xed, 0x8b, 0x4a, 0xd3, 0x54, 0xdd, 0xa7, 0x75, 0xc8, 0xb7, 0xa4, 0xe1, 0x53, 0x95,
	0xde, 0x2a, 0x1a, 0xfa, 0x9b, 0x1e, 0x9c, 0xc0, 0x46, 0xe6, 0x0a, 0xba, 0xff, 0x04, 0x50, 0xb0,
	0x48, 0x41, 0x8d, 0x60, 0xa7, 0x55, 0x22, 0xbf, 0xf2, 0xa4, 0xad, 0xd3, 0xf9, 0x9a, 0x1e, 0x8b,
	0xec, 0x4e, 0x19, 0xb4, 0xa6, 0x33, 0xe8, 0xb3, 0xb0, 0x94, 0xa1, 0xc2, 0x9d, 0x26, 0xee, 0x0b,
	0xbd, 0x78, 0x9c, 0x88, 0x15, 0xc9, 0xf7, 0x67, 0x61, 0x29, 0xd3, 0xa3, 0x2b, 0xea, 0x5e, 0xf2,
	0x60, 0xe1, 0x72, 0xaf, 0xb9, 0x77, 0x58, 0xc4, 0x61, 0x6c, 0x41, 0xde, 0xf0, 0x60, 0xd1, 0x1a,
	0x84, 0x43, 0xd5, 0xb9, 0xd3, 0x6b, 0xee, 0x85, 0x72, 0x60, 0x22, 0x45, 0x87, 0x4c, 0x7f, 0x3d,
	0xd9, 0x4e, 0x2f, 0x34, 0x65, 0x9a, 0x72, 0xc0, 0x53, 0xdd, 0xce, 0x21, 0x82, 0xc4, 0xf8, 0xdb,
	0xee, 0xd1, 0x15, 0x07, 0xfc, 0x69, 0x52, 0x19, 0xe3, 0x58, 0x67, 0xb1, 0x4b, 0xeb, 0x50, 0xaa,
	0xee, 0x54, 0x6c, 0x75, 0x47, 0x01, 0x55, 0xcd, 0x02, 0x45, 0x69, 0x6a, 0x27, 0xea, 0xde, 0x55,
	0xa5, 0xe9, 0xa8, 0x9a, 0xed, 0x96, 0x10, 0x0e, 0xf4, 0x27, 0x53, 0x0f, 0xb6, 0x77, 0x2e, 0xb7,
	0xbb, 0x7b, 0x62, 0xcb, 0x97, 0x49, 0x56, 0xd2, 0xeb, 0x26, 0x61, 0x37, 0x59, 0x81, 0x0d, 0x6f,
	0x73, 0xb6, 0x21, 0x93, 0xba, 0x4a, 0x31, 0x83, 0xab, 0x14, 0xb3, 0x98, 0x10, 0x9b, 0xd3, 0x85,
	0x98, 0xda, 0x28, 0xe6, 0x39, 0x1a, 0x2c, 0x41, 0x0f, 0xd5, 0x16, 0xb6, 0xae, 0xa6, 0xf1, 0x77,
	0xca, 0xc6, 0x77, 0xfb, 0xcd, 0xa2, 0xc2, 0xae, 0xa6, 0x63, 0x97, 0x5a, 0x07, 0x1d, 0x63, 0xc7,
	0xac, 0x83, 0xbc, 0x8f, 0x8c, 0x75, 0x50, 0x74, 0x2d, 0xcb, 0xc9, 0x87, 0x72, 0x8f, 0x6f, 0x84,
	0x9d, 0x30, 0x88, 0x6f, 0xc7, 0x35, 0x53, 0x87, 0x5a, 0xb0, 0x15, 0x27, 0xfd, 0xa0, 0x99, 0x30,
	0xc0, 0x6b, 0x0d, 0x95, 0x4e, 0x67, 0x62, 0x5a, 0x9f, 0x89, 0x6f, 0x7b, 0x70, 0x12, 0x25, 0xfa,
	0x16, 0x98, 0x90, 0xef, 0x29, 0x73, 0x2d, 0xcf, 0x18, 0x45, 0x19, 0x1c, 0x20, 0x9e, 0x15, 0x82,
	0xe5, 0x3c, 0x7e, 0x1d, 0xc9, 0x6c, 0xab, 0x8f, 0xcf, 0xa5, 0xd9, 0x76, 0x7b, 0x27, 0xee, 0xb4,
	0xe3, 0x24, 0x63, 0xb6, 0x15, 0xc8, 0xa9, 0x0a, 0xe4, 0xd5, 0x12, 0x1c, 0x93, 0xd2, 0x89, 0x52,
	0x36, 0x0a, 0x6c, 0x12, 0x9a, 0x52, 0x16, 0x9a, 0xec, 0xbd, 0xad, 0x01, 0x74, 0xc5, 0x02, 0x7a,
	0x1e, 0x26, 0x7b, 0x91, 0xc0, 0x6c, 0xb2, 0x17, 0x15, 0x6a, 0x83, 0xeb, 0x00, 0x49, 0xb8, 0x1f,
	0x75, 0x82, 0x24, 0x54, 0x52, 0x5f, 0xcb, 0xa1, 0xdf, 0xca, 0x94, 0xe0, 0x60, 0x95, 0xf6, 0x09,
	0xcc, 0xca, 0xdf, 0x8d, 0x83, 0x4e, 0xc8, 0xf6, 0x80, 0xe9, 0x86, 0x91, 0x27, 0xb6, 0x08, 0xc6,
	0x77, 0x33, 0x6a, 0x8b, 0xa0, 0x49, 0x56, 0xb2, 0x1b, 0x74, 0x77, 0xc2, 0x58, 0xec, 0x05, 0x32,
	0xa9, 0xb6, 0x88, 0x39, 0x6c, 0x8b, 0x98, 0xd7, 0xb7, 0x88, 0xbb, 0x61, 0x6e, 0xff, 0xa0, 0x93,
	0xb4, 0x2f, 0x48, 0xf0, 0x8e, 0x71, 0x23, 0x8f, 0x91, 0x49, 0xbe, 0x94, 0x5e, 0x8e, 0x89, 0x59,
	0x71, 0x79, 0x30, 0xcd, 0x61, 0x71, 0xd2, 0x81, 0x79, 0xc1, 0xb5, 0xe3, 0xe2, 0x0c, 0x5d, 0xec,
	0x94, 0x4d, 0xb1, 0x43, 0xbe, 0x91, 0x6e, 0x5e, 0x6e, 0x49, 0xbe, 0x17, 0xaa, 0x7c, 0x40, 0x42,
	0xae, 0xcc, 0xa7, 0xab, 0x83, 0x75, 0x2c, 0x4a, 0xc9, 0x07, 0x52, 0xcc, 0x7f, 0xbc, 0x1d, 0x27,
	0x3d, 0x39, 0xae, 0xd8, 0xdd, 0xe1, 0x5c, 0xe7, 0xfa, 0x8a, 0xc5, 0xf5, 0xab, 0x30, 0x7d, 0x9d,
	0x8e, 0x85, 0xdd, 0x62, 0xf3, 0x85, 0x92, 0x66, 0xa4, 0xc2, 0x68, 0x0a, 0x15, 0x46, 0x35, 0x4b,
	0x18, 0x9d, 0x44, 0xc9, 0x72, 0x85, 0xf7, 0x26, 0x5d, 0x50, 0xac, 0x0f, 0x21, 0x8e, 0x6c, 0xc0,
	0x65, 0x31, 0x79, 0x6d, 0x12, 0x8e, 0xc9, 0x33, 0xdd, 0xb8, 0x58, 0xce, 0x14, 0x17, 0xe5, 0x42,
	0x71, 0x51, 0x19, 0x20, 0x2e, 0xaa, 0xc5, 0xe2, 0x62, 0x2a, 0x57, 0x5c, 0xd4, 0x70, 0x71, 0xa1,
	0x5d, 0x1b, 0x18, 0x93, 0x0f, 0xd6, 0x51, 0x60, 0x47, 0x5d, 0xad, 0xb9, 0x5d, 0x1a, 0x64, 0x1f,
	0x8e, 0x5d, 0x08, 0xba, 0xcd, 0xb0, 0x33, 0xd6, 0x25, 0x9f, 0x7b, 0xc4, 0xd9, 0x81, 0x05, 0xb3,
	0x3b, 0x57, 0x74, 0xbd, 0x49, 0xe5, 0x29, 0x9d, 0x96, 0xfe, 0xfe, 0x68, 0x94, 0xdd, 0xd4, 0x22,
	0x56, 0x58, 0x54, 0x0a, 0xb0, 0xa8, 0x66, 0xaf, 0xde, 0xac, 0x11, 0xba, 0x02, 0xe3, 0x6d, 0x0f,
	0x96, 0xf9, 0xe6, 0x72, 0x25, 0xdd, 0x74, 0x86, 0x05, 0x24, 0xb3, 0x7f, 0x95, 0x90, 0xfd, 0x2b,
	0x47, 0x03, 0xc0, 0xac, 0x41, 0x45, 0x90, 0xbc, 0xe2, 0xc1, 0x71, 0x64, 0xa0, 0xae, 0xe4, 0x54,
	0x86, 0xb4, 0x32, 0xb6, 0x35, 0x3f, 0x23, 0x54, 0x4d, 0x57, 0xd8, 0x91, 0x1f, 0x4a, 0x65, 0xf1,
	0x50, 0x88, 0xfe, 0x1f, 0x98, 0xd1, 0xba, 0x17, 0x3b, 0xe2, 0x92, 0x6c, 0x46, 0x1f, 0x82, 0x5e,
	0x8f, 0xbc, 0xe7, 0xc1, 0x29, 0x7d, 0x13, 0xd1, 0x2a, 0xc6, 0xce, 0x3c, 0x93, 0xcc, 0x4d, 0xb0,
	0x92, 0xbb, 0x09, 0x0e, 0xbe, 0x6b, 0x23, 0x3f, 0xf1, 0x60, 0x35, 0x7f, 0xfc, 0xae, 0xc0, 0xfe,
	0x3f, 0x98, 0xd5, 0x40, 0x94, 0xdb, 0x21, 0x8a, 0xb6, 0x51, 0x91, 0x6c, 0x43, 0xdd, 0x66, 0x89,
	0x6b, 0x07, 0x5b, 0xa3, 0x1c, 0x73, 0x86, 0xe3, 0xbd, 0x97, 0xe5, 0xb4, 0x62, 0x1d, 0xb9, 0xf4,
	0x5b, 0x12, 0x03, 0xe0, 0x90, 0xd0, 0x93, 0xaf, 0xcc, 0xa0, 0x43, 0x5a, 0xe6, 0x9b, 0x9f, 0x33,
	0x69, 0x25, 0xe5, 0x52, 0x39, 0x47, 0x2e, 0x59, 0xba, 0x18, 0xe9, 0xc0, 0x71, 0x64, 0x44, 0xae,
	0xc4, 0xf5, 0x0b, 0xb0, 0xcc, 0x37, 0x49, 0x67, 0xf4, 0x17, 0x6d, 0xd1, 0x1d, 0x38, 0x8e, 0xf4,
	0xee, 0x8a, 0xd6, 0x17, 0xe1, 0xb8, 0xd8, 0x04, 0x8f, 0x84, 0xd8, 0x7d, 0x38, 0x81, 0x75, 0xef,
	0x8a, 0xda, 0xb7, 0x4a, 0xf2, 0x94, 0x27, 0x6c, 0x2a, 0x23, 0x38, 0xf8, 0xf4, 0xf9, 0x17, 0xa9,
	0x83, 0x8f, 0xca, 0x18, 0xe1, 0x72, 0xb5, 0xc8, 0x7a, 0xb4, 0x0e, 0xc0, 0x7f, 0xb3, 0x1b, 0x31,
	0x7e, 0x08, 0xd7, 0x72, 0x68, 0x39, 0x3d, 0xb8, 0x25, 0xe1, 0xce, 0x8d, 0xf4, 0x18, 0x9e, 0xe6,
	0x68, 0xe5, 0xed, 0x50, 0xba, 0x50, 0x69, 0x39, 0x86, 0x9e, 0x04, 0x96, 0x9e, 0x24, 0x17, 0xe4,
	0x8c, 0xb6, 0x20, 0x35, 0xfb, 0xec, 0xac, 0x69, 0x9f, 0xc5, 0x6d, 0xb1, 0x1b, 0x30, 0xc3, 0x47,
	0xfb, 0x51, 0x76, 0x75, 0x34, 0x2f, 0x3c, 0x37, 0xd2, 0x2c, 0xff, 0x5e, 0x98, 0x67, 0xac, 0xd1,
	0x50, 0x50, 0xf2, 0xb3, 0xb8, 0x95, 0x9b, 0xda, 0x6f, 0xd5, 0x2c, 0xb9, 0x62, 0x88, 0x6b, 0xe2,
	0x04, 0x3c, 0x4e, 0x76, 0x48, 0x4d, 0xa8, 0xae, 0x87, 0x4f, 0x9b, 0x10, 0xdd, 0xda, 0x16, 0x3b,
	0xd9, 0xb5, 0x2c, 0xa7, 0xfb, 0x2f, 0x3f, 0x5b, 0x3f, 0x11, 0x3e, 0x17, 0xd2, 0xcd, 0x85, 0x65,
	0xc7, 0xe3, 0x30, 0xda, 0xdd, 0x0b, 0xf3, 0x9d, 0x5e, 0x33, 0xe8, 0xa4, 0xd3, 0xca, 0x17, 0x82,
	0x95, 0x3b, 0x92, 0x01, 0xef, 0xbb, 0xf2, 0xcc, 0x6c, 0x0f, 0xd7, 0xa1, 0x0d, 0x4f, 0x40, 0x95,
	0x71, 0xbd, 0x94, 0x58, 0xaa, 0x0a, 0xe4, 0x2f, 0xd6, 0x89, 0x7e, 0x9c, 0x68, 0x1e, 0x8a, 0x3a,
	0x46, 0x5b, 0xea, 0xf5, 0x5b, 0x61, 0x9f, 0xb5, 0xc4, 0xad, 0x15, 0x69, 0x06, 0x79, 0xc3, 0x83,
	0x15, 0x9c, 0xbe, 0x5b, 0x02, 0xfe, 0xd7, 0x95, 0xe7, 0xab, 0x73, 0x31, 0x3e, 0xea, 0x09, 0x4a,
	0xf9, 0xaa, 0x3a, 0x17, 0x5d, 0x91, 0x3c, 0xca, 0x8f, 0x15, 0x83, 0x01, 0xbe, 0xaa, 0x56, 0x8f,
	0xae, 0x68, 0xeb, 0x83, 0xdf, 0xe8, 0x75, 0x3a, 0x5b, 0x41, 0x73, 0xef, 0xd0, 0xa8, 0x7b, 0x16,
	0x96, 0x32, 0x7d, 0xba, 0xa2, 0xef, 0x3a, 0x2c, 0x5e, 0x3d, 0xd8, 0xea, 0xb4, 0xe3, 0xdd, 0x43,
	0x23, 0xaf, 0x0d, 0xbe, 0xdd, 0xa5, 0x2b, 0xea, 0x7e, 0x30, 0x69, 0x58, 0x11, 0x46, 0x24, 0x11,
	0x3f, 0xa4, 0x66, 0x55, 0x87, 0x32, 0xa6, 0x3a, 0xa0, 0xee, 0x56, 0x19, 0x35, 0xb5, 0x8a, 0xa9,
	0xa9, 0xa6, 0x7a, 0x35, 0x35, 0x40, 0xbd, 0xaa, 0x65, 0xd4, 0x2b, 0xcc, 0xc4, 0xa8, 0xa9, 0x50,
	0x60, 0xa8, 0x50, 0xe4, 0x35, 0x0f, 0x4e, 0x60, 0x18, 0xb9, 0x33, 0xc1, 0x0f, 0x85, 0x1f, 0xd9,
	0xd2, 0x4d, 0x21, 0x23, 0xce, 0x5c, 0xb6, 0x8f, 0x12, 0xda, 0xc7, 0xdb, 0xd2, 0x97, 0xec, 0x70,
	0x48, 0xff, 0x7f, 0x61, 0x03, 0x68, 0x18, 0x9a, 0xd2, 0xb2, 0x61, 0x03, 0x90, 0x83, 0x30, 0x6a,
	0x92, 0x3f, 0x63, 0x36, 0x8b, 0x51, 0xf7, 0xfa, 0x71, 0x1b, 0x5d, 0x8c, 0x9d, 0xbb, 0x6a, 0xed,
	0xdc, 0x23, 0xdd, 0x4b, 0xfc, 0xd4, 0x83, 0xb5, 0x02, 0xf2, 0x5c, 0xcd, 0xc7, 0x23, 0x62, 0x39,
	0x36, 0xcc, 0xfd, 0x1e, 0x9f, 0x10, 0xb3, 0x2a, 0x79, 0xc7, 0x33, 0x2c, 0x01, 0x6e, 0x18, 0x74,
	0x2c, 0x8a, 0xc0, 0x3e, 0x9c, 0xc0, 0x06, 0xea, 0x4a, 0xe6, 0xb6, 0x75, 0x33, 0x92, 0xe8, 0x6d,
	0x44, 0x83, 0xd5, 0xb0, 0xcb, 0xf7, 0x55, 0xb9, 0x2a, 0xd0, 0xbe, 0x5c, 0x71, 0xcd, 0x3a, 0x80,
	0xda, 0xe8, 0xa4, 0xd1, 0x4a, 0xcb, 0x21, 0x9f, 0x37, 0xcc, 0x26, 0x8e, 0x18, 0x63, 0x90, 0x29,
	0x03, 0x19, 0x80, 0xab, 0x09, 0xff, 0x82, 0x07, 0x27, 0xc4, 0x86, 0x7e, 0x54, 0x14, 0x77, 0xe1,
	0x24, 0x3a, 0x02, 0x57, 0x24, 0x7f, 0xd1, 0x83, 0x93, 0x52, 0x45, 0x3b, 0x2a, 0x9a, 0x7b, 0xb0,
	0x82, 0x0f, 0xc1, 0x15, 0xd1, 0x1f, 0xa8, 0xbb, 0xa3, 0xf3, 0x51, 0x74, 0xa9, 0x1b, 0x27, 0x94,
	0xc7, 0x8e, 0xc2, 0xf1, 0x69, 0x1e, 0x26, 0x5b, 0x4d, 0x21, 0xe6, 0x26, 0x5b, 0x4d, 0x9a, 0xbe,
	0x74, 0x55, 0xe8, 0x49, 0x93, 0x97, 0xae, 0x6a, 0xaf, 0xf7, 0x6a, 0xfa, 0xeb, 0xbd, 0xd4, 0x58,
	0x34, 0xad, 0x19, 0x8b, 0x98, 0x95, 0x33, 0x4b, 0x95, 0xc3, 0xb7, 0x6f, 0xc6, 0xe5, 0x89, 0xd6,
	0xe9, 0x91, 0x38, 0x91, 0x8d, 0xcf, 0xb7, 0xe0, 0x6d, 0x4b, 0x45, 0x31, 0x29, 0x73, 0xe7, 0x03,
	0x3f, 0xdd, 0x96, 0xbd, 0xd8, 0x77, 0x2a, 0xfa, 0x84, 0xa6, 0xb5, 0xc8, 0xcf, 0xa5, 0xb2, 0xd1,
	0x08, 0x83, 0xe6, 0x6e, 0xb0, 0xd5, 0x09, 0x8f, 0x7a, 0x12, 0x46, 0xb9, 0xbd, 0x7a, 0xd7, 0x83,
	0xf5, 0xa2, 0xd1, 0xdf, 0x42, 0x40, 0x7f, 0xa0, 0xae, 0x6f, 0xfe, 0xdd, 0x04, 0x06, 0x42, 0x95,
	0x2b, 0x81, 0xf1, 0x0f, 0x0f, 0x4e, 0x21, 0xf2, 0x69, 0x0c, 0x07, 0xd9, 0xc3, 0xc5, 0x72, 0x93,
	0xf2, 0xf8, 0x76, 0x2f, 0x5e, 0x99, 0x66, 0xbc, 0xe3, 0xa7, 0x36, 0xb5, 0xa8, 0xd7, 0x4f, 0x58,
	0x2c, 0x35, 0x5e, 0x81, 0xc4, 0xb0, 0x9a, 0x4f, 0xb0, 0x2b, 0x98, 0x7f, 0xed, 0x89, 0x6b, 0xd6,
	0xdb, 0x03, 0x65, 0xdd, 0x6c, 0x5b, 0xb3, 0xde, 0x94, 0x7d, 0x28, 0xb7, 0x98, 0x43, 0xc4, 0xcf,
	0x34, 0x07, 0x95, 0x11, 0x73, 0x50, 0xae, 0x63, 0x8c, 0x70, 0xe1, 0xaf, 0xa2, 0x2e, 0xfc, 0x53,
	0xb9, 0x2e, 0xfc, 0x35, 0xc3, 0x85, 0x9f, 0xfc, 0x48, 0xdd, 0x5e, 0x07, 0x49, 0x73, 0x37, 0x6c,
	0x8d, 0x4f, 0xa4, 0x9b, 0xd6, 0x98, 0x72, 0xc6, 0x1a, 0x33, 0xca, 0x5d, 0x82, 0xda, 0x23, 0xd1,
	0x51, 0xde, 0x42, 0xa2, 0xfb, 0x5d, 0x39, 0xd0, 0xc7, 0xb6, 0xb7, 0xc3, 0x66, 0x72, 0x73, 0x78,
	0x16, 0xdd, 0x2d, 0x14, 0xf3, 0xcb, 0x28, 0x98, 0xbe, 0x23, 0xb7, 0x73, 0x7c, 0xa8, 0xb7, 0x10,
	0xa8, 0xef, 0xab, 0x78, 0x30, 0xd7, 0x04, 0xfb, 0xb8, 0xe5, 0x4c, 0xcc, 0x02, 0xa9, 0xad, 0x20,
	0x19, 0x30, 0x50, 0x3c, 0x82, 0xc1, 0x02, 0x06, 0xe6, 0x46, 0x3f, 0x20, 0x5f, 0x55, 0x8f, 0x83,
	0x53, 0x5a, 0x1c, 0x1e, 0xb8, 0x8b, 0xe8, 0xa4, 0x07, 0x50, 0x7e, 0xcb, 0x79, 0x64, 0xb0, 0xa6,
	0xc1, 0x07, 0xdd, 0xa3, 0xf1, 0x20, 0xd4, 0xe4, 0x60, 0xec, 0xe0, 0x83, 0xaa, 0x73, 0x55, 0x83,
	0x0e, 0x6c, 0xd9, 0x18, 0xd8, 0xad, 0xf2, 0x58, 0x56, 0xc5, 0x2f, 0x34, 0x07, 0xe6, 0x30, 0x7e,
	0xa1, 0x66, 0x33, 0xb7, 0xe2, 0x17, 0x2a, 0xdc, 0xb4, 0x3a, 0x24, 0x96, 0xf1, 0x50, 0x46, 0xe5,
	0x2a, 0x93, 0x7f, 0x4a, 0x19, 0xfe, 0x19, 0x70, 0x37, 0x62, 0x77, 0xea, 0x4a, 0xe3, 0x79, 0x4f,
	0xbd, 0x81, 0xbf, 0xb6, 0x1b, 0xf4, 0x5b, 0xed, 0xee, 0xce, 0xc5, 0x47, 0x71, 0x12, 0x7d, 0x28,
	0xb7, 0x52, 0x1a, 0xd9, 0x6f, 0x9a, 0xb7, 0xdb, 0x8b, 0x13, 0x19, 0xa3, 0x91, 0xfe, 0xa6, 0x79,
	0x54, 0x97, 0x13, 0xd1, 0xe6, 0xd8, 0x6f, 0x9a, 0x77, 0x10, 0x87, 0xd2, 0x8f, 0x8a, 0xfd, 0xa6,
	0x00, 0x44, 0x41, 0x1c, 0x3f, 0xd7, 0xeb, 0x2b, 0xd7, 0x13, 0x99, 0x46, 0xa5, 0x90, 0x52, 0xc3,
	0x6b, 0xba, 0x1a, 0xbe, 0x27, 0xad, 0x11, 0xfa, 0xf0, 0x5d, 0x81, 0xf5, 0x88, 0x78, 0x10, 0x7f,
	0x13, 0x50, 0x51, 0x4e, 0x5f, 0xca, 0x7c, 0xec, 0x8a, 0xcf, 0xcf, 0x01, 0xc4, 0xaa, 0x1b, 0x21,
	0x1f, 0x94, 0xae, 0xad, 0x0d, 0x40, 0xab, 0x45, 0xee, 0x17, 0xfe, 0x18, 0x69, 0x71, 0xae, 0x90,
	0x20, 0x6f, 0x49, 0x7f, 0x03, 0xbb, 0xb2, 0x2b, 0x82, 0xfe, 0x1b, 0x66, 0xd2, 0xa1, 0xca, 0x95,
	0x8b, 0x51, 0xa4, 0x57, 0x63, 0xcc, 0xcd, 0x0f, 0x69, 0xb7, 0x2d, 0x73, 0x67, 0x87, 0xef, 0x8a,
	0xb9, 0xbf, 0x9e, 0xea, 0x25, 0xa2, 0xb7, 0x5c, 0x51, 0xb7, 0x17, 0xde, 0x90, 0xa2, 0x6e, 0x2f,
	0xbc, 0xa1, 0xc0, 0x2b, 0x69, 0xe0, 0x9d, 0x80, 0x6a, 0x6b, 0x4b, 0xbb, 0xb4, 0x10, 0xa9, 0xe1,
	0xe3, 0x01, 0x50, 0x21, 0x68, 0x0f, 0xc7, 0x15, 0xe9, 0x32, 0x0e, 0xf8, 0x88, 0x84, 0x6b, 0xfb,
	0xbd, 0xeb, 0x21, 0xb2, 0xfd, 0x5e, 0x74, 0x92, 0xd9, 0xef, 0x65, 0xe7, 0xaa, 0x06, 0x9b, 0x4b,
	0x93, 0x73, 0x8e, 0x7c, 0x2e, 0xed, 0xe1, 0xb8, 0x9a, 0xcb, 0xdf, 0x7a, 0x32, 0xfa, 0xd6, 0xf9,
	0x83, 0x56, 0x9e, 0xeb, 0x28, 0xdd, 0x9c, 0x7b, 0x07, 0xfd, 0x66, 0xc8, 0x0c, 0x9e, 0x3c, 0xce,
	0xb2, 0x96, 0x43, 0x1b, 0xef, 0x45, 0xac, 0x8c, 0x47, 0x52, 0x15, 0x29, 0x24, 0x80, 0x78, 0x1d,
	0x6a, 0xfc, 0xbb, 0xf4, 0x4c, 0x2b, 0xd3, 0x45, 0xd7, 0x71, 0x23, 0x08, 0x81, 0x6d, 0xf9, 0x3c,
	0x53, 0xd0, 0xe3, 0x0a, 0xb8, 0xdf, 0x7b, 0x2a, 0xaa, 0x7d, 0xab, 0x3d, 0x52, 0x34, 0x15, 0x13,
	0xcd, 0x52, 0x01, 0x9a, 0x65, 0x03, 0xcd, 0x9b, 0xc5, 0x6e, 0x14, 0x7b, 0xf4, 0xcb, 0x32, 0x88,
	0x8d, 0x46, 0x95, 0xab, 0x35, 0x7a, 0x0f, 0x54, 0x03, 0xda, 0x8b, 0xdc, 0x9f, 0xe6, 0xd4, 0x49,
	0x90, 0xcd, 0x9c, 0x28, 0x3c, 0xf7, 0x9b, 0x8f, 0xc0, 0xcc, 0xc5, 0x20, 0x09, 0xae, 0xf0, 0x7f,
	0x5a, 0xe0, 0x5f, 0x15, 0x81, 0xd3, 0xe4, 0x7f, 0x13, 0xf0, 0xd7, 0x1e, 0xd6, 0xff, 0xcd, 0x81,
	0xfd, 0x1f, 0x0a, 0xea, 0xeb, 0x45, 0xc5, 0x71, 0x44, 0x26, 0xfc, 0xa7, 0xd3, 0xd0, 0xbe, 0x32,
	0xa8, 0xbe, 0xbf, 0x81, 0x7c, 0x65, 0xfc, 0xff, 0x80, 0xfa, 0xe9, 0x01, 0x35, 0x58, 0xd3, 0xd7,
	0xe4, 0xea, 0x92, 0x51, 0xb2, 0x7d, 0x73, 0x38, 0x99, 0x00, 0xf8, 0xf5, 0x3b, 0x0b, 0xcb, 0x59,
	0xa3, 0x12, 0x01, 0xd5, 0x26, 0x82, 0x80, 0xde, 0xe4, 0x7a, 0x51, 0x31, 0x6b, 0xf1, 0x33, 0x56,
	0x14, 0x78, 0x3a, 0xf1, 0xfe, 0xe9, 0xfc, 0xcf, 0x04, 0xbb, 0xd7, 0xc9, 0xa0, 0x2a, 0x12, 0x04,
	0x33, 0x54, 0xb8, 0x05, 0x42, 0x26, 0xe0, 0xb9, 0x05, 0x42, 0x36, 0xce, 0x38, 0x99, 0xf0, 0x2f,
	0xc2, 0xb4, 0x32, 0x78, 0xfa, 0x77, 0x20, 0xa0, 0xf1, 0x90, 0xbf, 0xf5, 0x7a, 0x5e, 0x11, 0x6b,
	0xe5, 0x3c, 0xd4, 0xe4, 0xcc, 0xf9, 0x2b, 0xe8, 0x84, 0xd2, 0x36, 0xee, 0xc8, 0x29, 0x61, 0x4d,
	0x5c, 0x49, 0x03, 0x60, 0x33, 0xd8, 0x56, 0xd1, 0xca, 0x12, 0xb1, 0xb5, 0x82, 0x52, 0x49, 0x97,
	0x32, 0x94, 0x5b, 0x74, 0xe9, 0x41, 0x9f, 0x2d, 0xba, 0x8c, 0x58, 0xca, 0xbc, 0x15, 0x15, 0x92,
	0xd8, 0x6a, 0x45, 0x0f, 0x88, 0x6c, 0xb5, 0x62, 0x44, 0x31, 0xe6, 0x8c, 0x66, 0x84, 0xe2, 0xb5,
	0x18, 0xcd, 0x8e, 0x46, 0x5c, 0x5f, 0x2f, 0x2a, 0x36, 0xc0, 0x92, 0x0d, 0x22, 0x60, 0x69, 0xed,
	0xad, 0x15, 0x94, 0x1a, 0x2b, 0x57, 0x8b, 0xee, 0x8a, 0xad, 0x5c, 0x33, 0x28, 0x2d, 0xb6, 0x72,
	0xad, 0xf0, 0xb0, 0x9c, 0x76, 0x23, 0x6a, 0xa9, 0x45, 0xbb, 0x1d, 0xb9, 0xb5, 0xbe, 0x5e, 0x54,
	0x2c, 0x5b, 0x34, 0x62, 0x85, 0x5a, 0x2d, 0xda, 0x91, 0x4b, 0xad, 0x16, 0x33, 0x61, 0x46, 0xc9,
	0x84, 0xff, 0x31, 0x80, 0x34, 0x72, 0xa6, 0x8f, 0x71, 0xba, 0x88, 0xaa, 0x57, 0x3f, 0x95, 0x5b,
	0x26, 0xd9, 0x45, 0x85, 0x48, 0xf4, 0x11, 0x6e, 0x97, 0xcd, 0xd4, 0xf3, 0x8a, 0x0c, 0xb9, 0x24,
	0x03, 0x2d, 0x62, 0x72, 0x49, 0x8b, 0x32, 0x89, 0xc9, 0x25, 0x3d, 0x46, 0x23, 0x27, 0x30, 0x0d,
	0x42, 0xe8, 0x63, 0x2c, 0x8f, 0x13, 0x68, 0x46, 0x2e, 0xe4, 0x0d, 0xa5, 0xd1, 0xff, 0x7c, 0x8c,
	0xeb, 0xf1, 0x86, 0xcc, 0x90, 0x81, 0x64, 0xc2, 0xff, 0x64, 0x1a, 0xfd, 0x41, 0x04, 0x19, 0xf2,
	0x31, 0x89, 0xad, 0x07, 0x3d, 0xaa, 0x6f, 0x14, 0x57, 0x90, 0x32, 0xd2, 0x8c, 0x82, 0xe6, 0x23,
	0xe8, 0x18, 0xad, 0xde, 0x59, 0x58, 0xce, 0x1a, 0x7d, 0xc6, 0x8e, 0x48, 0xc7, 0x66, 0x85, 0x14,
	0x7c, 0x28, 0xa7, 0xe6, 0xae, 0x81, 0x75, 0x24, 0x1a, 0x56, 0x48, 0x31, 0x1f, 0x13, 0xdd, 0x05,
	0x68, 0x20, 0x11, 0xc9, 0x78, 0xbb, 0x56, 0x30, 0x2f, 0xab, 0xdd, 0x6c, 0x70, 0x31, 0xab, 0x5d,
	0x24, 0x16, 0x18, 0xe7, 0x50, 0x23, 0x64, 0x96, 0xc5, 0xa1, 0x76, 0x4c, 0x2f, 0x8b, 0x43, 0x33,
	0xd1, 0xb6, 0x04, 0x02, 0x66, 0xd0, 0x29, 0x1b, 0x81, 0x4c, 0x10, 0x2c, 0x1b, 0x81, 0x6c, 0xcc,
	0x2a, 0x43, 0xf4, 0x8a, 0xc7, 0xf1, 0x6b, 0xb9, 0x4c, 0x14, 0xe7, 0x8a, 0xde, 0x34, 0xe2, 0x8c,
	0x2e, 0x7a, 0x45, 0x83, 0xab, 0x79, 0x53, 0x1c, 0xe7, 0x89, 0x5e, 0xa3, 0xb9, 0xa7, 0xcd, 0x38,
	0x43, 0xb9, 0xa2, 0xd7, 0x08, 0x30, 0x83, 0x8a, 0x5e, 0x33, 0xc4, 0x0b, 0x99, 0xf0, 0xb7, 0x84,
	0xe9, 0xc7, 0x0c, 0x9c, 0xe3, 0x23, 0x3c, 0x99, 0x89, 0x27, 0x54, 0xbf, 0x7b, 0x70, 0x25, 0x89,
	0x86, 0x1e, 0x2f, 0xc4, 0x42, 0xc3, 0x0a, 0xf0, 0x52, 0x5f, 0x2b, 0x28, 0x65, 0xcd, 0x3d, 0x2e,
	0xfe, 0xc7, 0x86, 0x68, 0xed, 0x14, 0x46, 0xa6, 0x6c, 0x6c, 0x35, 0xbf, 0xd0, 0x20, 0xdf, 0x0c,
	0x37, 0x81, 0x91, 0x9f, 0x89, 0xb3, 0x81, 0x91, 0x9f, 0x8d, 0x5a, 0xc1, 0xc9, 0xd7, 0x03, 0x24,
	0x58, 0xe4, 0x5b, 0x21, 0x25, 0xea, 0x6b, 0x05, 0xa5, 0x0a, 0x4d, 0x2d, 0x2e, 0x81, 0x8d, 0xa6,
	0x19, 0x21, 0xc1, 0x46, 0xd3, 0x0a, 0x68, 0x20, 0x98, 0x5f, 0x7f, 0xda, 0x6f, 0x33, 0xbf, 0x15,
	0x98, 0xc0, 0x66, 0x7e, 0x3b, 0x2a, 0x00, 0x57, 0x70, 0x33, 0x0f, 0xe3, 0x2d, 0x05, 0x17, 0x7b,
	0xe1, 0x6f, 0x29, 0xb8, 0xe8, 0xdb, 0x7a, 0x6d, 0x2d, 0xe8, 0x8d, 0x23, 0x6b, 0xc1, 0x6a, 0xfb,
	0xf4, 0x80, 0x1a, 0xac, 0xe9, 0xeb, 0xe6, 0x4b, 0x1e, 0xfd, 0xd9, 0xb5, 0xbf, 0x99, 0x3b, 0xd9,
	0xd6, 0xeb, 0xf2, 0xfa, 0x99, 0x21, 0x6b, 0xb2, 0x2e, 0xbb, 0xc2, 0x58, 0x99, 0x7d, 0xd2, 0xec,
	0xdf, 0x57, 0x38, 0xe4, 0xd4, 0x61, 0xb5, 0xbe, 0x39, 0x5c, 0x45, 0x39, 0x37, 0x99, 0xd7, 0xc1,
	0xd6, 0xdc, 0x60, 0xef, 0x99, 0xad, 0xb9, 0x41, 0x1f, 0x18, 0x8b, 0x99, 0xb7, 0xdf, 0xe3, 0xda,
	0x33, 0x8f, 0xbc, 0x16, 0xb6, 0x67, 0x1e, 0x7b, 0xd2, 0xcb, 0x77, 0xd8, 0xec, 0x03, 0x58, 0x6b,
	0x87, 0x45, 0x1f, 0xe8, 0x5a, 0x3b, 0x2c, 0xfe, 0x8a, 0x56, 0xdf, 0x07, 0x84, 0x14, 0x43, 0xf7,
	0x81, 0xd4, 0xe7, 0x02, 0xdd, 0x07, 0x34, 0x3f, 0x06, 0x6d, 0x1f, 0x90, 0x0d, 0xae, 0xe6, 0x4a,
	0xcc, 0x9c, 0x7d, 0xc0, 0x6c, 0x4e, 0x4a, 0x2b, 0xf3, 0xa1, 0x1f, 0x26, 0xad, 0x32, 0x2f, 0x17,
	0x31, 0x69, 0x95, 0x7d, 0x2f, 0x48, 0x26, 0xfc, 0x50, 0x5c, 0xc7, 0x59, 0xcf, 0xd9, 0xfc, 0x7c,
	0x69, 0xa7, 0xf7, 0x72, 0xcf, 0x10, 0xb5, 0x4c, 0x95, 0x1f, 0xc7, 0xda, 0x7e, 0xb2, 0x86, 0xaa,
	0xfc, 0x26, 0x38, 0x74, 0xf6, 0xf4, 0x27, 0x57, 0x3e, 0x26, 0xfa, 0xf2, 0x67, 0xcf, 0x7e, 0xad,
	0xc5, 0xf5, 0x0d, 0xeb, 0x99, 0x93, 0xa5, 0x6f, 0x64, 0x1f, 0x5e, 0x59, 0xfa, 0x06, 0xf2, 0x4a,
	0x8a, 0xeb, 0x9f, 0xe6, 0xfb, 0x22, 0x4b, 0xff, 0xcc, 0xbc, 0x77, 0xb2, 0xf4, 0xcf, 0xec, 0xe3,
	0x24, 0xb1, 0x3a, 0x32, 0x8f, 0x64, 0xfc, 0x5c, 0x99, 0xaa, 0x35, 0x7e, 0xd7, 0xc0, 0x3a, 0x86,
	0xdd, 0xc2, 0x68, 0x3f, 0x4f, 0xae, 0x6a, 0xcd, 0x93, 0x41, 0x55, 0x0c, 0xd9, 0x8b, 0x38, 0xca,
	0xfb, 0x9b, 0xc5, 0x2d, 0x68, 0xa2, 0xf0, 0xcc, 0x90, 0x35, 0x25, 0x62, 0xd9, 0x67, 0x07, 0x7e,
	0xae, 0xa4, 0xcb, 0x45, 0x0c, 0x7f, 0xbb, 0x20, 0xa6, 0x24, 0xe3, 0xe6, 0xee, 0xe7, 0x0a, 0xbb,
	0xfc, 0x29, 0x41, 0x7d, 0xe5, 0xb9, 0x3c, 0x40, 0xbc, 0xca, 0x2d, 0x79, 0x80, 0x7b, 0xbe, 0x5b,
	0xf2, 0x20, 0xc7, 0x39, 0x9d, 0xcb, 0x03, 0xcc, 0x8b, 0xdb, 0x92, 0x07, 0x39, 0xbe, 0xe6, 0x96,
	0x3c, 0xc8, 0x73, 0x07, 0x27, 0x13, 0x7e, 0x02, 0x77, 0xe4, 0xbe, 0xaf, 0xf1, 0x07, 0x6c, 0xa9,
	0xba, 0x00, 0xba, 0x7f, 0xd8, 0xaa, 0xa6, 0xaa, 0xa2, 0x39, 0xc4, 0xa0, 0xaa, 0x8a, 0xe9, 0x1f,
	0x8a, 0xaa, 0x2a, 0x96, 0xb3, 0x65, 0x56, 0x9f, 0xd0, 0xdd, 0x7e, 0x0a, 0xf4, 0x09, 0xcb, 0x91,
	0xa9, 0x40, 0x9f, 0xb0, 0xfd, 0x88, 0xc8, 0x84, 0xff, 0x9c, 0x70, 0x12, 0x44, 0x7d, 0x6f, 0xfd,
	0xfb, 0xb1, 0x0d, 0x06, 0x77, 0x31, 0xae, 0x3f, 0x30, 0x74, 0x5d, 0x53, 0xb1, 0xc8, 0x47, 0x12,
	0xf3, 0xb4, 0x45, 0x15, 0x0b, 0x14, 0xc9, 0x3c, 0x8f, 0x4b, 0x0b, 0xc9, 0x02, 0x4f, 0x54, 0x0b,
	0xc9, 0x22, 0x17, 0x4e, 0x4d, 0x33, 0x43, 0x7a, 0xbc, 0x0f, 0xb5, 0x2b, 0x22, 0x1d, 0x6e, 0x0e,
	0x57, 0xd1, 0x58, 0x00, 0x98, 0x93, 0x18, 0xb6, 0x00, 0x72, 0xfc, 0xde, 0xb0, 0x05, 0x90, 0xe7,
	0x77, 0xa6, 0x8b, 0xdd, 0xac, 0xbb, 0x1f, 0x2a, 0x76, 0x51, 0xdf, 0x45, 0x54, 0xec, 0xe2, 0xfe,
	0x83, 0xba, 0x99, 0x5e, 0x7a, 0x90, 0xa0, 0x66, 0x7a, 0xcd, 0xa7, 0x05, 0x35, 0xd3, 0xeb, 0xee,
	0x27, 0x9a, 0x39, 0x4c, 0xb5, 0x89, 0xe8, 0x52, 0x7a, 0x93, 0xeb, 0x45, 0xc5, 0xc6, 0x76, 0xa7,
	0x7b, 0xff, 0x60, 0xdb, 0x9d, 0xe5, 0xb6, 0x84, 0x6d, 0x77, 0xb6, 0x03, 0x11, 0x07, 0xc1, 0x74,
	0xa3, 0xf1, 0x31, 0x0b, 0x64, 0x3e, 0x08, 0x59, 0x1f, 0x1c, 0x7e, 0x34, 0xb2, 0x1d, 0x4e, 0x7c,
	0xcc, 0x1e, 0x66, 0x78, 0x1c, 0xd4, 0x4f, 0x0f, 0xa8, 0x21, 0x55, 0x21, 0xcb, 0xa9, 0xc2, 0x47,
	0x6c, 0x62, 0x66, 0xc3, 0x1b, 0xc5, 0x15, 0x0c, 0x8d, 0xd6, 0x74, 0xd6, 0xc0, 0x34, 0xda, 0x8c,
	0xef, 0x07, 0xa6, 0xd1, 0x66, 0x7d, 0x3e, 0x38, 0x2c, 0xb6, 0xab, 0x82, 0x8f, 0x19, 0xc6, 0x8a,
	0x60, 0xc1, 0x7c, 0x1d, 0x0c, 0x5e, 0x16, 0x25, 0x38, 0x2f, 0xa7, 0x17, 0xdd, 0x38, 0x2f, 0x6b,
	0x37, 0xcf, 0x3a, 0x2f, 0xcb, 0x36, 0xd7, 0xf2, 0x09, 0xcd, 0xe3, 0x65, 0xb3, 0x45, 0x75, 0x29,
	0x94, 0x33, 0xcc, 0xcc, 0x7d, 0x3c, 0x7a, 0x29, 0x64, 0x35, 0xfa, 0x38, 0xcc, 0x68, 0x97, 0xbf,
	0x3e, 0x66, 0xf5, 0x96, 0xd7, 0xdc, 0xf5, 0xd5, 0xfc, 0x42, 0xc3, 0x22, 0xab, 0x6e, 0x42, 0x7d,
	0xf4, 0x26, 0x31, 0xbd, 0xfc, 0xc5, 0x2c, 0xb2, 0xc6, 0x35, 0x2a, 0x99, 0xd8, 0xaa, 0xb2, 0xff,
	0xa4, 0xfe, 0x5f, 0xff, 0x0c, 0x00, 0x00, 0xff, 0xff, 0xa0, 0xca, 0x64, 0x9a, 0x9a, 0x7d, 0x00,
	0x00,
}
