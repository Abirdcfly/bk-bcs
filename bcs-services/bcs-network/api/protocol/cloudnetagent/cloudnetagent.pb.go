// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cloudnetagent.proto

package cloudnetagent

import (
	context "context"
	fmt "fmt"
	common "github.com/Tencent/bk-bcs/bcs-services/bcs-network/api/protocol/common"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type AllocIPReq struct {
	Seq                  uint64   `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
	ContainerID          string   `protobuf:"bytes,2,opt,name=containerID,proto3" json:"containerID,omitempty"`
	PodName              string   `protobuf:"bytes,3,opt,name=podName,proto3" json:"podName,omitempty"`
	PodNamespace         string   `protobuf:"bytes,4,opt,name=podNamespace,proto3" json:"podNamespace,omitempty"`
	IpAddr               string   `protobuf:"bytes,5,opt,name=ipAddr,proto3" json:"ipAddr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AllocIPReq) Reset()         { *m = AllocIPReq{} }
func (m *AllocIPReq) String() string { return proto.CompactTextString(m) }
func (*AllocIPReq) ProtoMessage()    {}
func (*AllocIPReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c36d1b9834c0c11, []int{0}
}

func (m *AllocIPReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AllocIPReq.Unmarshal(m, b)
}
func (m *AllocIPReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AllocIPReq.Marshal(b, m, deterministic)
}
func (m *AllocIPReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllocIPReq.Merge(m, src)
}
func (m *AllocIPReq) XXX_Size() int {
	return xxx_messageInfo_AllocIPReq.Size(m)
}
func (m *AllocIPReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AllocIPReq.DiscardUnknown(m)
}

var xxx_messageInfo_AllocIPReq proto.InternalMessageInfo

func (m *AllocIPReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *AllocIPReq) GetContainerID() string {
	if m != nil {
		return m.ContainerID
	}
	return ""
}

func (m *AllocIPReq) GetPodName() string {
	if m != nil {
		return m.PodName
	}
	return ""
}

func (m *AllocIPReq) GetPodNamespace() string {
	if m != nil {
		return m.PodNamespace
	}
	return ""
}

func (m *AllocIPReq) GetIpAddr() string {
	if m != nil {
		return m.IpAddr
	}
	return ""
}

type AllocIPResp struct {
	Seq                  uint64         `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
	ErrCode              common.ErrCode `protobuf:"varint,2,opt,name=errCode,proto3,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg               string         `protobuf:"bytes,3,opt,name=errMsg,proto3" json:"errMsg,omitempty"`
	IpAddr               string         `protobuf:"bytes,4,opt,name=ipAddr,proto3" json:"ipAddr,omitempty"`
	MacAddr              string         `protobuf:"bytes,5,opt,name=macAddr,proto3" json:"macAddr,omitempty"`
	Mask                 int32          `protobuf:"varint,6,opt,name=mask,proto3" json:"mask,omitempty"`
	Gateway              string         `protobuf:"bytes,7,opt,name=gateway,proto3" json:"gateway,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *AllocIPResp) Reset()         { *m = AllocIPResp{} }
func (m *AllocIPResp) String() string { return proto.CompactTextString(m) }
func (*AllocIPResp) ProtoMessage()    {}
func (*AllocIPResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c36d1b9834c0c11, []int{1}
}

func (m *AllocIPResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AllocIPResp.Unmarshal(m, b)
}
func (m *AllocIPResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AllocIPResp.Marshal(b, m, deterministic)
}
func (m *AllocIPResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllocIPResp.Merge(m, src)
}
func (m *AllocIPResp) XXX_Size() int {
	return xxx_messageInfo_AllocIPResp.Size(m)
}
func (m *AllocIPResp) XXX_DiscardUnknown() {
	xxx_messageInfo_AllocIPResp.DiscardUnknown(m)
}

var xxx_messageInfo_AllocIPResp proto.InternalMessageInfo

func (m *AllocIPResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *AllocIPResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_ERROR_OK
}

func (m *AllocIPResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *AllocIPResp) GetIpAddr() string {
	if m != nil {
		return m.IpAddr
	}
	return ""
}

func (m *AllocIPResp) GetMacAddr() string {
	if m != nil {
		return m.MacAddr
	}
	return ""
}

func (m *AllocIPResp) GetMask() int32 {
	if m != nil {
		return m.Mask
	}
	return 0
}

func (m *AllocIPResp) GetGateway() string {
	if m != nil {
		return m.Gateway
	}
	return ""
}

type ReleaseIPReq struct {
	Seq                  uint64   `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
	ContainerID          string   `protobuf:"bytes,2,opt,name=containerID,proto3" json:"containerID,omitempty"`
	PodName              string   `protobuf:"bytes,3,opt,name=podName,proto3" json:"podName,omitempty"`
	PodNamespace         string   `protobuf:"bytes,4,opt,name=podNamespace,proto3" json:"podNamespace,omitempty"`
	IpAddr               string   `protobuf:"bytes,5,opt,name=ipAddr,proto3" json:"ipAddr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReleaseIPReq) Reset()         { *m = ReleaseIPReq{} }
func (m *ReleaseIPReq) String() string { return proto.CompactTextString(m) }
func (*ReleaseIPReq) ProtoMessage()    {}
func (*ReleaseIPReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c36d1b9834c0c11, []int{2}
}

func (m *ReleaseIPReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReleaseIPReq.Unmarshal(m, b)
}
func (m *ReleaseIPReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReleaseIPReq.Marshal(b, m, deterministic)
}
func (m *ReleaseIPReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReleaseIPReq.Merge(m, src)
}
func (m *ReleaseIPReq) XXX_Size() int {
	return xxx_messageInfo_ReleaseIPReq.Size(m)
}
func (m *ReleaseIPReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ReleaseIPReq.DiscardUnknown(m)
}

var xxx_messageInfo_ReleaseIPReq proto.InternalMessageInfo

func (m *ReleaseIPReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *ReleaseIPReq) GetContainerID() string {
	if m != nil {
		return m.ContainerID
	}
	return ""
}

func (m *ReleaseIPReq) GetPodName() string {
	if m != nil {
		return m.PodName
	}
	return ""
}

func (m *ReleaseIPReq) GetPodNamespace() string {
	if m != nil {
		return m.PodNamespace
	}
	return ""
}

func (m *ReleaseIPReq) GetIpAddr() string {
	if m != nil {
		return m.IpAddr
	}
	return ""
}

type ReleaseIPResp struct {
	Seq                  uint64         `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
	ErrCode              common.ErrCode `protobuf:"varint,2,opt,name=errCode,proto3,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg               string         `protobuf:"bytes,3,opt,name=errMsg,proto3" json:"errMsg,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ReleaseIPResp) Reset()         { *m = ReleaseIPResp{} }
func (m *ReleaseIPResp) String() string { return proto.CompactTextString(m) }
func (*ReleaseIPResp) ProtoMessage()    {}
func (*ReleaseIPResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c36d1b9834c0c11, []int{3}
}

func (m *ReleaseIPResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReleaseIPResp.Unmarshal(m, b)
}
func (m *ReleaseIPResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReleaseIPResp.Marshal(b, m, deterministic)
}
func (m *ReleaseIPResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReleaseIPResp.Merge(m, src)
}
func (m *ReleaseIPResp) XXX_Size() int {
	return xxx_messageInfo_ReleaseIPResp.Size(m)
}
func (m *ReleaseIPResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ReleaseIPResp.DiscardUnknown(m)
}

var xxx_messageInfo_ReleaseIPResp proto.InternalMessageInfo

func (m *ReleaseIPResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *ReleaseIPResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_ERROR_OK
}

func (m *ReleaseIPResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func init() {
	proto.RegisterType((*AllocIPReq)(nil), "cloudnetagent.AllocIPReq")
	proto.RegisterType((*AllocIPResp)(nil), "cloudnetagent.AllocIPResp")
	proto.RegisterType((*ReleaseIPReq)(nil), "cloudnetagent.ReleaseIPReq")
	proto.RegisterType((*ReleaseIPResp)(nil), "cloudnetagent.ReleaseIPResp")
}

func init() { proto.RegisterFile("cloudnetagent.proto", fileDescriptor_3c36d1b9834c0c11) }

var fileDescriptor_3c36d1b9834c0c11 = []byte{
	// 377 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x53, 0x41, 0xae, 0xd3, 0x30,
	0x10, 0xc5, 0xfc, 0xb4, 0x51, 0xa7, 0x2d, 0x20, 0x23, 0x21, 0x13, 0x58, 0x44, 0x59, 0x95, 0x45,
	0x13, 0xa9, 0x9c, 0xa0, 0x14, 0x24, 0xba, 0xa0, 0x42, 0x81, 0x0b, 0x38, 0xce, 0x28, 0x44, 0x4d,
	0xec, 0xd4, 0x76, 0xa9, 0xb8, 0x08, 0x62, 0xc3, 0x65, 0x38, 0x19, 0x4a, 0xe2, 0x96, 0x14, 0xd1,
	0x25, 0xd2, 0x5f, 0x65, 0xde, 0xbc, 0x91, 0xdf, 0xf3, 0xe4, 0x19, 0x9e, 0x8a, 0x4a, 0x1d, 0x73,
	0x89, 0x96, 0x17, 0x28, 0x6d, 0xdc, 0x68, 0x65, 0x15, 0x9d, 0x5f, 0x35, 0x83, 0x4f, 0x45, 0x69,
	0xbf, 0x1c, 0xb3, 0x58, 0xa8, 0x3a, 0xf9, 0x8c, 0x52, 0xa0, 0xb4, 0x49, 0xb6, 0x5f, 0x66, 0xc2,
	0x24, 0x99, 0x30, 0x4b, 0x83, 0xfa, 0x6b, 0x29, 0xb0, 0x07, 0x12, 0xed, 0x49, 0xe9, 0x7d, 0xc2,
	0x9b, 0x32, 0xe9, 0x0e, 0x13, 0xaa, 0x4a, 0x84, 0xaa, 0x6b, 0x25, 0xdd, 0xa7, 0xd7, 0x88, 0xbe,
	0x13, 0x80, 0x75, 0x55, 0x29, 0xb1, 0xfd, 0x98, 0xe2, 0x81, 0x3e, 0x81, 0x3b, 0x83, 0x07, 0x46,
	0x42, 0xb2, 0xf0, 0xd2, 0xb6, 0xa4, 0x21, 0x4c, 0x85, 0x92, 0x96, 0x97, 0x12, 0xf5, 0xf6, 0x2d,
	0x7b, 0x18, 0x92, 0xc5, 0x24, 0x1d, 0xb6, 0x28, 0x03, 0xbf, 0x51, 0xf9, 0x8e, 0xd7, 0xc8, 0xee,
	0x3a, 0xf6, 0x0c, 0x69, 0x04, 0x33, 0x57, 0x9a, 0x86, 0x0b, 0x64, 0x5e, 0x47, 0x5f, 0xf5, 0xe8,
	0x33, 0x18, 0x97, 0xcd, 0x3a, 0xcf, 0x35, 0x1b, 0x75, 0xac, 0x43, 0xd1, 0x2f, 0x02, 0xd3, 0x8b,
	0x31, 0xd3, 0xfc, 0xc3, 0xd9, 0x2b, 0xf0, 0x51, 0xeb, 0x8d, 0xca, 0xb1, 0x73, 0xf5, 0x68, 0xf5,
	0x38, 0x76, 0x57, 0x7b, 0xd7, 0xb7, 0xd3, 0x33, 0xdf, 0x8a, 0xa0, 0xd6, 0x1f, 0x4c, 0xe1, 0x1c,
	0x3a, 0x34, 0x10, 0xf7, 0x86, 0xe2, 0xed, 0x95, 0x6a, 0x2e, 0x06, 0xae, 0xce, 0x90, 0x52, 0xf0,
	0x6a, 0x6e, 0xf6, 0x6c, 0x1c, 0x92, 0xc5, 0x28, 0xed, 0xea, 0x76, 0xba, 0xe0, 0x16, 0x4f, 0xfc,
	0x1b, 0xf3, 0xfb, 0x69, 0x07, 0xa3, 0x1f, 0x04, 0x66, 0x29, 0x56, 0xc8, 0x0d, 0xde, 0xb7, 0xfd,
	0xe6, 0x30, 0x1f, 0x38, 0xfb, 0x4f, 0x0b, 0x5e, 0xfd, 0x24, 0x30, 0xdf, 0xb4, 0x29, 0xde, 0xb9,
	0x14, 0xd3, 0x37, 0xe0, 0xbb, 0xdf, 0x4a, 0x9f, 0xc7, 0xd7, 0xa9, 0xff, 0x93, 0xc3, 0x20, 0xb8,
	0x45, 0x99, 0x26, 0x7a, 0x40, 0xdf, 0xc3, 0xe4, 0xe2, 0x9d, 0xbe, 0xf8, 0x6b, 0x74, 0xb8, 0xef,
	0xe0, 0xe5, 0x6d, 0xb2, 0x3d, 0x29, 0x1b, 0x77, 0xaf, 0xe0, 0xf5, 0xef, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x9d, 0x05, 0xda, 0x9b, 0x80, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CloudNetagentClient is the client API for CloudNetagent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CloudNetagentClient interface {
	AllocIP(ctx context.Context, in *AllocIPReq, opts ...grpc.CallOption) (*AllocIPResp, error)
	ReleaseIP(ctx context.Context, in *ReleaseIPReq, opts ...grpc.CallOption) (*ReleaseIPResp, error)
}

type cloudNetagentClient struct {
	cc *grpc.ClientConn
}

func NewCloudNetagentClient(cc *grpc.ClientConn) CloudNetagentClient {
	return &cloudNetagentClient{cc}
}

func (c *cloudNetagentClient) AllocIP(ctx context.Context, in *AllocIPReq, opts ...grpc.CallOption) (*AllocIPResp, error) {
	out := new(AllocIPResp)
	err := c.cc.Invoke(ctx, "/cloudnetagent.CloudNetagent/AllocIP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudNetagentClient) ReleaseIP(ctx context.Context, in *ReleaseIPReq, opts ...grpc.CallOption) (*ReleaseIPResp, error) {
	out := new(ReleaseIPResp)
	err := c.cc.Invoke(ctx, "/cloudnetagent.CloudNetagent/ReleaseIP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CloudNetagentServer is the server API for CloudNetagent service.
type CloudNetagentServer interface {
	AllocIP(context.Context, *AllocIPReq) (*AllocIPResp, error)
	ReleaseIP(context.Context, *ReleaseIPReq) (*ReleaseIPResp, error)
}

// UnimplementedCloudNetagentServer can be embedded to have forward compatible implementations.
type UnimplementedCloudNetagentServer struct {
}

func (*UnimplementedCloudNetagentServer) AllocIP(ctx context.Context, req *AllocIPReq) (*AllocIPResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllocIP not implemented")
}
func (*UnimplementedCloudNetagentServer) ReleaseIP(ctx context.Context, req *ReleaseIPReq) (*ReleaseIPResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseIP not implemented")
}

func RegisterCloudNetagentServer(s *grpc.Server, srv CloudNetagentServer) {
	s.RegisterService(&_CloudNetagent_serviceDesc, srv)
}

func _CloudNetagent_AllocIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllocIPReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudNetagentServer).AllocIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloudnetagent.CloudNetagent/AllocIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudNetagentServer).AllocIP(ctx, req.(*AllocIPReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudNetagent_ReleaseIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseIPReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudNetagentServer).ReleaseIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloudnetagent.CloudNetagent/ReleaseIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudNetagentServer).ReleaseIP(ctx, req.(*ReleaseIPReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _CloudNetagent_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cloudnetagent.CloudNetagent",
	HandlerType: (*CloudNetagentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AllocIP",
			Handler:    _CloudNetagent_AllocIP_Handler,
		},
		{
			MethodName: "ReleaseIP",
			Handler:    _CloudNetagent_ReleaseIP_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloudnetagent.proto",
}
